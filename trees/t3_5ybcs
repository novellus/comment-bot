{"controversiality": 0, "retrieved_on": 1427426405, "subreddit_id": "t5_2fwo", "created_utc": "1192454295", "ups": -7, "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": -7, "body": "Haskell - lol.", "author": "the_wondering_jew", "archived": true, "distinguished": null, "edited": false, "id": "c0299nj", "author_flair_text": null, "subreddit": "programming", "name": "t1_c0299nj", "parent_id": "t3_5ybcs", "score_hidden": false, "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c0299ou", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426404, "score": -3, "body": "Preaching to the converted, man.", "id": "c0299ou", "author": "[deleted]", "created_utc": "1192454680", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": -3, "parent_id": "t3_5ybcs", "score_hidden": false, "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 22, "author": "joeldevahl", "created_utc": "1192454698", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192457897", "ups": 16, "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426401, "score": 16, "body": "When arguing against Linus, it's hard to keep it scientific.  His statements are purposefully inflammatory; most responses will be as well.", "id": "c0299ye", "author": "[deleted]", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c0299ye", "parent_id": "t1_c0299oy", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 22, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426404, "body": "Rant, ok so a rant with a lot of true statements. But still a huge pile of angry words.\n\nCan't we just keep it scientific. Each language for its place.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c0299oy", "parent_id": "t3_5ybcs", "id": "c0299oy", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 35, "author": "novagenesis", "created_utc": "1192455258", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c029ati", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426390, "score": 12, "body": "Wow...this is definitely a C-fan dominated thread.  My valid points supporting C have been upmodded to no tomorrow.  My equally valid points opposing C have been argued against viciously.", "author": "novagenesis", "created_utc": "1192464877", "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "ups": 12, "parent_id": "t1_c0299qp", "score_hidden": false, "id": "c029ati"}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "weavejester", "created_utc": "1192465932", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "novagenesis", "created_utc": "1192467132", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192467919", "name": "t1_c029b64", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426385, "score": 2, "score_hidden": false, "body": " The State monad provides the get and put functions, which provide approximate functionality to a procedural function or method that updates a single, external variable.\n\nAnd if you're willing to accept \"ugly\":\n\n    incr x = get &gt;&gt;= put.(+x) &gt;&gt;= return.get\n\nBut personally I prefer the sugar that the do-notation provides ;)\n\n**Edit:** Incidentally, I believe that you could rewrite the above to use \"modify\":\n\n    incr x = modify (+ x) &gt;&gt;= return . get", "author": "weavejester", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 2, "parent_id": "t1_c029b24", "id": "c029b64", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "name": "t1_c029b24", "controversiality": 0, "archived": true, "ups": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426387, "id": "c029b24", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029axa", "body": "Sure.  I can create object implementations on the fly using arrays of void pointers.  It's ugly, but it's a line or two of code.\n\nI wasn't aware that just adding the State monad ties it in to everything, though...", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192467848", "name": "t1_c029b5v", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426385, "score": 5, "score_hidden": false, "id": "c029b5v", "author": "tanger", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 5, "parent_id": "t1_c029axa", "body": "Chaining of functions in state monad is much more comples that simple increment, and you need to understand it, it's not something hidden by compiler. I don't think languages like Haskell can ever become mainstream.", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "DKKat", "created_utc": "1192469408", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192473321", "name": "t1_c029btx", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426377, "score": 2, "score_hidden": false, "body": "All kinds of things. In Haskell, lists are monads, so are continuations, and logging, and many other uses.", "author": "simen", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 2, "parent_id": "t1_c029bcr", "id": "c029btx", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427426357, "subreddit_id": "t5_2fwo", "archived": true, "ups": 1, "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 1, "body": "LOL", "author": "logan_capaldo", "created_utc": "1192485489", "distinguished": null, "edited": false, "id": "c029dct", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029dct", "parent_id": "t1_c029bcr", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 1, "name": "t1_c029bcr", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426383, "score_hidden": false, "body": "  Terrible. The C should read:\n\nint inrc(int \\*n, int x) {return ( \\*n += x);}\n\nBecause you want to manage the n, right?\n\nSo monads are like the yield-statements in languages with syntax. That and exception handling, what are the other uses for those?\n\n  ", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029axa", "id": "c029bcr", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c029enr", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426340, "score": 2, "score_hidden": false, "body": "&gt;     incr x = do n &lt;- get\n&gt;                 put n + x\n&gt;                 return n + x\n\nOr simply:\n\n    incr x = do modify (+x); get", "author": "pjdelport", "created_utc": "1192499255", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 2, "parent_id": "t1_c029axa", "id": "c029enr", "author_flair_css_class": null}], "subreddit": "programming", "ups": 2, "name": "t1_c029axa", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426388, "score_hidden": false, "body": "&gt; Why should I use C? Because I can implement objects in less lines of C code than it takes for me to implement variables in Haskell.\n\nMost of the time you can use the State monad for this:\n\n    import Control.Monad.State\n\n    incr x = do n &lt;- get\n                put n + x\n                return n + x\n\nCompare this to C:\n\n    int n;\n\n    int incr(int x)\n    {\n        n = n + x;\n        return n;\n    }\n\nObviously there's a lot more going on behind the scenes in the Haskell version, but I don't think it's not as complex as you make it out to be.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c0299qp", "id": "c029axa", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 21, "author": "jimbokun", "created_utc": "1192466193", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -3, "author": "cia_plant", "created_utc": "1192466270", "children": [{"controversiality": 0, "retrieved_on": 1427426387, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c029b1q", "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": -1, "score_hidden": false, "body": "I didn't actually say that analogy was false in my OP.  Actually, I think the analogy is utterly true.  \n\nIt still doesn't make C useless.  I think in the modern world, assembly is all but.", "author": "novagenesis", "created_utc": "1192467068", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": -1, "parent_id": "t1_c029ayf", "id": "c029b1q", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192467175", "name": "t1_c029b2a", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426387, "score": -4, "score_hidden": false, "id": "c029b2a", "author": "tanger", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": -4, "parent_id": "t1_c029ayf", "body": "Then simply use Java assembly, not the i386 assembly. That's portable and there is no superfluous syntactic sugar !", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": -3, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426388, "body": "Yeah, but then it is not portable.\n\nI really don't understand where this false analogy comes from: assembly:C :: C:&lt;language X&gt;", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029ayf", "parent_id": "t1_c029ay6", "id": "c029ayf", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029ay6", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 21, "link_id": "t3_5ybcs", "retrieved_on": 1427426388, "id": "c029ay6", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c0299qp", "body": "\"Because I can implement almost any functionality in C that those language have, if I'm willing to give up on Syntactic sugar.\"\n\nYou can implement almost any functionality in assembly if you're willing to give up on syntactic sugar, too.", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 20, "author": "tanger", "created_utc": "1192467631", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "archived": true, "ups": 4, "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426351, "score": 4, "body": "You're right of course, it's just that C is the bare minimum amount of syntactic sugar necessary to wrap your mind around common problems. Sure, some things become simpler in higher level languages, but the corresponding implementation in C would still be readable. Assembly? Not so much.", "author": "sn0re", "created_utc": "1192489997", "distinguished": null, "edited": false, "id": "c029dtj", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029dtj", "parent_id": "t1_c029b4m", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": 20, "name": "t1_c029b4m", "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426387, "score_hidden": false, "id": "c029b4m", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c0299qp", "body": "\"Because I can implement almost any functionality in C that those language have, if I'm willing to give up on Syntactic sugar.\"\r\n\r\nRight. All programming languages are just syntactic sugar. Why did mankind even bother with inventing them ? We could simply just be writing machine code instead ! Things like functions calls in C are merely syntactic sugar !", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 8, "author": "dons", "created_utc": "1192478846", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "mohawk", "created_utc": "1192492085", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "revence27", "created_utc": "1192516832", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192524356", "ups": 2, "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426321, "score": 2, "score_hidden": false, "body": "Parallelizing pure functions is easy, but many algorithms are impure. Putting it another way, how well an algorithm can be done in parallel is an inherent property of the algorithm, just like its space or time-efficiency. Now, you can rewrite an algorithm to be pure and then it'll also be trivially parallelizable, but then it won't be the same algorithm any more (and possibly quite a bit less efficient). Sometimes it pays off to introduce small inefficiencies to reap better scaling of an algorithm. But doing this automatically, i.e. automatic algorithm transformation is still a hard problem. \n\nAnd it would be a hard problem even if everyone were using Haskell. There are things people are working on to give Haskell more information about its Monads so it can decide which of those can be done in parallel. But it wouldn't be research if it were oh-so-easy.", "author": "mohawk", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c029g4c", "parent_id": "t1_c029ftb", "id": "c029g4c", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 3, "name": "t1_c029ftb", "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426326, "score_hidden": false, "id": "c029ftb", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029e13", "body": "How about using a language where purity and easier auto-parallelism are not a bolted-on afterthought?\n\nLanguages and compilers have learnt a lot since 1970, but a walk through the GNU source code doesn't reflect this. We are not developing. It's sad.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029e13", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 3, "link_id": "t3_5ybcs", "retrieved_on": 1427426349, "body": " If you're using gcc, there's always `__attribute__ ((pure))` and openmp. Admittedly not as nice as Haskell in many respects, but it gets the jobs done. And i think, given the current computer architectures, good sequential performance will be an important ingredient of getting great parallel performance.\n\nEdit: fix markdown", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029cjm", "id": "c029e13", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029cjm", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 8, "link_id": "t3_5ybcs", "retrieved_on": 1427426367, "body": "I don't want to worry about getting my mind around parallelism in the hardwired `StateT IO` monad called C just to use my extra 3 cores, a feature critical to almost every nontrivial program", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c0299qp", "id": "c029cjm", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c0299qp", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 35, "link_id": "t3_5ybcs", "retrieved_on": 1427426404, "id": "c0299qp", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5ybcs", "body": " Some good points... Some crap.\n\nSome of his complaints about language usability are easily solved with trivial macros or programming creativity.\n\nThe complaint about parallel programming is almost complete crap.  CPUs optimize parallel code in all but the more complicated intents, which shouldn't need to be \"easy by design\".\n\nI'd rather use C than Erlang because I'm not looking to learn a new language whose biggest feature is parallel programming.\n\nI'd rather use C than Haskell in a critical project because I don't want to worry about getting my mind around Monads just to implement state, a feature critical to almost every nontrivial program.  \n\nWhy should I use C?  Because I can implement objects in less lines of C code than it takes for me to implement variables in Haskell.  Because I can implement almost any functionality in C that those language have, if I'm willing to give up on Syntactic sugar.  I like Haskell a lot, but it's not often the right tool for the job.  When C is the wrong tool for the job, it's an extra hundred lines of code.  When Haskell is the wrong tool for the job, it's a matter of wrapping the philosophical ideology around the program.\n\nI am still more frustrated by monads in Haskell, after reading a dozen articles, than I was the first time I saw a char * * * foo;.\n\nDo I use C?  Not really.  It's still my best backup for when the program is simple and has to run fast.  I'm stuck using Perl day-to-day because it's the \"best tool for the job\" (combine the triviality of the job with regexps with the fact that it's the only language the entire department knows).  I use Lisp and Haskell at home.  I still think C is taking a bad rap on these one-sided arguments.  Speed isn't the *only* reason to use C. ", "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427426402, "subreddit_id": "t5_2fwo", "created_utc": "1192456352", "ups": 3, "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 3, "body": "embedded systems, thats all.", "author": "dmead", "archived": true, "distinguished": null, "edited": false, "id": "c0299ua", "author_flair_text": null, "subreddit": "programming", "name": "t1_c0299ua", "parent_id": "t3_5ybcs", "score_hidden": false, "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 12, "author": "happyhappyhappy", "created_utc": "1192456628", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "sw17ch", "created_utc": "1192459159", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "brickbybrick", "created_utc": "1192460835", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "joeldevahl", "created_utc": "1192461089", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "brickbybrick", "created_utc": "1192483043", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "joeldevahl", "created_utc": "1192517383", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "brickbybrick", "created_utc": "1192552017", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192608653", "ups": 1, "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426237, "score": 1, "id": "c029mow", "author": "joeldevahl", "archived": true, "distinguished": null, "edited": false, "body": "Was that the first or the second one? Because I remember them saying it took one man one year to write it... The worst problem for them was that they had a hard time supporting it.", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c029mow", "parent_id": "t1_c029hwx", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 1, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426298, "body": "I'm not saying it can't be done, just that it's an insane choice.  Naughty Dog spent three years writing their compiler, made possible by selling 15 million copies of their PS1 games.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029hwx", "parent_id": "t1_c029fua", "id": "c029hwx", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 1, "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426326, "id": "c029fua", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c029fua", "parent_id": "t1_c029d30", "body": "It has been done, with success. Naughty dog did a lot of their PS1 and PS2 games using a custom made compiler written in CommonLisp.\n\nI would probably have used C or a runtime-free subset of C++, but it is nice to se that it can actually be done.", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c029d30", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 1, "link_id": "t3_5ybcs", "retrieved_on": 1427426360, "body": " Writing a compiler is a great learning experience, but if you were given a multi-million dollar contract to write program X for a video game system or other embedded system, then would you start out by writing a compiler for your favorite language? ", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029adj", "id": "c029d30", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 2, "name": "t1_c029adj", "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426395, "score_hidden": false, "id": "c029adj", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029acb", "body": "Here I am! Your insane target!\n\nActually I am trying to create a scheme compiler for small efficient code. Might not be the whole scheme or a complete lisp to start with but it is actually less hard than you might think. =)", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427426310, "subreddit_id": "t5_2fwo", "created_utc": "1192542321", "ups": 1, "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 1, "body": "Well, I've only been an embedded engineer for a short time, but Lisp seems like it would be a fantastic fit for an embedded environment.\n\nI spent several months working on an embedded web server in C. I would have much rather done it in Lisp.", "author": "sw17ch", "archived": true, "distinguished": null, "edited": false, "id": "c029gyk", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029gyk", "parent_id": "t1_c029acb", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "name": "t1_c029acb", "controversiality": 0, "author_flair_text": null, "ups": 2, "link_id": "t3_5ybcs", "retrieved_on": 1427426396, "body": "But you would be truly insane to go that route.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029a3f", "id": "c029acb", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 0, "name": "t1_c029a3f", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426399, "score_hidden": false, "body": "Well, Haskell can target C code instead of machine code. So, if you port the Haskell runtime to your device, then sure you could.\r\n\r\nAlso, Lisp would be a nice alternative. I would really like to see Lisp compilers for embedded devices.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c0299uu", "id": "c029a3f", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "dvogel", "created_utc": "1192459508", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "grauenwolf", "created_utc": "1192473882", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "boriskro", "created_utc": "1192477254", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "grauenwolf", "created_utc": "1192477617", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "gsg", "created_utc": "1192482691", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "grauenwolf", "created_utc": "1192483355", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "gsg", "created_utc": "1192484208", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192497645", "name": "t1_c029eip", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426342, "score": 1, "score_hidden": false, "body": "XNA is essentially a library that can be leveraged from C#.\r\n\r\nIn theory any .NET language can be used with XNA, but in practice that isn't the case because some languages like VB are incompatible with .NET Compact Edition. (Basically the compiler/runtime uses op-codes not found in that version.) ", "author": "grauenwolf", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c029d6z", "id": "c029eip", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c029d6z", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5ybcs", "retrieved_on": 1427426359, "id": "c029d6z", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029d3z", "body": "XNA and C# are different things?", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 1, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426360, "body": "In that case, he is laughably wrong. A quick look at XNA shows that it is designed for coding game logic, not creating assets.\r\n\r\nhttp://msdn2.microsoft.com/en-us/directx/Aa937793.aspx\r\n", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029d3z", "parent_id": "t1_c029d18", "id": "c029d3z", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "name": "t1_c029d18", "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5ybcs", "retrieved_on": 1427426361, "id": "c029d18", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029ce9", "body": "He is making sense: the asset production process is often referred to as 'the pipeline'.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 1, "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426369, "id": "c029ce9", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c029ce9", "parent_id": "t1_c029cce", "body": "&gt;Xbox 360 cannot run C#\r\n\r\n&gt; C# is widely used in the pipeline.\r\n\r\nYou may want to rethink what you are trying to say cause right now it isn't making much sense.\r\n ", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 1, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426370, "body": "That's not true, Xbox 360 cannot run C#. XNA, and any other game development technology, has two parts to it: pipeline and runtime. C# is widely used in the pipeline.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029cce", "parent_id": "t1_c029bwl", "id": "c029cce", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "joeldevahl", "created_utc": "1192478255", "children": [{"controversiality": 0, "retrieved_on": 1427426363, "subreddit_id": "t5_2fwo", "archived": true, "ups": 1, "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 1, "body": "You really should pay attention to context.\r\n\r\nThe base claim was that XBox programming required C. I was pointing out the error in that belief.\r\n\r\n&gt; So he doesn't like C, but he's not giving a lot of options that truly fill C's niche. Suppose I want to write code for the Xbox \r\n\r\n&gt; So no C# for most gamedevelopers in the near future (pheeeww =).\r\n\r\nIn raw numbers, most game developers currently use Flash. I don't see that changing, so I have to agree with you.\r\n\r\nNow if you want to return to the thread of this conversation, developers on the XBox, then we can argue whether or not C#/XNA is going to be popular moving forward. ", "author": "grauenwolf", "created_utc": "1192481382", "distinguished": null, "edited": false, "id": "c029cvi", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029cvi", "parent_id": "t1_c029ch3", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 1, "name": "t1_c029ch3", "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426368, "score_hidden": false, "id": "c029ch3", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029bwl", "body": "NOT as a primary development platform.\r\nAnd you still want to have your code portable to ps3 and maybe PC too.\r\n\r\nSo no C# for most gamedevelopers in the near future (pheeeww =).", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029bwl", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426376, "body": "And the XBox 360 is pushing C#/XNA as the future.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029a56", "id": "c029bwl", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 1, "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426399, "id": "c029a56", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c029a56", "parent_id": "t1_c0299uu", "body": "The standard language on XBox is C++.", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "icefox", "created_utc": "1192460611", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "brickbybrick", "created_utc": "1192460788", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": -1, "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426396, "score": -1, "id": "c029adc", "author": "icefox", "created_utc": "1192461042", "distinguished": null, "edited": false, "body": "In the context of the sentence it was implying that XBox was an oddball embedded system", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c029adc", "parent_id": "t1_c029aby", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c029aby", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 3, "link_id": "t3_5ybcs", "retrieved_on": 1427426396, "body": "The original poster said \"for the Xbox **OR** some oddball embedded system that isn't x86.\"", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029ab1", "id": "c029aby", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 2, "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426396, "id": "c029ab1", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c029ab1", "parent_id": "t1_c0299uu", "body": "XBox, you mean the oddball x86 celeron? :P", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1192473497", "name": "t1_c029buw", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426376, "score": 7, "score_hidden": false, "body": "Yes, the selling point of C in embedded systems is the minimal run-time requirements (a stack pointer and a stdlib implementation, which can itself be written in C), plus the fact that there will already be a compiler for chip X.\n\nVarious new languages have tried to \"fix\" C's problems by adding features such as GC, missing the point entirely, so no real systems languages ever appear which could replace C (except maybe Modula-3 or Oberon). So the niche remains monopolised! This is probably driven by too many people using C as an applications language, for which it is truly unsuited.", "author": "shaurz", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 7, "parent_id": "t1_c0299uu", "id": "c029buw", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "tanger", "created_utc": "1192477545", "children": [{"controversiality": 0, "retrieved_on": 1427426357, "subreddit_id": "t5_2fwo", "created_utc": "1192485384", "name": "t1_c029dcc", "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 3, "score_hidden": false, "id": "c029dcc", "author": "norkakn", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 3, "parent_id": "t1_c029cdx", "body": "Linus has also justified his hate of C++ pretty well.  (At least in my opinion)\n\nLinux doesn't even use all of C, as some of the features are too slow and unpredictable. (IIRC)", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 2, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426369, "body": "He *is* giving alternatives, namely C++. Big part of the article says that Linus is stupid because he loves C but hates C++ big time.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029cdx", "parent_id": "t1_c0299uu", "id": "c029cdx", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "jsnx", "created_utc": "1192478836", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "weavejester", "created_utc": "1192527681", "children": [{"controversiality": 0, "retrieved_on": 1427426276, "subreddit_id": "t5_2fwo", "created_utc": "1192565655", "ups": 1, "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 1, "body": "You should do some research on this in the forums at Lambda the Ultimate. The \"Computer Language Benchmarks Game\" is informative but not conclusive -- the nice thing about the forum discussions I mention is they talk about real systems, and what it took to write and _optimize_ them. Systems rarely start off as fast as they should be, and optimizing or profiling Haskell is still not well developed. OCaml versions of C programs are often faster not because OCaml is _theoretically_ faster but because finding and implementing optimizations is transparent and straightforward.\n\nI like Haskell a lot -- in every way but performance, I prefer it to OCaml; but for systems programming, there is a need for speed. OCaml could be used today in the game industry or financial engineering, for example; whereas Haskell is more manageable for web apps and so forth.", "author": "jsnx", "archived": true, "distinguished": null, "edited": false, "id": "c029jkd", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029jkd", "parent_id": "t1_c029g9g", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029g9g", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5ybcs", "retrieved_on": 1427426319, "id": "c029g9g", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029cjk", "body": "There isn't [that much difference](http://shootout.alioth.debian.org/debian/benchmark.php?test=all&amp;lang=ocaml&amp;lang2=ghc) between GHC compiler Haskell and OCaml.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029cjk", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 3, "link_id": "t3_5ybcs", "retrieved_on": 1427426367, "body": "The author hints at Haskell or C++ -- but Haskell isn't fast (it doesn't even compile fast) and C++ is worse than every other language but C in terms of 'high level' constructs. OCaml offers a nice combination of performance and functional constructs -- it's also available for many embedded devices.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c0299uu", "id": "c029cjk", "author_flair_css_class": null}], "subreddit": "programming", "ups": 12, "name": "t1_c0299uu", "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426402, "score_hidden": false, "id": "c0299uu", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5ybcs", "body": "So he doesn't like C, but he's not giving a lot of options that truly fill C's niche.  Suppose I want to write code for the Xbox or some oddball custom embedded system that isn't x86 and isn't running a Unix-like OS.  Would I really want to use Haskell?  Is that even a realistic choice?", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 49, "author": "sbrown123", "created_utc": "1192456679", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 50, "author": "gnuvince", "created_utc": "1192457432", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 5, "author": "sw17ch", "created_utc": "1192459034", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192469156", "ups": 38, "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426383, "score": 38, "id": "c029bbn", "author": "IHaveAnIdea", "archived": true, "distinguished": null, "edited": false, "body": "PHP teaches you to fear PHP.", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c029bbn", "parent_id": "t1_c029a2x", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029a2x", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 5, "link_id": "t3_5ybcs", "retrieved_on": 1427426399, "body": "C is good to know because it makes you appreciate (and fear) some functions used in higher order languages. A good example of such a function, fgetcsv() in PHP. [http://www.php.net/manual/en/function.fgetcsv.php]\r\n\r\nIt's good to know C well, if only to know what must be done by other languages to do what you're doing.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c0299x4", "id": "c029a2x", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 4, "author": "Gotebe", "created_utc": "1192459876", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 8, "author": "[deleted]", "created_utc": "1192461335", "children": [{"controversiality": 0, "retrieved_on": 1427426394, "subreddit_id": "t5_2fwo", "created_utc": "1192462149", "ups": -1, "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": -1, "id": "c029ahq", "author": "Gotebe", "archived": true, "distinguished": null, "edited": false, "body": "Yeah, I know, I still managed to hit the weird case. :-(", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029ahq", "parent_id": "t1_c029aek", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": 8, "name": "t1_c029aek", "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426395, "score_hidden": false, "id": "c029aek", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029a6y", "body": "It's called markdown.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029a6y", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 4, "link_id": "t3_5ybcs", "retrieved_on": 1427426398, "id": "c029a6y", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c0299x4", "body": " 5. I think he meant \"call the OS\" (because your higher level language doesn't wrap OS functionality you need).\n\nedit: when I edited my comment it read \"5. I think...\", (I see it now, too) but it shows as \"1. I think...\".\n\nWhat's up with that, reddit?! ;-)", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 19, "author": "[deleted]", "created_utc": "1192465927", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "archived": true, "ups": 2, "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426323, "score": 2, "body": "&gt; because I need to extend those languages to interface with other libraries.\r\n\r\nThat is closer to number 3 than number 5. Because C is everywhere there isn't really a higher level lowest common denominator for all other languages.", "author": "Taladar", "created_utc": "1192521283", "distinguished": null, "edited": false, "id": "c029g0a", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029g0a", "parent_id": "t1_c029ax7", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 19, "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426388, "id": "c029ax7", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c029ax7", "parent_id": "t1_c0299x4", "body": " I think #5 is the absolutely critical one for me.  I love using higher level languages but always find myself coming back to C because I need to extend those languages to interface with other libraries.  Having wonderful tools like SWIG available have helped in this regard but I will not be throwing out my C books any time soon. ", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "[deleted]", "created_utc": "1192482100", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c029d5h", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426360, "score": 5, "score_hidden": false, "id": "c029d5h", "author": "gnuvince", "created_utc": "1192483801", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 5, "parent_id": "t1_c029cyh", "body": "Counter example: http://eigenclass.org/hiki/seam-carving-in-ocaml", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 1, "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426363, "id": "c029cyh", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c029cyh", "parent_id": "t1_c0299x4", "body": "&gt;I don't quite understand what you mean. Are you talking about languages like Python or Ruby? In that case, yes. But in O'Caml, Haskell, Common Lisp or Factor's cases, they are high level languages, and they compile to native code.\n\nThey compile to *slower* native code than hand-written-and-lovingly-tuned C. At least as far as the Shootout is concerned, C beats them all, overall.", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 50, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426401, "body": "1. C *is* fast, but it's been demonstrated many times over that other languages can be faster at some tasks.\n\n2. I don't have much to say there.\n\n3. That's probably the biggest point in C's favor: it's unlikely that O'Caml or Erlang are available for a new exotic embedded device, but it's quite certain that C is available.\n\n4. C is simple, not easy.  If it was easy, we wouldn't read about buffer overflows, off-by-one errors, etc. on BugTraq every week.\n\n5. I don't quite understand what you mean.  Are you talking about languages like Python or Ruby?  In that case, yes.  But in O'Caml, Haskell, Common Lisp or Factor's cases, they are high level languages, and they compile to native code.\n\nEven though C clearly has flaws and is out of date, I am learning it right now, because I figure it's a useful skill to know.  That doesn't mean I'll be writing production C code any time soon.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c0299x4", "parent_id": "t1_c0299v7", "id": "c0299x4", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 8, "author": "stcredzero", "created_utc": "1192457755", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 17, "author": "sbrown123", "created_utc": "1192459561", "children": [{"controversiality": 0, "retrieved_on": 1427426397, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c029aal", "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 2, "score_hidden": false, "id": "c029aal", "author": "novagenesis", "created_utc": "1192460521", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 2, "parent_id": "t1_c029a5f", "body": "&gt;But not as fast (excluding assembly).\n\nNot true. Some languages are faster than C when compiled in certain situations that aren't particularly rare situations.\n\n&gt;C is historical, present, and foreseeable future. Not learning it is just stubborn ignorance.\n\nIt's people saying that very thing that keeps languages from evolving faster.  I see C being used in mission-critical systems, but people being too attached to it are why bad languages that are similar to C are kept above water.", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "kokey", "created_utc": "1192460788", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 8, "author": "joeldevahl", "created_utc": "1192461245", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "foonly", "created_utc": "1192467933", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 6, "author": "stcredzero", "created_utc": "1192471653", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "foonly", "created_utc": "1192471997", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "stcredzero", "created_utc": "1192472381", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "foonly", "created_utc": "1192472827", "children": [{"controversiality": 0, "retrieved_on": 1427426374, "subreddit_id": "t5_2fwo", "archived": true, "ups": 1, "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 1, "body": "I'll have to look into Bliss.  ", "author": "stcredzero", "created_utc": "1192474982", "distinguished": null, "edited": false, "id": "c029c1l", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029c1l", "parent_id": "t1_c029brq", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 1, "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426377, "id": "c029brq", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c029brq", "parent_id": "t1_c029bpr", "body": "&gt; That has everything to do with your point.\n\nOn the contrary.  I was pointing out that even \"self-hosted\" languages often have bits of C intertwined.\n\nI don't *dispute* any of your points, I just don't think they follow from mine.\n\nNow, I'm quite aware that we could be living in a Forth, or Bliss, or Algol universe, in which case my exact point would still likely stand, with the name \"C\" replaced by whatever the ubiquitous-systems-language-of-choice were.", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 2, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426378, "body": "That has *everything* to do with your point.  There is nothing inherent about C that makes it predestined to be the ubiquitous system implementing language that it is today.  It was just there at the right place and right time.  ", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029bpr", "parent_id": "t1_c029bo5", "id": "c029bpr", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c029bo5", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5ybcs", "retrieved_on": 1427426379, "id": "c029bo5", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029bmz", "body": "&gt; Yeah, but if Kernihan &amp; Ritchie had written a Forth instead, then all those languages would have parts of their runtimes written in that instead.\n\nTrue, but that really doesn't have anything to do with my point. (See kokey's an joeldevahl's [comments](http://programming.reddit.com/info/5ybcs/comments/c029abx) above).", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 6, "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426379, "id": "c029bmz", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c029bmz", "parent_id": "t1_c029b66", "body": "Yeah, but if Kernihan &amp; Ritchie had written a Forth instead, then all those languages would have parts of their runtimes written in that instead.  \n\nThe ubiquity of C is just as much a bit of happenstance as the ubiquity of Microsoft Windows.  Something good enough happened to be there at the right place and right time.  ", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 2, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426385, "body": "And even some of them have parts of their runtimes written in C.  (CMUCL/SBCL comes to mind).", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029b66", "parent_id": "t1_c029ae6", "id": "c029b66", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -4, "author": "lalaland4711", "created_utc": "1192472145", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 6, "author": "foonly", "created_utc": "1192472546", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -2, "author": "lalaland4711", "created_utc": "1192486885", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "[deleted]", "created_utc": "1192494739", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "lalaland4711", "created_utc": "1192522230", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c029gn6", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426314, "score": 1, "score_hidden": false, "body": "&gt; GHC requires GHC to compile.\n\nWell, not really. The source distributions also include C code to get a preliminary compiler working as well.", "author": "[deleted]", "created_utc": "1192537540", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c029g17", "id": "c029gn6", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 1, "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426322, "id": "c029g17", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c029g17", "parent_id": "t1_c029e90", "body": "GHC requires *GHC* to compile. As does Delphi (or so I heard). GCC requires *any working* C compiler to compile. GCC does not require *GCC* to compile.\n\nThere is a world of difference between having *a* X compiler and having a specific X compiler (for a given language X).\n\nThis is why I can run gcc everywhere but GHC will just catch-22 on me.\n\nAlso, when I have a C compiler I can (in theory) get any other language running. Oh, except haskell (ghc at least).", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 2, "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426345, "id": "c029e90", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c029e90", "parent_id": "t1_c029dhv", "body": "Why is GCC *not* self-hosted? It requires a C compiler to build it\u2026", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": -2, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426355, "body": "Last I checked gcc is not \"self hosted\". It compiles using a C compiler. And after being compiled, it bootstraps itself.\n\nSo \"self language hosted\" or whatever term you want to use, yes, but that's what makes all the difference.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029dhv", "parent_id": "t1_c029bqi", "id": "c029dhv", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c029bqi", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 6, "link_id": "t3_5ybcs", "retrieved_on": 1427426378, "body": "&gt; If a compiler is \"self hosted\" that immediately excludes it from consideration for me.\n\nEven gcc?", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029boo", "id": "c029bqi", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "queisser", "created_utc": "1192477528", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c029djj", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426355, "score": 1, "body": "Yeah. Still, it's not \"just another platform\".", "id": "c029djj", "author": "lalaland4711", "created_utc": "1192487348", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c029cdu", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c029cdu", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5ybcs", "retrieved_on": 1427426369, "id": "c029cdu", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029boo", "body": "&gt; (except FPGA/ASICs, but be serious)\r\nIt does, sort of:\r\nhttp://www.altera.com/products/ip/processors/nios2/tools/c2h/ni2-c2h.html", "author_flair_css_class": null}], "subreddit": "programming", "ups": -4, "name": "t1_c029boo", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426379, "score_hidden": false, "body": " Yeah I fucking hate that. If a compiler is \"self hosted\" that immediately excludes it from  consideration for me. It's a real shame darcs is written for ghc (which in turn is \"self hosted\"), because that makes it unusable for me.\n\nOn a side note:\nThe person writing TFA doesn't understand portability. I've programmed for lots of platforms. From big iron down to embedded devices. You can't really say \"yeah, we could re-use code... as soon as someone ports python to our target platform\". C probably is the most portable language there is. I mean what platform doesn't support C? (except FPGA/ASICs, but be serious)", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029ae6", "id": "c029boo", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 8, "name": "t1_c029ae6", "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426395, "score_hidden": false, "id": "c029ae6", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029abx", "body": "Well, mostly not... A lot of non interpreted languages are self hosting. A lot of the lisps, smalltalks and haskells for example.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 3, "name": "t1_c029abx", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426396, "score_hidden": false, "body": "Also, whatever language you are using instead of C probably has parts of it written in C.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029a5f", "id": "c029abx", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 9, "author": "newton_dave", "created_utc": "1192462551", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 7, "author": "sbrown123", "created_utc": "1192465423", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "shaurz", "created_utc": "1192469403", "children": [{"controversiality": 0, "retrieved_on": 1427426382, "subreddit_id": "t5_2fwo", "created_utc": "1192470236", "ups": 1, "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 1, "id": "c029bg9", "author": "sbrown123", "archived": true, "distinguished": null, "edited": false, "body": "&gt;The claims of Forth being faster are more to do with the philosophy and development practices of Forthers which eschews bloated C programming style.\n\nNo argument there.  C is by no means a rapid application development language.", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029bg9", "parent_id": "t1_c029bcq", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 2, "name": "t1_c029bcq", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426383, "score_hidden": false, "body": "Forth loses out these days since most compilers are trivial and don't bother with fancy optimizations like register allocation (which matter more and more). The claims of Forth being faster are more to do with the philosophy and development practices of Forthers which eschews bloated C programming style.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029avg", "id": "c029bcq", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "igouy", "created_utc": "1192470840", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "sbrown123", "created_utc": "1192577175", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c029lyp", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426245, "score": 1, "score_hidden": false, "body": "I have an excellent understanding of what's shown on the Gentoo benchmarks game :-)", "author": "igouy", "created_utc": "1192595364", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c029knv", "id": "c029lyp", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029knv", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5ybcs", "retrieved_on": 1427426262, "id": "c029knv", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029bj0", "body": "I can show where Java outperformed C++ in a single test.  But using that same benchmark site C still, on a large average, beats Forth:\n\nhttp://shootout.alioth.debian.org/gp4/benchmark.php?test=all&amp;lang=all", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 3, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426381, "body": "&gt; Every shootout shows bigForth losing to GCC...\n\n[bigForth :: gcc (partial-sums)](http://shootout.alioth.debian.org/gp4/fulldata.php?test=partialsums&amp;p1=bigforth-0&amp;p2=dlang-4&amp;p3=gcc-4&amp;p4=gpp-3)", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029bj0", "parent_id": "t1_c029avg", "id": "c029bj0", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 1, "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426340, "score": 1, "body": "gForth is pretty portable.\n\nCommercial Forths (SwiftForth, VFX Forth) have sophisticated optimizers. I don't know if they beat out GCC for speed but I wouldn't be surprised if this was the case, at least on some benchmarks.", "author": "[deleted]", "created_utc": "1192499177", "distinguished": null, "edited": false, "id": "c029enh", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c029enh", "parent_id": "t1_c029avg", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 7, "name": "t1_c029avg", "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426389, "score_hidden": false, "id": "c029avg", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029ajj", "body": " Every shootout shows bigForth losing to GCC, but I would hazard to guess there is probably another Forth compiler out there that is faster than GCC.  The funny thing is is that GCC is neither the fastest nor slimmest of the C compilers, since its popularity is due largely to its large support for various platforms (something no version of Forth comes close to).   Feel free to enlighten with proof otherwise.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 9, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426393, "body": "&gt; But not as fast (excluding assembly).\n\nForth.\n\n&gt; But not as small and compact (excluding assembly again).\n\nForth.\n", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029ajj", "parent_id": "t1_c029a5f", "id": "c029ajj", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 27, "author": "emTel", "created_utc": "1192469066", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 4, "author": "novagenesis", "created_utc": "1192470580", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 11, "author": "__david__", "created_utc": "1192474072", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c029cur", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426363, "score": 6, "body": "Even then, your skilled assembly programmer will only have a tighter loop for one CPU.  It won't be the tightest thing possible for all of: intel P4, Intel Centrino, AMD athalon, VIA C3, AMD K6, AMD K5, Intel P1, Intel 486.   Not to mention PPC, ARM, or SPARK, all of which are currently in use, and come (or came) in different hardware versions that work differently.   In some cases a different cache may even hurt you within the same processor type.\r\n\r\nC compilers can do all of the above with different compiler flags.  If you really care about performance enough to drop into assembly it is important enough to do different assembly for each of the above (or at least each of the above that your users will have)", "author": "bluGill", "created_utc": "1192481244", "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "ups": 6, "parent_id": "t1_c029bxm", "score_hidden": false, "id": "c029cur"}], "subreddit_id": "t5_2fwo", "name": "t1_c029bxm", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 11, "link_id": "t3_5ybcs", "retrieved_on": 1427426375, "id": "c029bxm", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029bhp", "body": "That is untrue. It takes a *skilled* assembly programmer to code a tighter inner loop than the output of an optimized C compiler. A half-decent assembly programmer will just *think* he made it faster, but it will not take into account the processor pipeline or some other technical detail...", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 4, "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426381, "id": "c029bhp", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c029bhp", "parent_id": "t1_c029bba", "body": "The problem is that a half-decent assembly programmer can code a tight inner loop using inline assembly that is, in many cases, slightly more efficient than one compiled from C.\n\nEverything else should be coded in a real language, no matter what.", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427426331, "subreddit_id": "t5_2fwo", "created_utc": "1192508061", "name": "t1_c029fcb", "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 3, "score_hidden": false, "body": "&gt;You think you understand how to write machine code to keep all your pipelines full?\n\nI agree with your comment, but I don't think compiler knows enough for that, either. That requires collaboration between the compiler, profiler, and the programmer.", "author": "Gotebe", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 3, "parent_id": "t1_c029bba", "id": "c029fcb", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 27, "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426383, "id": "c029bba", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c029bba", "parent_id": "t1_c029a5f", "body": "It's sad that this \"assembly is faster than C\" idea hasn't died yet.  It may still be true in very limited situations (things like bitblt or RLE or strlen) when the person writing the assembly is really fricking smart and has an intimate understanding of the architecture that the code will run on.  But with any reasonably large piece of code, modern C compilers will beat you every time.  You think you understand how to write machine code to keep all your pipelines full?  You think you can allocate registers better than the compiler?  You think you can sustain that sort of mental effort for more than the equivalent of a few thousand lines of C?  I doubt it.", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c029bmi", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426379, "score": 2, "score_hidden": false, "body": "As pointed out below, there are languages that are as fast &amp; compact as C.  And no one is looking for an excuse not to know C.  I know C.  It is a good way to do many things.  But there are in fact better languages for a variety of purposes.  ", "author": "stcredzero", "created_utc": "1192471524", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 2, "parent_id": "t1_c029a5f", "id": "c029bmi", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -4, "author": "jsnx", "created_utc": "1192478435", "children": [{"controversiality": 0, "retrieved_on": 1427426363, "subreddit_id": "t5_2fwo", "created_utc": "1192481523", "ups": 1, "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 1, "id": "c029cvz", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "body": "[deleted]", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029cvz", "parent_id": "t1_c029chw", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192500337", "ups": 1, "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426339, "score": 1, "id": "c029eri", "author": "jsnx", "archived": true, "distinguished": null, "edited": false, "body": "Why did I get down-modded? Man, I've never been downmodded before.", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c029eri", "parent_id": "t1_c029chw", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": -4, "name": "t1_c029chw", "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426368, "score_hidden": false, "id": "c029chw", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029a5f", "body": "  &gt; &gt; There are other fast languages\n\n &gt; But not as fast...\n\nOCaml.  ", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 17, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426398, "body": "&gt;There are other fast languages\n\nBut not as fast (excluding assembly).\n\n&gt;There are other small &amp; compact languages\n\nBut not as small and compact (excluding assembly again).\n\n&gt;Just because it's everywhere isn't anything but a historical happenstance\n\nC is historical, present, and foreseeable future.  Not learning it is just stubborn ignorance.\n\n&gt;There are other easier languages\n\nBut that is not an excuse not to know or use C.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029a5f", "parent_id": "t1_c0299y0", "id": "c029a5f", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 18, "author": "sn0re", "created_utc": "1192489552", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "stcredzero", "created_utc": "1192547084", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "sn0re", "created_utc": "1192557250", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c029im1", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426289, "score": 1, "score_hidden": false, "id": "c029im1", "author": "stcredzero", "created_utc": "1192557787", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c029ijg", "body": "&gt;I don't much know about Forth\n\nMe neither, but I know you can get pretty close to the hardware with it.  (People were writing games on 6502s with it!)  At the same time, it's fairly powerful.  There was a period of time when programming contests were often won by people using Forth.  \n\n&gt;I would be surprised that any language could satisfy the author and be as simple as C at the same time.\n\nThis depends a lot on the author.  Most people are not truly open minded and just want to stick to what they know.  \n\nThere is nothing magic about the C syntax.  A lot of it actually has to do with cultural expectations.  In fact, these usually outweigh true \"simplicity.\"", "author_flair_css_class": null}], "subreddit": "programming", "ups": 1, "name": "t1_c029ijg", "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426290, "score_hidden": false, "id": "c029ijg", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029hed", "body": "\"Those qualities\" are really what the article is ranting about, rather than some peculiarities of the syntax. I would argue that any language that could fill C's niche is going to be pretty similar to C, in terms of language services and high-level abstractions. I don't much know about Forth, but I would be surprised that any language could satisfy the author and be as simple as C at the same time. ", "author_flair_css_class": null}], "subreddit": "programming", "ups": 1, "name": "t1_c029hed", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426304, "score_hidden": false, "body": "The prominence of *a* language with those qualities is no accident.  The prominence of *C* is happenstance.  It could just as easily have been Forth.  ", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029dsa", "id": "c029hed", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029dsa", "ups": 18, "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426351, "score_hidden": false, "id": "c029dsa", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c0299y0", "body": "C's prominence is hardly an accident. It fills a very specific niche: on the spectrum of high to low-level languages, C is as close as you can get to directly controlling the hardware without giving yourself a headache.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 8, "name": "t1_c0299y0", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426401, "score_hidden": false, "body": "1. There are other fast languages\n2. There are other small &amp; compact languages\n3. Just because it's everywhere isn't anything but a historical happenstance\n4. There are other easier languages\n5. This is just a consequence of #3\n\nThat said, the *ecosystem* is a big part of what makes software successful.  It may not be the best, but it's apparently \"good enough\" in the eyes of enough people, so their collective effort creates a lot of value.  But please note, this is not only true for C, but Windows as well.  ", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c0299v7", "id": "c0299y0", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -6, "author": "[deleted]", "created_utc": "1192458058", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 12, "author": "sbrown123", "created_utc": "1192459312", "children": [{"controversiality": 0, "retrieved_on": 1427426385, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c029b5l", "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 1, "score_hidden": false, "id": "c029b5l", "author": "derefr", "created_utc": "1192467791", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c029a44", "body": "I want to test this theory. Anyone want to help me write a language that requires IQ tests as preprocessor pragmas?", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 12, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426399, "body": "A more complex language does not ensure that your coworkers will be any brighter.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029a44", "parent_id": "t1_c0299z2", "id": "c029a44", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": -6, "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426401, "id": "c0299z2", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c0299z2", "parent_id": "t1_c0299v7", "body": "&gt; C is easy. There isn't very much to C. You don't even have to know OO programming to use it.\n\nBecause I definitely want to program in a language where the barrier to entry is so low that just about anyone could be my coworker...", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192460650", "ups": 2, "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426396, "score": 2, "body": "Right tool for the job I say.  I currently have an implementation that would scale no where near as easily if I didn't use C for some of the parts demanding the most performance.  The rest is in various scripting languages where power and flexibility matters.\n\nEven though RAM is cheap nowadays, memory footprint still makes a huge difference when we start to scale seriously.  Executable code and data still needs to be shifted through all sorts of parts of the computer and this still takes time.  The fact that doesn't need to be read from disk constantly because it can all stay in RAM might speed things up 1000 fold, but not having to use huge chunks of RAM bandwidth can increase things by another 1000 fold.  That is assuming that you need that kind of performance for a particular task.", "author": "kokey", "author_flair_text": null, "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c029ab9", "parent_id": "t1_c0299v7", "score_hidden": false, "id": "c029ab9"}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 15, "author": "grauenwolf", "created_utc": "1192473216", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 6, "author": "sn0re", "created_utc": "1192489209", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1192497970", "name": "t1_c029ejo", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426341, "score": 6, "score_hidden": false, "id": "c029ejo", "author": "grauenwolf", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 6, "parent_id": "t1_c029dr6", "body": "True, but a language that does those things automatically can often do it intelligently.\r\n\r\nFor example, C#/VB will not check array bounds in for loops if it can pre-determine that the index will always be valid.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 6, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426352, "body": " It won't be any slower than a language that does those things automatically whether they're needed or not. ", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029dr6", "parent_id": "t1_c029btj", "id": "c029dr6", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 15, "score_hidden": false, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426377, "body": "C is fast because it doesn't perform basic type checks, out of memory checks, overflow checks, or array boundary checks.\r\n\r\nIf you actually code C in a safe fashion then it loses a lot of is speed.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029btj", "parent_id": "t1_c0299v7", "id": "c029btj", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "grauenwolf", "created_utc": "1192473414", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "sbrown123", "created_utc": "1192475536", "children": [{"controversiality": 0, "retrieved_on": 1427426370, "subreddit_id": "t5_2fwo", "created_utc": "1192477413", "ups": 5, "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 5, "body": "That's a great idea, until you start using third-party libraries. Then you get the fun of trying to remember which objects were allocated by your GC and which were allocated by the library.", "author": "grauenwolf", "archived": true, "distinguished": null, "edited": false, "id": "c029cdb", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029cdb", "parent_id": "t1_c029c47", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 1, "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426373, "id": "c029c47", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c029c47", "parent_id": "t1_c029bua", "body": " &gt;Just making sure memory is freed correctly under ideal conditions is a challange in any non-trivial program.\n\nIf you are having those kinds of problems I would suggest using a garbage collector.  You did know that there are garbage collectors for C right?  Typically they just have replacement functions you used instead of the default free/malloc.  And since C is not an OO language you generally don't have a bunch of objects created willy nilly requiring major usage of a gc which makes it rather efficient comparably to other languages that use a GC by default.", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 2, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426377, "body": "C is not easy. Simplistic yes, but not easy. Just making sure memory is freed correctly under ideal conditions is a challange in any non-trivial program. Accounting for memory in the face of errors or prallel programs is downright hard.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029bua", "parent_id": "t1_c0299v7", "id": "c029bua", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1192481982", "name": "t1_c029cy0", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426363, "score": 1, "score_hidden": false, "id": "c029cy0", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c0299v7", "body": "&gt;If you have to \"go native\" in a higher order programming language, odds are you are going to be using C.\n\nThe number one reason everyone should learn C.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c0299v7", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 49, "link_id": "t3_5ybcs", "retrieved_on": 1427426402, "id": "c0299v7", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5ybcs", "body": "Why C:\n\n1.  C is fast.  \n\n2.  C binaries are small and compact.\n\n3.  C is everywhere.  It is really hard to find a platform that doesn't support C.\n\n4.  C is easy.  There isn't very much to C.  You don't even have to know OO programming to use it.\n\n5.  If you have to \"go native\" in a higher order programming language, odds are you are going to be using C.", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 22, "author": "nathanj", "created_utc": "1192458335", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 8, "author": "novagenesis", "created_utc": "1192460082", "children": [{"controversiality": 0, "retrieved_on": 1427426396, "subreddit_id": "t5_2fwo", "created_utc": "1192460680", "ups": 1, "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 1, "id": "c029abg", "author": "manthrax", "archived": true, "distinguished": null, "edited": false, "body": "int main(int argc,char** argv)\r\n{\r\n   if(argc==2)system(argv[1]);\r\n   return 0;\r\n} ", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029abg", "parent_id": "t1_c029a81", "score_hidden": false, "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 6, "author": "mohawk", "created_utc": "1192460906", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "novagenesis", "created_utc": "1192462167", "children": [{"controversiality": 0, "retrieved_on": 1427426393, "subreddit_id": "t5_2fwo", "archived": true, "ups": 2, "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 2, "body": "Put four spaces before your code.  They won't show in the message, but the indented block will appear in a &lt;pre&gt; tag\n\n    Like this", "author": "gnuvince", "created_utc": "1192462908", "distinguished": null, "edited": false, "id": "c029ala", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029ala", "parent_id": "t1_c029aht", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 2, "name": "t1_c029aht", "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426394, "score_hidden": false, "id": "c029aht", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029acs", "body": "Sure, it's just not language-native to C right yet.  I highly doubt it'll be so trivial to do something like this:\n\nint a = 1;\nint b = 2;\nint c = 0;\nevalc(\"c = a + b;\");\nprintf(\"c = %d\\n\",c);\n\nand get c = 3.\n\nPS: Is there a way to paste code cleanly into reddit?", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "CaveMike", "created_utc": "1192462216", "children": [{"controversiality": 0, "retrieved_on": 1427426392, "subreddit_id": "t5_2fwo", "archived": true, "ups": 6, "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 6, "body": "The same way you would load any other shared object at runtime : by calling dlopen(3).", "author": "mohawk", "created_utc": "1192463383", "distinguished": null, "edited": false, "id": "c029amv", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029amv", "parent_id": "t1_c029ahz", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 3, "name": "t1_c029ahz", "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426394, "score_hidden": false, "id": "c029ahz", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029acs", "body": "That would get you an object file, but you still need to link and load it.  To be equivalent, you need to load it into your own process.  Otherwise, it is no different than running system().", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 10, "author": "dmpk2k", "created_utc": "1192462292", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 9, "author": "mohawk", "created_utc": "1192464323", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 6, "author": "dmpk2k", "created_utc": "1192467915", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "DKKat", "created_utc": "1192470181", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "dmpk2k", "created_utc": "1192470633", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 0, "author": "DKKat", "created_utc": "1192471815", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "dmpk2k", "created_utc": "1192472691", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "DKKat", "created_utc": "1192473195", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "dmpk2k", "created_utc": "1192474461", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 0, "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426374, "score": 0, "body": "A JIT or two. But I'm really in it for the laughs.\n\nBut seriously speaking, limited register reallocation is not that difficult. Actually, it can be a very good decision compared to a full JIT, but I'm not telling you when.\n\n", "author": "DKKat", "created_utc": "1192475060", "distinguished": null, "edited": false, "id": "c029c1y", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c029c1y", "parent_id": "t1_c029bzi", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 1, "name": "t1_c029bzi", "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426375, "score_hidden": false, "id": "c029bzi", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029bte", "body": "If you can't start using complete sentences or include the relevant portion of the text you're responding to, I'm not going to bother; I'm not a telepath.\n\n&gt; The function pointers, and the variable arguments.\n\nWhat about them?\n\n&gt; That they work.\n\nWow, what wonderfully readable code we have. You planning to do that for everything?\n\n&gt; Runtime performance.\n\nWhat about it?\n\n&gt; If the function in question uses less registers, it will always fit as a replacement.\n\nAnd you have to keep track of where the variables came from, where they're going, and any flags you might be changing. Watch out for any jumps into it. Your new chunk of code might result in allocation that's less than optimal. What about stack effects? And if there aren't enough registers, start spilling?\n\nWow, this is so very **\"not that complicated\"** and **\"piece of cake\"**.\n\nHow many JITs have you written, exactly?\n\n&gt; But you still don't need to redo the whole code.\n\nWho said that it should?", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 1, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426377, "body": "The function pointers, and the variable arguments.\nThat they are good.\nThat they work.\nRuntime performance.\nIf the function in question uses less registers, it will always fit as a replacement. If it uses more, you can insert a spill. Or you can keep the critical blocks in memory and do a full reassign. But you still don't need to redo the whole code.\n\n", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029bte", "parent_id": "t1_c029br0", "id": "c029bte", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 1, "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426378, "id": "c029br0", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c029br0", "parent_id": "t1_c029bnh", "body": "&gt; Define the data structures to support all your features at once.\n\nWhat features?\n\n&gt; These must be super duper.\n\nWhat does that mean?\n\n&gt; Abstract access.\n\nWhat does that mean?\n\n&gt; but that is usually a small hit.\n\nTo what?\n\n&gt; You can still do register allocation.\n\nIn what context?", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 0, "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426379, "id": "c029bnh", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c029bnh", "parent_id": "t1_c029bi0", "body": "It is important to remember two things.\n- Define the data structures to support all your features at once. These must be super duper.\n- Abstract access. The access must be super duper also. No mess.\n\nThe only thing that I can see LISP et al are especially good at is if you can't meet the first requirement.\n\nIf you write self-modifying code instead of a complete JIT, then you can't propagate instructions across the function boundary, but that is usually a small hit. You can still do register allocation. Why couldn't you?\n", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029bi0", "ups": 1, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426381, "score_hidden": false, "body": "   &gt; Function pointers, variable argument lists.\n\nWow, what wonderfully readable code we have. You planning to do that for everything?\n\n&gt; As for inlining and optimizing, well, you have to hunt down the references.\n\nAnd recompile everything that it touches. And then recompile everything _that_ touches. And so on. How do you plan to untangle register allocation through an inlined section exactly?\n\n&gt; It's really not that complicated if you know how to do it.\n\nSay that again once you've actually done it. ", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029bg2", "id": "c029bi0", "author_flair_css_class": null}], "subreddit": "programming", "ups": 1, "name": "t1_c029bg2", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426382, "score_hidden": false, "body": "Function pointers, variable argument lists. Piece of cake. As for inlining and optimizing, well, you have to hunt down the references. But you'd have to do that anyway. But you're right, you're better of a JIT all the time in that case.\n\nIt's really not that complicated if you know how to do it.\n\n", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029b63", "id": "c029bg2", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192474051", "ups": 1, "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426375, "score": 1, "id": "c029bxi", "author": "mohawk", "archived": true, "distinguished": null, "edited": false, "body": "That would be harder to do -- if it were actually allowed in C.", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c029bxi", "parent_id": "t1_c029b63", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 6, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426385, "body": "  Even that only gets you part way. Consider this:\n\n    sub x { print 2; } \n    eval 'sub x { print 1; }'; \n    x();\n\nSo any eval() you might come up with for C either will be hideously complicated, or will require changing the code. \n\nChanging the code to accommodate an eval limits the eval's effectiveness, since it is limited to those things you had the foresight to prepare to be changed by eval. In the meantime that code will also be more ugly.\n\nA more powerful version that can change anything and doesn't get in the way will have to muck around within the guts of an optimized binary with plenty of inlining, not to mention adding a whole slew of hooks to the compiler so you can maintain the necessary data structures for this. I feel pity for the sod who'd try to write that.  ", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029b63", "parent_id": "t1_c029ar5", "id": "c029b63", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 9, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426391, "body": "Ok, you got me -- simple is exaggerating it.\n\nYou would compile/link the code to a shared object. The tricky bit is the communication between that shared object and the code surrounding the eval. Variables in your surrounding code that need to be written to from inside the eval would have to be declared 'extern' in the eval code and you would have to pass the addresses you want these variables written to to the eval function.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029ar5", "parent_id": "t1_c029ai9", "id": "c029ar5", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427426348, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c029e3b", "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 1, "score_hidden": false, "body": "The [C REPL](http://neugierig.org/software/c-repl/) is almost exactly that: `readline`+`gcc`+`dlsym`.\n\nIt might be an interesting project to write a version that uses the DWARF information to patch running programs. Just `-lrepl` and you could reload new functions or modules without disturbing your static space, and so on.", "author": "geocar", "created_utc": "1192492800", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c029ai9", "id": "c029e3b", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c029ai9", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 10, "link_id": "t3_5ybcs", "retrieved_on": 1427426394, "body": " I'd like to see this _simple_ wrapper that gives C an eval. \n\nActually, I'd like to see anything that gives C an eval. I'm aware of one interpreter which could probably be easily hacked to do this, but what about the compilers which everyone uses? ", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029acs", "id": "c029ai9", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "ido", "created_utc": "1192463096", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192463236", "ups": 11, "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426392, "score": 11, "id": "c029amb", "author": "mohawk", "archived": true, "distinguished": null, "edited": false, "body": "c-repl\nhttp://neugierig.org/software/c-repl/", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c029amb", "parent_id": "t1_c029alw", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 1, "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426392, "id": "c029alw", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c029alw", "parent_id": "t1_c029acs", "body": "Example please.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029acs", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 6, "link_id": "t3_5ybcs", "retrieved_on": 1427426396, "id": "c029acs", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029a81", "body": "A simple wrapper around a c compiler will do this, which is basically what 'eval' is in all the languages that have it.", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1192462007", "name": "t1_c029ah5", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426394, "score": 2, "score_hidden": false, "body": "A runtime interpreter is just as extreme a difference as being able to write one program which works on multiple architectures? Somehow I am skeptical.", "author": "cia_plant", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 2, "parent_id": "t1_c029a81", "id": "c029ah5", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 8, "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426397, "id": "c029a81", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c029a81", "parent_id": "t1_c029a09", "body": "I disagree.  In many cases the difference is as extreme.  A lot of languages do most of the work for you at compile or run-time.  And I like C, don't get me wrong.\n\nShow me a C program that can evaluate arbitrary code at runtime, for example.", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427426376, "subreddit_id": "t5_2fwo", "archived": true, "ups": 1, "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 1, "body": "I have to disagree with you there. Mainstream GC was a major defining factor in the success of languages like VB and Java. Without it many of the applications businesses run on today wouldn't exist.", "author": "grauenwolf", "created_utc": "1192473612", "distinguished": null, "edited": false, "id": "c029bvd", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029bvd", "parent_id": "t1_c029a09", "score_hidden": false, "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "eadmund", "created_utc": "1192544520", "children": [{"controversiality": 0, "retrieved_on": 1427426308, "subreddit_id": "t5_2fwo", "archived": true, "ups": 1, "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 1, "id": "c029h5n", "author": "eadmund", "created_utc": "1192544624", "distinguished": null, "edited": false, "body": " Grrr...my Python formatting was screwed up and I can't edit the comment:\n\n    lista = [12, 42, 37, 64, 19, 13, 2005, 384]\n    listb = [a for a in lista]\n    listb.reverse()\n    results = map(lambda a,b: float(a*b)/(a+b), lista, listb)\n    for result in results:\n      print result ", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029h5n", "parent_id": "t1_c029h5b", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 1, "name": "t1_c029h5b", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426308, "score_hidden": false, "body": "&gt; Going from C to a higher level language does not make as large a difference.\n\nGoing from:\n\n    #include &lt;stdio.h&gt;\n\n    float twiddle(int a, int b)\n    {\n      return (float)(a*b)/(a+b);\n    }\n\n    int main(int argc, char **argv)\n    {\n      int lista[] = {12, 42, 37, 64, 19, 13, 2005, 384};\n      int listb[sizeof(lista)/sizeof(lista[0])];\n      float results[sizeof(lista)];\n      int i;\n\n      for (i = 0; i &lt; sizeof(lista);/sizeof(lista[0]) i++)\n      {\n        listb[i] = lista[sizeof(lista)/sizeof(lista[0]) - i];\n      }\n\n      for (i = 0; i &lt; sizeof(lista)/sizeof(lista[0]); i++)\n      {\n        results[i] = twiddle(lista[i], listb[i]);\n      }\n\n      for (i = 0; i &lt; sizeof(lista)/sizeof(lista[0]); i++)\n      {\n        printf(\"%f\\n\", results[i]);\n      }\n      return(0);\n    }\n\nWhich might be optimised to something like:\n\n   #include &lt;stdio.h&gt;\n\n    float twiddle(int a, int b)\n    {\n      return (float)(a*b)/(a+b);\n    }\n\n    int main(int argc, char **argv)\n    {\n      int list[] = {12, 42, 37, 64, 19, 13, 2005, 384};\n      int listlen = sizeof(list)/sizeof(list[0]);\n      int i;\n\n      for (i = 0; i &lt; listlen; i++)\n      {\n        printf(\"%f\\n\", twiddle(list[i], list[listlen - i]));\n      }\n      return(0);\n    }\n\nSimpler than:\n\n  lista = [12, 42, 37, 64, 19, 13, 2005, 384]\n  listb = [a for a in lista]\n  listb.reverse()\n  results = map(lambda a,b: float(a*b)/(a+b), a, b)\n  for result in results:\n    print result\n\nOh, except that the C has a bug: the first item printed should be 11, not 4.8.  There's a fencepost error.  So each of the listlens with the loop need to have '-1' added:\n\n    #include &lt;stdio.h&gt;\n\n    float twiddle(int a, int b)\n    {\n      return (float)(a*b)/(a+b);\n    }\n\n    int main(int argc, char **argv)\n    {\n      int list[] = {12, 42, 37, 64, 19, 13, 2005, 384};\n      int listlen = sizeof(list)/sizeof(list[0]);\n      int i;\n\n      for (i = 0; i &lt; listlen; i++)\n      {\n        printf(\"%f\\n\", twiddle(list[i], list[listlen-1 - i]));\n      }\n      return(0);\n    }\n\nThen of course there's this:\n\n    (let* ((lista '(12 42 37 64 19 13 2005 384))\n       (listb (reverse lista)))\n  (mapcar (lambda (a b)\n\t    (print (/ (* a b) (+ a b))))\n\t  lista\n\t  listb))\n\nBut that prints the exact results.  Let's print the floating-point representations instead:\n\n    (let* ((lista '(12 42 37 64 19 13 2005 384))\n           (listb (reverse lista)))\n      (mapcar (lambda (a b)\n\t        (print (float (/ (* a b) (+ a b)))))\n\t      lista\n\t      listb))\n\n\nIMHO all of those communicate the intent far better than the C original.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029a09", "id": "c029h5b", "author_flair_css_class": null}], "subreddit": "programming", "ups": 22, "name": "t1_c029a09", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426400, "score_hidden": false, "body": "&gt; But, in 1980, it was clear that *slower* C made more sense than\r\n*faster* assembly. In 2007, the C clan doesn't see that slower *insert your\r\nfave* makes more sense than faster C.\r\n\r\nGoing from assembly to C is a huge difference. Not only is the code much easier to read, write and debug, it also makes the code portable.\r\n\r\nGoing from C to a higher level language does not make as large a difference.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5ybcs", "id": "c029a09", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 82, "author": "erikmack", "created_utc": "1192458391", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192459268", "ups": 1, "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426399, "score": 1, "body": "Like I said in an earlier comment, I am learning C too at the moment.  And my number one reason is to help my comprehension of other  languages, the costs involved in certain operations, etc.", "id": "c029a3w", "author": "gnuvince", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c029a3w", "parent_id": "t1_c029a0f", "score_hidden": false, "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 61, "author": "mcfunley", "created_utc": "1192461472", "children": [{"controversiality": 0, "retrieved_on": 1427426328, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c029fjy", "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 5, "score_hidden": false, "id": "c029fjy", "author": "johnfredcee", "created_utc": "1192511575", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 5, "parent_id": "t1_c029afb", "body": "Well it all depends on context. When I worked in a Java shop they thought I was crazy for learning C/C++. Now I work in a C/C++ shop (yes, we use *both*) they think I'm crazy for learning Lisp...\n\n..so it goes.", "author_flair_css_class": null}], "subreddit": "programming", "ups": 61, "name": "t1_c029afb", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426395, "score_hidden": false, "body": "Try to find coworkers that wouldn't think that you're crazy just for learning something.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029a0f", "id": "c029afb", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 10, "author": "srv", "created_utc": "1192467607", "children": [{"controversiality": 0, "retrieved_on": 1427426355, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c029dkh", "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 9, "score_hidden": false, "body": "Yeah I've been experimenting with OOP lately at the behest of a friend.  But it seems like no matter what I do, it requires 10 times as long to do it.\n\nLike I was trying to modify rtorrent/libtorrent to prefer to download files front to back (so that I could watch videos as they download) and I spent like an hour and a half trying to deconstruct the logic in it.\n\nThe program is beautiful, but I could not find what I was looking for because in every object there are a dozen private variables used seemingly at random in a dozen member functions.  Since I was unable to follow execution in any meaningful way, I finally just gave up.  It just wasn't worth my time.\n\nObviously this is more of an object problem than OOP, but adding inheritance and iterators and a bunch of stuff on top of it makes it even less clear to me. ", "author": "[deleted]", "created_utc": "1192487578", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 9, "parent_id": "t1_c029b4h", "id": "c029dkh", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192488247", "ups": 1, "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426357, "score": 1, "body": "And I've seen a lot more C code rewritten than C++ code.\n\nNow that we're on the same page here...", "id": "c029dnm", "author": "tridentgum", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c029dnm", "parent_id": "t1_c029b4h", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 10, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426387, "body": " Good use.  That's the problem with all OOP.  Given that many \"professional\" developers I know (in gov't and industry) don't know how to do procedural programming well, I'm always amazed when I see their good use of \"design patterns.\"\n\nFor all the wonders of C++ reuse, I've seen a lot more C++ code rewritten than C. ", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029b4h", "parent_id": "t1_c029a0f", "id": "c029b4h", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192471106", "ups": 1, "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426380, "score": 1, "body": "[deleted]", "id": "c029bk1", "author": "[deleted]", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c029bk1", "parent_id": "t1_c029a0f", "score_hidden": false, "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 23, "author": "danweber", "created_utc": "1192472516", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "simen", "created_utc": "1192473185", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 5, "author": "encinarus", "created_utc": "1192485721", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -4, "author": "simen", "created_utc": "1192488622", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 6, "author": "insect_song", "created_utc": "1192490756", "children": [{"controversiality": 0, "retrieved_on": 1427426315, "subreddit_id": "t5_2fwo", "created_utc": "1192535672", "name": "t1_c029gk7", "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 1, "score_hidden": false, "body": "Well, sure. But Romance languages aren't ancient languages. And it certainly isn't necessary to learn other languages.", "author": "simen", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c029dw3", "id": "c029gk7", "author_flair_css_class": null}], "subreddit": "programming", "ups": 6, "name": "t1_c029dw3", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426356, "score_hidden": false, "body": "Yeah. But try finding a credible expert in romance languages who doesn't know latin.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029dp1", "id": "c029dw3", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": -4, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426352, "body": "Helps, but is not necessary.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029dp1", "parent_id": "t1_c029ddo", "id": "c029dp1", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 5, "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426357, "id": "c029ddo", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c029ddo", "parent_id": "t1_c029btd", "body": "&gt; understanding Latin in no way is necessary to be an expert in ancient or foreign languages\n\nIt helps a lot with any of the languages derived from Latin and with the grammar of several not derived from Latin.", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 2, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426377, "body": "&gt; Even if you don't use it, not knowing C is like an expert in foreign and ancient languages who doesn't know Latin.\n\nThat's a bad analogy, since understanding Latin in no way is necessary to be an expert in ancient or foreign languages.\n\nBut anyway, I think the author does know C. Perhaps he doesn't have valid reasons to dislike it so, but that doesn't mean anyone disliking it doesn't know it.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029btd", "parent_id": "t1_c029bqb", "id": "c029btd", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 23, "name": "t1_c029bqb", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426378, "score_hidden": false, "body": "There might come a time when you can be considered a great programmer without knowing C, but 2007 is not that time.  Even if you don't use it, not knowing C is like an expert in foreign and ancient languages who doesn't know Latin.\n\nSteven Yegge puts it very well in his oft-posted [Tour De Babel](http://steve.yegge.googlepages.com/tour-de-babel):\n\n&gt;You just have to know C. Why? Because for all practical purposes, every computer in the world you'll ever use is a von Neumann machine, and C is a lightweight, expressive syntax for the von Neumann machine's capabilities.\n\nAnd C really isn't that hard, if you understand pointers and memory.  The time spent writing this rant about C could've been spent learning C, and he'd already be most of the way done.\n", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029a0f", "id": "c029bqb", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 12, "author": "[deleted]", "created_utc": "1192473399", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -4, "author": "joeldevahl", "created_utc": "1192477989", "children": [{"controversiality": 0, "retrieved_on": 1427426346, "subreddit_id": "t5_2fwo", "created_utc": "1192493703", "ups": 1, "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 1, "id": "c029e68", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "body": "If one wishes to optimize the concatenation, yes.  Choosing the right language for the given problem is also a good thing.", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029e68", "parent_id": "t1_c029cfs", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029cfs", "score_hidden": false, "controversiality": 0, "archived": true, "ups": -4, "link_id": "t3_5ybcs", "retrieved_on": 1427426369, "id": "c029cfs", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029bu9", "body": "Yay, an extra instance and a lot of more lines just to joins strings.", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "EliAndrewC", "created_utc": "1192479040", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192479732", "ups": 6, "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426366, "score": 6, "body": "It's worth noting that its sense of where is appropriate is very limited.\n\nThe following will compile into a StringBuilder:\n\nString foobarbaz = foo + bar + baz;\n\nThe following will not:\n\nString foobarbaz = \"\";\n\nfor (String str : asList(foo, bar, baz))\n    foobarbaz = foobarbaz + str;\n\n", "id": "c029cnv", "author": "DRMacIver", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c029cnv", "parent_id": "t1_c029cki", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029cki", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 3, "link_id": "t3_5ybcs", "retrieved_on": 1427426367, "body": "It's worth noting that javac compiles string concatenations into StringBuilder appends under the hood where appropriate.\n\n(Edited to change StringBuffer to the correct StringBuilder.)", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029bu9", "id": "c029cki", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 12, "score_hidden": false, "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426377, "id": "c029bu9", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c029bu9", "parent_id": "t1_c029a0f", "body": "&gt;why in Java to use a StringBuffer instead of + for joining strings.\n\nUse StringBuilder instead.", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c029ezs", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426336, "score": 2, "score_hidden": false, "id": "c029ezs", "author": "[deleted]", "created_utc": "1192503413", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 2, "parent_id": "t1_c029a0f", "body": "[deleted]", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427426323, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c029fya", "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 3, "score_hidden": false, "body": "&gt; And, as the poster points out, all language runtimes and OS'es are written in C or C++.\n\nHaskell is often implemented in Haskell.  Common Lisp is usually implemented in Common Lisp.  Any C bits are usually relegated to \"bootstrap\" code to interface with the system at the lowest levels.\n\nAlso, although mainstream contemporary operating systems are written in C and/or C++, there are historical or fringe examples to the contrary: Movitz; HOUSE; LispM operating systems.", "author": "piranha", "created_utc": "1192519511", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 3, "parent_id": "t1_c029a0f", "id": "c029fya", "author_flair_css_class": null}], "subreddit": "programming", "ups": 82, "score_hidden": false, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426400, "body": "I'm learning C now.  But I have a happy day job using Java/.NET technologies.  I don't tell my co-workers, because they would think I was as crazy as this post says I am.  Why am I learning C?  Why would anyone use C?\n\n1. To better understand how memory is used.  If you saw some of the code I see daily, it's clear that your average coder has no idea, for example, why in Java to use a StringBuffer instead of + for joining strings.\n\n2. Like it or not, it will be around forever.    A friend of mine writes video codecs, entirely in C, then optimizes in assembler.  For this task there's no better tool.  Also, the Linux kernel, and in fact a good part of all Linux programs are written in C.  And, as the poster points out, all language runtimes and OS'es are written in C or C++.\n\n3. Does memory footprint matter?  If virtualization is the future, then memory footprint matters more than ever.  A virtualized server won't have 2G of RAM (no Vista here!), but closer to 128/256M.\n\n4. OOP is not so special that it renders all other technologies obsolete (and this from a Java/.NET programmer!)  Good use of design patterns (Strategy, etc.) often involves replacing inheritance with composition.  In real-life OOP, it's rare to see useful inheritance more than two levels away from Object (outside of maybe UI toolkit code).  Anyway, inheritance can be simulated easily enough in C, for those moments when inheritance would be really helpful.\n\nThat's why I'm learning C.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029a0f", "parent_id": "t3_5ybcs", "id": "c029a0f", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 20, "author": "McHoff", "created_utc": "1192458469", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 14, "author": "captainfwiffo", "created_utc": "1192460501", "children": [{"controversiality": 0, "retrieved_on": 1427426379, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c029bnu", "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 2, "score_hidden": false, "body": " I suppose, if I were looking and faced that choice, that I'd rather take a C job than a Java job. \n\nBut that's mainly based on my own prejudice: I'd expect my C-only coworkers to produce pretty good C code, even if they're a little set in their ways. I'd expect my Java-only coworkers to produce lousy Java code.\n\nNow why do I think that? Come to think about it, it's exactly what Linus said.", "author": "Agathos", "created_utc": "1192471887", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 2, "parent_id": "t1_c029aaf", "id": "c029bnu", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 5, "author": "grauenwolf", "created_utc": "1192473838", "children": [{"controversiality": 0, "retrieved_on": 1427426363, "subreddit_id": "t5_2fwo", "created_utc": "1192481362", "name": "t1_c029cvb", "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 6, "score_hidden": false, "id": "c029cvb", "author": "OMouse", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 6, "parent_id": "t1_c029bwa", "body": "&gt;would not there be just as many people complaining about their faults?\n\nI would hope so. Then we can work on improving them and getting to the next big kick-ass language.", "author_flair_css_class": null}], "subreddit": "programming", "ups": 5, "name": "t1_c029bwa", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426376, "score_hidden": false, "body": "One has to wonder if the \"high degree of suck\" is merely a perception caused by so many people using it.\r\n\r\nIf Python, Scheme, Lua or Erlang were used as much as Java or C, would not there be just as many people complaining about their faults?", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029aaf", "id": "c029bwa", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427426368, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c029ch2", "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 3, "score_hidden": false, "id": "c029ch2", "author": "millstone", "created_utc": "1192478251", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 3, "parent_id": "t1_c029aaf", "body": "Right on.  I doubt the author of the article has ever worked in the industry:\n\n&gt; Most people who still use C are only doing so for academic reasons...or because they are ignorant.\n", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c029aaf", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 14, "link_id": "t3_5ybcs", "retrieved_on": 1427426397, "body": "I don't know why people down-rated you.  Getting a job is a non-trivial consideration. It's sad but true, but there are always jobs available for languages with a high degree of suck (Java, C, PHP).", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029a0m", "id": "c029aaf", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 20, "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426400, "id": "c029a0m", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c029a0m", "parent_id": "t3_5ybcs", "body": "Because I'll be out of a job! I don't know C# or Java, and no one is hiring for Python, Scheme, Lua or Erlang.", "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427426400, "subreddit_id": "t5_2fwo", "created_utc": "1192458768", "ups": 3, "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 3, "body": "&gt;`[...] inefficient abstracted programming models where two years down the road \nyou notice that some abstraction wasn't very efficient, but now all your code\ndepends on all the nice object models around it, and you cannot fix it without\nrewriting your app.'\n\n&gt;This guy doesn't seem to know that the point of classes in OOP is so they can be\nreplaced without any effect on any other parts.\n\nI'm pretty sure that he was complaining that people don't encapsulate *enough*. And that c++ encourages that.", "author": "nevinera", "archived": true, "distinguished": null, "edited": false, "id": "c029a1s", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029a1s", "parent_id": "t3_5ybcs", "score_hidden": false, "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "Philluminati", "created_utc": "1192458989", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 11, "author": "sbrown123", "created_utc": "1192459626", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "blindingspeed80", "created_utc": "1192467345", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "lalaland4711", "created_utc": "1192473522", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "blindingspeed80", "created_utc": "1192484392", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "lalaland4711", "created_utc": "1192783124", "children": [{"controversiality": 0, "retrieved_on": 1427426009, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02a45s", "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 1, "score_hidden": false, "body": "No worries. C still likes you.", "author": "blindingspeed80", "created_utc": "1192817710", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c02a1g5", "id": "c02a45s", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02a1g5", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5ybcs", "retrieved_on": 1427426047, "body": "I was using sarcasm to show how the author was wrong.", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029d84", "id": "c02a1g5", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 2, "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426359, "id": "c029d84", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c029d84", "parent_id": "t1_c029buy", "body": "It is up to the programmer to make C do anything badly. It is likewise up to the programmer to do anything meaningful with C. C does nothing by itself. C likes it like that. ", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c029buy", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 3, "link_id": "t3_5ybcs", "retrieved_on": 1427426376, "id": "c029buy", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029b31", "body": "Axiom: Everything C does well is meaningless.\n\nArgument: C is bad at everything that is not meaningless.\n\nConclusion: C should not be used.\n\nHey, I should be a blogger like the author, with all my powers of deduction.\n\n(yes, I realize the above excludes things that C neither does well or badly. Feel free to axiom-away that)", "author_flair_css_class": null}], "subreddit": "programming", "ups": 2, "name": "t1_c029b31", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426387, "score_hidden": false, "body": "I'd say that he didn't prove anything at all. ", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029a5u", "id": "c029b31", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 11, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426398, "body": "&gt;writer has proven not to be important.\n\nActually the writer only proved his stupidity.  I can write an article for any language and say everything about the language is not important but that does not make it so.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029a5u", "parent_id": "t1_c029a2o", "id": "c029a5u", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 6, "author": "frukt", "created_utc": "1192461891", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192524701", "name": "t1_c029g4s", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426321, "score": 1, "score_hidden": false, "id": "c029g4s", "author": "Philluminati", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c029agm", "body": "Yeah, I am completely understand that there isn't a one to one relationship between paradigms and languages. Another example of Object Oriented C code is [VFS](http://tldp.org/LDP/tlk/fs/filesystem.html)\n\nHowever some languages to offer themselves towards a notation. It's quite hard to write procedural code in Java for example, because all of the libraries are OO. It's not impossible but it's not the norm.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 6, "name": "t1_c029agm", "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426394, "score_hidden": false, "id": "c029agm", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029a2o", "body": "Object-orientation is not strictly a feature of a language, it's a way of doing stuff (\"programming paradigm\" is a fancier term); for a good example of an object-oriented C codebase, just look at [GTK+](http://library.gnome.org/devel/gtk/unstable/index.html).", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c029a2o", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 1, "link_id": "t3_5ybcs", "retrieved_on": 1427426399, "body": "Wow, this thread is filling up with tons of C lovers arguing the same points the writer has proven not to be important.\n\nThe one reason to consider C in my opinion? It's procedural programming. Not object-orientated. Sometimes it may just suit the problem better. Sometimes it may not. Whilst it's not the only procedural language it's one of the highest level languages (which isn't scripted).\n\nAnyway, I'm a VB.NET guy ;-)", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5ybcs", "id": "c029a2o", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 31, "author": "Eightbitlife", "created_utc": "1192459447", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 7, "author": "hoijarvi", "created_utc": "1192467260", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 4, "author": "[deleted]", "created_utc": "1192469621", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 5, "author": "hoijarvi", "created_utc": "1192470394", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 7, "author": "[deleted]", "created_utc": "1192471133", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192472001", "ups": 5, "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426379, "score": 5, "body": "Yes, I agree. Not understanding C seriously limits what you can do.", "id": "c029bo8", "author": "hoijarvi", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c029bo8", "parent_id": "t1_c029bk8", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029bk8", "ups": 7, "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426380, "score_hidden": false, "id": "c029bk8", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029bgw", "body": "Okay, point well taken.  I think you are correct, you would still need to be able to read C just to understand what you were getting back when a function returned a pointer, a struct, etc.\n\nI did not mean to imply that anyone had to write all of their code in C, just that somebody usually has to know enough C to wrap those functions for you so that you can use them.\n\nI guess I don't like the idea of people looking a C and thinking, \"Man, I really don't need to know this.\"  You may be able to squeeze by without it but I can't imagine not wanting to understand it.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 5, "name": "t1_c029bgw", "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426381, "score_hidden": false, "id": "c029bgw", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029bdq", "body": "As always, it depends. I use python a lot, so I have to know C. With VB 1-6 You could call Windows DLL's directly, you will only need to know the windows memory model. Of course knowing C was a great help.\n\nBut for example you don't need to write an image processing system in 100% C even if all the real image processing is done in C libraries.\n", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029bdq", "ups": 4, "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426382, "score_hidden": false, "id": "c029bdq", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029b2n", "body": "Yes, but don't you normally have to write C to call those libraries?  I've had to write plenty of wrapper code to get access to libraries that I have wanted to use in other languages.  The bottom line is that C remains the lingua franca of computing and you are going to be very limited if you cannot program in it reasonably well.", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c029fda", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426331, "score": 2, "score_hidden": false, "body": "True, and that's (one of) why(s) C++ is so relevant: calling C is really a matter of calling it, as opposed to anything else that can \"call\" C.", "author": "Gotebe", "created_utc": "1192508496", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 2, "parent_id": "t1_c029b2n", "id": "c029fda", "author_flair_css_class": null}], "subreddit": "programming", "ups": 7, "name": "t1_c029b2n", "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426387, "score_hidden": false, "id": "c029b2n", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029a4v", "body": "True, but most languages make it easy to call C libraries just because you can do so much with them. So it's not necessarily a good reason to choose C.", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c029csx", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426365, "score": 1, "score_hidden": false, "id": "c029csx", "author": "jotaroh", "created_utc": "1192480774", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c029a4v", "body": "SWIG!", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 31, "name": "t1_c029a4v", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426399, "score_hidden": false, "body": "He's missing the single biggest point about C here:\n\nThere is a MASSIVE library of fully functioning, meticulously tested and optimized C code out there. If you want to talk about code reuse and elegant architectures, what could be more elegant that using code that millions of eyes have been looking over for a decade or more? Yes, there are bad C programs &amp; programmers. But there are rotten programmers for every language, that's just a fact of life.\n\nI'm not a C devotee, but the fact is, it does it's job well, and has more momentum than any other language (see above posts about C being the first implemented high level language on any new chip); so, by definition, if Haskell/Erlang/Trendy-language-of-the-now were better, they would have unseated C by now.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5ybcs", "id": "c029a4v", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 20, "author": "IKbot", "created_utc": "1192459631", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 10, "author": "hoijarvi", "created_utc": "1192467069", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "archived": true, "ups": 2, "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426349, "score": 2, "body": "So in other words, you write python in C++?", "author": "geocar", "created_utc": "1192492613", "distinguished": null, "edited": false, "id": "c029e2u", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029e2u", "parent_id": "t1_c029b1r", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192521833", "ups": 2, "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426322, "score": 2, "body": "you're doing it right.\n\nthat's idiomatic quality c++ code today.\n", "author": "qwe1234", "author_flair_text": null, "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c029g0r", "parent_id": "t1_c029b1r", "score_hidden": false, "id": "c029g0r"}, {"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1192528937", "name": "t1_c029gar", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426319, "score": 2, "score_hidden": false, "id": "c029gar", "author": "the_wondering_jew", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 2, "parent_id": "t1_c029b1r", "body": "+1. I no longer waste my time on virtual function spaghetti, design patterns, trying to write the perfect Singleton class and other gobbledygOOk. (God I wasted so much time on that crap. OTOH, since I \"know it\", I no longer worry about it... at all.)", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029b1r", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 10, "link_id": "t3_5ybcs", "retrieved_on": 1427426387, "id": "c029b1r", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029a5v", "body": "I'm doing just that and prefer C++ for three reasons:\n\n1. I want smart pointers for reference counting.\n2. I want my functions to return values, not error codes, so I use exception handling.\n3. My current main target library NetCDF has lot of basically same functions differing only by data type (nc_get_var_float, nc_get_var_double) so I can write generic algorithms with templates instead of macro hackery\n\nThats about it. Obviously, learning STL made a big difference in my coding style. I use virtuals very little. ", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "bluGill", "created_utc": "1192467676", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "IKbot", "created_utc": "1192468796", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192472373", "ups": 1, "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426378, "score": 1, "body": "&gt;python string processing is good enough\r\n\r\nAgreed.   However the code I was optimizing did a bunch of things related to strings mixed in with the code that needed optimizing.   The string code itself was fast enough, but it had to do other things using the strings that needed work.  (I can't recall the details anymore but IIRC the problem wasn't speed, but some other limit of python that we hit) ", "author": "bluGill", "archived": true, "distinguished": null, "edited": false, "id": "c029bpq", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c029bpq", "parent_id": "t1_c029ba2", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": 2, "name": "t1_c029ba2", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426384, "score_hidden": false, "body": "I've never had to optimize string processing. That's probably because I do lots of sensor processing.\n\nThe point is that in choosing the components to optimize to get the desired performance, python string processing is good enough. No?", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029b4q", "id": "c029ba2", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 2, "name": "t1_c029b4q", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426387, "score_hidden": false, "body": "&gt;I'm beginning to think that C++ is less suited for this optimization approach than C. \r\n\r\nC++ alone is a pain to embed in python.  However C++ with swig or boost.python allow you to directly embed objects in python, and makes C++ much eaiser to use.   \r\n\r\nThe big gain is you can use things like std::string.  It isn't hard to write C++ code that does everything you do on python srings with std::string, and this makes porting python to C++ much easier.   The other gain is you can max C++ and Python objects.  \r\n\r\nI was able to take a python module that was too slow, and translate it to C++ with very little effort.  (almost as easy as adding braces and types)  Swig then let the rest of my python program work just fine.   An experienced programmer would notice that the resulting C++ code looked like python, but it was fast enough.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029a5v", "id": "c029b4q", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427426333, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c029f7i", "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 1, "score_hidden": false, "id": "c029f7i", "author": "Arkaein", "created_utc": "1192506161", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c029a5v", "body": "C++ might more naturally map to Python objects. Of course, Python can wrap standard C code quite well without using objects, and it's also possible to write Pythonic OOP wrappers for non-OOP C code. I've used PyODE (python bindings for ODE, the Open Dynamics Engine), which wrap ODE (written in C) handles in Python objects very nicely.\n", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "name": "t1_c029a5v", "controversiality": 0, "author_flair_text": null, "ups": 20, "link_id": "t3_5ybcs", "retrieved_on": 1427426398, "body": "Here is how to use C: build a system using a lovely language like Python, optimize on algorithms first, then optimize on languages. Python makes it easy to call C routines. \n\nPython too slow for image processing? Get your whole suite working, and drop in replacement modules for things that need to be fast. Luckily, lots of libraries already exist to do this.\n\nI'm beginning to think that C++ is less suited for this optimization approach than C. Thoughts?", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5ybcs", "id": "c029a5v", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 5, "author": "dvogel", "created_utc": "1192459734", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "newton_dave", "created_utc": "1192462665", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 7, "author": "trickos", "created_utc": "1192464161", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "[deleted]", "created_utc": "1192469557", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192472954", "ups": 4, "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426377, "score": 4, "score_hidden": false, "id": "c029bs6", "author": "trickos", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c029bs6", "parent_id": "t1_c029bde", "body": "Among DVCS yes.\n\nhttp://git.or.cz/gitwiki/GitBenchmarks#head-5657b8361895b5a02c0de39337c410e4d8dcdbce\n\nI do not pretend it is faster than git everywhere, everytime, but it is not 100% slower either. A couple of C modules and sound algorithms are good enough, at least for version control systems which are mostly I/O bound.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029bde", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426383, "id": "c029bde", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029aqm", "body": "[deleted]", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 7, "name": "t1_c029aqm", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426391, "score_hidden": false, "body": "That's called mercurial", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029ak1", "id": "c029aqm", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "lalaland4711", "created_utc": "1192472938", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c029bux", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426376, "score": 2, "score_hidden": false, "body": "&gt; Depending on the language chosen I'd bet you could get within 10% at a minimum. If you have an FFI and want to write the intense parts in C then you have the best of both worlds.\n\nWhile I agree with you, I don't really see how it's an argument against what I said.", "author": "newton_dave", "created_utc": "1192473511", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 2, "parent_id": "t1_c029bs3", "id": "c029bux", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029bs3", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 3, "link_id": "t3_5ybcs", "retrieved_on": 1427426377, "body": "Some code is that sensitive. I don't know the internals of git, but I've worked on projects where to get the data you want, you need to do X number of stat() calls, one for each file. And if your interpreter (high-level language) does lstat()/stat() instead, or a brk() as well, then it takes twice as long.\n\nThis is a good example. When the algorithm provably needs to do X operations, and it will take a while, 2*X (or even 1.1*X) can matter. 2*X or more is a lot more probable when you're counting syscalls like this.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029ak1", "id": "c029bs3", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427426333, "subreddit_id": "t5_2fwo", "created_utc": "1192506506", "ups": 1, "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 1, "body": "Oh, right, I should have been more clear. I meant that it would be 100% slower due to his skill level, not due to the language. The language difference would be closer to 10% like you said.", "author": "dvogel", "archived": true, "distinguished": null, "edited": false, "id": "c029f8g", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029f8g", "parent_id": "t1_c029ak1", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 2, "name": "t1_c029ak1", "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426393, "score_hidden": false, "id": "c029ak1", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029a6a", "body": "&gt; Because he likely knows it will be 100% slower.\n\nImprobable, but possible, I suppose.\n\nDepending on the language chosen I'd bet you could get within 10% at a minimum. If you have an FFI and want to write the intense parts in C then you have the best of both worlds.", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -1, "author": "temporaryaccount", "created_utc": "1192463925", "children": [{"controversiality": 0, "retrieved_on": 1427426390, "subreddit_id": "t5_2fwo", "created_utc": "1192464534", "ups": 10, "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 10, "body": "Actually, git was written in C from scratch.", "author": "gnuvince", "archived": true, "distinguished": null, "edited": false, "id": "c029ary", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029ary", "parent_id": "t1_c029aph", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c029aph", "score_hidden": false, "controversiality": 0, "archived": true, "ups": -1, "link_id": "t3_5ybcs", "retrieved_on": 1427426391, "id": "c029aph", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029a6a", "body": "  He definitely has nothing against Linus here, just all talk. Linus always backs up his proclamations with real code. Git in C is much faster than [Darcs] in Haskell. The speed difference likely more a question of algorithm than anything, but the point of using high-level languages like Haskell is so you can do lots of experimentation with algorithms flexibly--which cogito has attempted, and yet still lags behind a \"stupid content tracker.\"\n\nI don't know why C is being compared to high-level languages in the first place here. Right tool for the right job. Yes, we're aware of the myriad of problems with C. Doesn't stop it from being a good, pragmatic choice sometimes. Git was [NOT!] written in Perl the first time. [NOT!] prototyped in a higher-level language, then quietly ported to C. [Which is what Linus was talking about I suppose.] And it's by far the fastest DSCM tool out there, and quite possibly the best-designed.\n\nEDIT: Haha, whoops, I meant darcs, not cogito. And my bad about the Perl bit. ", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 0, "author": "[deleted]", "created_utc": "1192487857", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "[deleted]", "created_utc": "1192497221", "children": [{"controversiality": 0, "retrieved_on": 1427426324, "subreddit_id": "t5_2fwo", "created_utc": "1192518172", "ups": 0, "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 0, "body": "In spite of how much sense your comments make (at least in my opinion), computer people are generally very intolerant. Just a feature, not a bug. Hence the downmods.\n\n(I solved that by never downmodding. I only  upmod. Just like I upmodded you right now. (o:)", "author": "revence27", "archived": true, "distinguished": null, "edited": false, "id": "c029fvy", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029fvy", "parent_id": "t1_c029eh5", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029eh5", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 2, "link_id": "t3_5ybcs", "retrieved_on": 1427426342, "id": "c029eh5", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029dlz", "body": "Sure, mod me down, but being first to market is a big advantage in the real world.\n\nBut maybe you'll prove me wrong some day with your awesome new 100%-written-in-C web application. ;-)", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427426319, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c029g90", "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 2, "score_hidden": false, "id": "c029g90", "author": "[deleted]", "created_utc": "1192527395", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 2, "parent_id": "t1_c029dlz", "body": "How about the time wasted waiting for slow software to do its thing?", "author_flair_css_class": null}], "subreddit": "programming", "ups": 0, "name": "t1_c029dlz", "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426355, "score_hidden": false, "id": "c029dlz", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029a6a", "body": "So what if it's 100% slower? How much is your time worth?\n\nIf your time isn't worth much, then a low-level language is fine. If your time is valuable, you'd be better off working with a high-level language is spending money on beefier hardware.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029a6a", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 5, "link_id": "t3_5ybcs", "retrieved_on": 1427426398, "body": "Yet the OP has not answered Linus's challenge. He hasn't implemented the git core in a \"better\" language. Why? Because he likely knows it will be 100% slower.\n", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5ybcs", "id": "c029a6a", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 9, "author": "mohawk", "created_utc": "1192459764", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 5, "author": "llimllib", "created_utc": "1192463163", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192529203", "name": "t1_c029gb3", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426319, "score": 2, "score_hidden": false, "id": "c029gb3", "author": "mohawk", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 2, "parent_id": "t1_c029am4", "body": " I took that quote from the Haskell wiki\nhttp://haskell.org/haskellwiki/Introduction\n\nKind of ironic that the introduction to the language the author apparently prefers already answers his question.\n\nNow, wrt to Lennart Augustsson's implementation of real quicksort: i think it's a good sign that Haskell is expressive enough to be able to implement this embedded imperative language. I also think it prooves that if we didn't have a low-level imperative language (e.g. C or this embedded C lookalike), we'd have to invent it as it is quite useful for expressing algorithms for von Neumann or Harvard architectures.\n ", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029am4", "ups": 5, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426392, "score_hidden": false, "body": "&gt; In contrast, the Haskell program allocates quite a lot of extra memory behind the scenes\n\nNot [necessarily](http://augustss.blogspot.com/2007/08/quicksort-in-haskell-quicksort-is.html). Not that I'll argue that it's natural to do so in Haskell, I'm just pointing out that it can be done.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029a6h", "id": "c029am4", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c029a6h", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 9, "link_id": "t3_5ybcs", "retrieved_on": 1427426398, "id": "c029a6h", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5ybcs", "body": "It's hard to refrain from going for all the easy jokes here due to the errors.\n\nYes, it would be great if we could write our code in a language that carries correctness proofs (validated by the compiler), has a powerful type system, a sane turing-complete compile-time language and allows us to write high-level code, yet has enough information for the compiler to form really fast sequential code and decompose the problem for parallelization. Memory use should be only the size of the working set unless the programmer chooses to trade memory resizing for performance.\n\nAlas, all languages i know of are sorely lacking in one (or more) of these departments, so you'll still have to use the right tool for the job -- there's no silver programming language bullet, yet.\n\n\"When C is better\n\nIt isn't all roses, of course. The C quicksort uses an extremely ingenious technique, invented by Hoare, whereby it sorts the array in place; that is, without using any extra storage. As a result, it runs quickly, and in a small amount of memory. In contrast, the Haskell program allocates quite a lot of extra memory behind the scenes, and runs rather slower than the C program.\n\nIn effect, the C quicksort does some very ingenious storage management, trading this algorithmic complexity for a reduction in run-time storage management costs.\n\nIn applications where performance is required at any cost, or when the goal is detailed tuning of a low-level algorithm, an imperative language like C would probably be a better choice than Haskell, exactly because it provides more intimate control over the exact way in which the computation is carried out.\"", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 1, "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426398, "score": 1, "id": "c029a6t", "author": "[deleted]", "created_utc": "1192459840", "distinguished": null, "edited": false, "body": "[deleted]", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c029a6t", "parent_id": "t3_5ybcs", "score_hidden": false, "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 36, "author": "yuubi", "created_utc": "1192460859", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "zem", "created_utc": "1192520640", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 4, "author": "statictype", "created_utc": "1192526349", "children": [{"controversiality": 0, "retrieved_on": 1427426301, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c029hoe", "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 1, "score_hidden": false, "body": "Yes.\n\nRequiring programmers to free some function pointers and not others would be trouble too: suppose you have a list of callback functions, some of which are plain function pointers and some of which are closures that carry their args in the captured variables. Ick.", "author": "yuubi", "created_utc": "1192549816", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c029g76", "id": "c029hoe", "author_flair_css_class": null}], "subreddit": "programming", "ups": 4, "name": "t1_c029g76", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426320, "score_hidden": false, "body": "What I'm guessing is:\n\nWhen you create a closure, you're keeping a memory reference tucked away. (i.e, a reference to the data\\code being closed over). This memory needs to either be explicitly freed (what you would do in C) or needs to be swept up by the GC.\n\nRequiring code to explicitly free this memory basically kills the expressive advantage of a closure. So if you want a good closure implementation, you better have a good garbage collector to clean it up when its not referenced any more.\n\nAm I correct?\n", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029fzr", "id": "c029g76", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 4, "author": "yuubi", "created_utc": "1192548500", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192554111", "name": "t1_c029i5z", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426295, "score": 1, "score_hidden": false, "body": "ah - yes, i see. thanks for the explanation.", "author": "zem", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c029hjb", "id": "c029i5z", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029hjb", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 4, "link_id": "t3_5ybcs", "retrieved_on": 1427426303, "id": "c029hjb", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029fzr", "body": "The natural implementation of a C pointer is a word with an address in it.  You can legally cast these to and from some integer type, so the compiler can't reliably generate type information that the GC can use to know what words are pointers.\n\nOne response is \"conservative\" GC, which is a hack that assumes that any word that looks like a valid memory address is one.  It's unsafe because you can do arithmetic on pointers (if you have &amp;(a[5]) somewhere, it's not safe to collect a; if you have the xor of two pointers because you like tricky doubly-linked lists, it's not safe to collect either of the nodes you xored the pointers to).  It's leaky because sometimes you just happen to have a number that looks like an address.  A conservative GC also isn't allowed to move anything (it can't reliably find all the pointers to an object because some may be hidden, and there may be some false-positive ints lying around), so the heap can get fragmented.\n\nI think \"doing closures right\" includes the ability to return them.  To do this, you need some sort of data structure to keep the variables your function closes over.  In pseudo-C:\n\n    typedef int (*IntToInt)(int);\n\n    IntToInt MakeAdder(int increment) {\n      int adder(int x) {\n        return x+increment;\n      }\n      return adder;\n    }\n\nThis would fail, even with nested functions, because \"increment\" is allocated on MakeAdder's stack frame,\nwhich is freed when MakeAdder returns.  Some language implementations allocate activation records on a heap instead of a stack, but that depends on GC.\n\nedit: underscores apparently break markdown, so I InternalCapped everything sorry.", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 2, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426323, "body": "could you expand on this? i've been wondering about the same thing for ages.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029fzr", "parent_id": "t1_c029ace", "id": "c029fzr", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 36, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426396, "body": "&gt; C has no closures. Well ... I don't\nknow what the argument against closures is.\n\nThe natural implementation of pointers is incompatible with a good garbage collector, and you need a good GC to do closures right.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029ace", "parent_id": "t3_5ybcs", "id": "c029ace", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 43, "author": "manthrax", "created_utc": "1192461061", "children": [{"controversiality": 0, "retrieved_on": 1427426371, "subreddit_id": "t5_2fwo", "created_utc": "1192476853", "ups": 10, "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 10, "id": "c029cao", "author": "tanger", "archived": true, "distinguished": null, "edited": false, "body": "I think C++ killed Linus' family ...", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029cao", "parent_id": "t1_c029adf", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 43, "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426396, "id": "c029adf", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c029adf", "parent_id": "t3_5ybcs", "body": "I think C killed the authors family or something.", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 11, "author": "antirez", "created_utc": "1192463043", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 19, "author": "gnuvince", "created_utc": "1192464580", "children": [{"controversiality": 0, "retrieved_on": 1427426375, "subreddit_id": "t5_2fwo", "created_utc": "1192474287", "ups": 2, "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 2, "id": "c029bys", "author": "antirez", "archived": true, "distinguished": null, "edited": false, "body": "Thanks, I'm not a fan of C++ but this changes the things. Used very well C++ is probably more handy for some kind of software development.", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029bys", "parent_id": "t1_c029as9", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427426365, "subreddit_id": "t5_2fwo", "created_utc": "1192480950", "name": "t1_c029cto", "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 10, "score_hidden": false, "body": "that's not a nit-pick that's a MEGA-pick\n\n", "author": "jotaroh", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 10, "parent_id": "t1_c029as9", "id": "c029cto", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029as9", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 19, "link_id": "t3_5ybcs", "retrieved_on": 1427426390, "body": "Quick nit-pick, uTorrent is C++.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029alr", "id": "c029as9", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c029b9j", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426384, "score": 1, "score_hidden": false, "id": "c029b9j", "author": "tanger", "created_utc": "1192468695", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c029alr", "body": "  \"C is not so low level, if you improve the standard library enough to have dynamic strings, good data structures, a good library for event-driver programming, and so on.\"\r\n\r\n\r\nso you mean we should use C++ instead of C ? ;)\r\n\r\n\r\n\"If everything compiles well and you test the application there are very little chances that the user will see a runtime error because a name of a var was a typo.\"\r\n\r\n\r\nnice, but C brings its own type of bugs, much worse than typos in varibles ...\r\n  ", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 8, "author": "grauenwolf", "created_utc": "1192474107", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 0, "author": "shaurz", "created_utc": "1192475238", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "grauenwolf", "created_utc": "1192478179", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "mohawk", "created_utc": "1192527595", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c029huj", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426299, "score": 1, "score_hidden": false, "body": "Um, did you bother reading that link? I ask because it specifically considers the halting problem and none of the checks I listed necessarily require knowing if the program will halt.\r\n\r\nAlso consider, there is no Turing-complete system because no computer has infinite memory.", "author": "grauenwolf", "created_utc": "1192551387", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c029g9d", "id": "c029huj", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029g9d", "ups": 1, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426319, "score_hidden": false, "body": " It is a fundamental fact of computer science that any compiler (itself written in a turing-complete language) for a turing-complete programming language cannot perform all those checks for all programs at compile-time. Period.\n\nhttp://en.wikipedia.org/wiki/Halting_problem ", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029cgo", "id": "c029g9d", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 3, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426368, "body": "In some languages those are dynamically checked, in others statically. In C, they are ignored.\r\n\r\nLanguages like VB and Java don't allow inproperly terminated strings to exist, the compiler ensures they are properly closed under all circumstances.\r\n\r\nLanguages like C-Omega don't allow null pointer exceptions and can even check for integer overflows at compile-time.\r\n", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029cgo", "parent_id": "t1_c029c2t", "id": "c029cgo", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 0, "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426373, "id": "c029c2t", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c029c2t", "parent_id": "t1_c029bxu", "body": "Those are all dynamic checks (except some limited cases of pointer and bounds errors could be caught statically).", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "neilc", "created_utc": "1192490075", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "grauenwolf", "created_utc": "1192498309", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "mohawk", "created_utc": "1192526369", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192551750", "ups": 2, "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426298, "score": 2, "body": "BASIC, early versions of FORTRAN, assembly for devices without stack-allocation. And of course countless languages that we don't consider to be general purpose.\r\n\r\nOut of memory scenarios can only occur when you have recusive functions or dynamic memory allocation. Many languages, most of which we no longer find interesting, have this limitation.\r\n", "id": "c029hvx", "author": "grauenwolf", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c029hvx", "parent_id": "t1_c029g78", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 1, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426320, "body": "Sorry, but which compiler for a general-purpose programming language proves at compile-time that your program is equivalent to a finite automaton? ", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029g78", "parent_id": "t1_c029ekx", "id": "c029g78", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 1, "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426341, "id": "c029ekx", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c029ekx", "parent_id": "t1_c029dtu", "body": "Easy, don't allow dynamic memory allocation and count your slots. For highly constrained devices, they make languages that allocate all the memory up-front.\r\n\r\nMy problem with C is that it never checks for out of memory conditions. The programmer is expected to check for it after every malloc call, and then do... what? Usually the only honest thing to do is crash before data corruption can occur, but that's on the developer's head. Most just ignore it, especially when the malloc call is burried in someone else's API.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029dtu", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 1, "link_id": "t3_5ybcs", "retrieved_on": 1427426351, "body": " How would you suggest that a language \"statically check\" for out-of-memory conditions?\n\nC is not fundamentally different from C++, Java, et al. in the case of OOM: the allocation failures, and an error is indicated (via a NULL return from malloc in C, via an exception in C++ or Java). ", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029bxu", "id": "c029dtu", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 0, "author": "psyno", "created_utc": "1192504815", "children": [{"controversiality": 0, "retrieved_on": 1427426319, "subreddit_id": "t5_2fwo", "created_utc": "1192527482", "ups": 2, "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 2, "body": "&gt; There are no casting errors in C. It enforces strong typing, but it's not type-safe; the compiler believes you if you tell it something's type. (Hey, they're your bits!)\n\nThat's not strong typing; it's static weak typing.", "author": "weavejester", "archived": true, "distinguished": null, "edited": false, "id": "c029g93", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029g93", "parent_id": "t1_c029f3o", "score_hidden": false, "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "grauenwolf", "created_utc": "1192552262", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 0, "author": "psyno", "created_utc": "1192558480", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1192565443", "name": "t1_c029jja", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426277, "score": 2, "score_hidden": false, "id": "c029jja", "author": "grauenwolf", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 2, "parent_id": "t1_c029ip2", "body": "&gt; Unsigned integer overflow is a feature in C. It's in the spec. \r\n\r\nBeing in the spec doesn't make it a feature, it merely points to its existance.\r\n\r\n&gt; You've never written something to the effect of \"while (bits set in x) shift left\"? \r\n\r\nOther languages are quite capable of supporting both unchecked and checked integers. \r\n", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 0, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426288, "body": "Fanboy?  I'm pointing out facts.  (Although weavejester makes a good point below about my sloppily-worded point 6.)\r\n\r\nUnsigned integer overflow _is_ a feature in C.  It's in the spec.  You've never written something to the effect of \"while (bits set in x) shift left\"?  Or written a circular buffer?  Guess what's a fast mod by the size of the type!\r\n\r\nFinally, the C language defines no such thing as a string.  `char` is the smallest integer, nothing more.\r\n\r\nedit: grammar", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029ip2", "parent_id": "t1_c029hxw", "id": "c029ip2", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "name": "t1_c029hxw", "controversiality": 0, "archived": true, "ups": 2, "link_id": "t3_5ybcs", "retrieved_on": 1427426297, "id": "c029hxw", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029f3o", "body": "I take it from the hand-waving than you are a C fanboy. Who else would think that interger overflows, something that even assembly can check for, is a feature?\r\n\r\nThen there is item 5. If it's a feature, then why have libraries to \"fix\" it?\r\n\r\nAs for item 7, string is was originally defined as \"a string of characters\" or \"an array of characters\".\r\n ", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 0, "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426335, "id": "c029f3o", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c029f3o", "parent_id": "t1_c029bxu", "body": "1. Feature.\r\n2. This would be a dynamic check anyway.\r\n3. True, it's left to libraries.\r\n4. Not an error.  Do you mean *using* dangling pointers?  Again, left to libraries.\r\n5. Feature.  And again, libraries.\r\n6. There *are no* casting errors in C.  It enforces strong typing, but it's not type-safe; the compiler believes you if *you tell it something's type*.  (Hey, they're your bits!)\r\n7. char* != string.\r\n\r\nYou've just described some of the things that make C a simple, fast, and portable language.", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c029bxu", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 8, "link_id": "t3_5ybcs", "retrieved_on": 1427426375, "id": "c029bxu", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029alr", "body": "&gt; So... if the difference gets smaller you start seriously to see the good points of C: it's fast, the interface with the operating system is not mediated, there are static checks! when you compile. If everything compiles well and you test the application there are very little chances that the user will see a runtime error because a name of a var was a typo.\r\n\r\nThe static checks in C are laughable.\r\n\r\n1. It does not check for integer overflows.\r\n2. It does not check of out of memory.\r\n3. It does not check for double-freeing pointers.\r\n4. It does not check for dangling pointers.\r\n5. It does not check for array bounds.\r\n6. It does not check for type casting errors.\r\n7. It does not check for properly terminated strings.\r\n\r\nEven languages like VB have better static checking that C.\r\n", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 11, "name": "t1_c029alr", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426393, "score_hidden": false, "body": " Some arguments are good, but why in the pratice I continue to see different things?\n\nExample: 'utorrent' is written in C and is a very cool, stable, full featured application. It's fast, small, and so on.\n\nThere are mature tools to write this kind of applications in dynamic languages with a much higher level of abstraction, in little time (compared to C development), and with fewer bug.\n\nWell all this is in theory, in the pratice it looks different.\n\nI think I know why... or at least I'm starting to figure why.\n\nC is not so low level, **if** you improve the standard library enough to have dynamic strings, good data structures, a good library for event-driver programming, and so on.\n\nOnce you start using an enhanced version of the standard library the difference of abstraction between Ruby and C starts to get much smaller. Ok you don't have a closures, the memory business is still manual (even if with good libraries and valgrind it's much simpler than raw C), and so on, but using 'structures' and a good dose of functional approach and bottom-up design you can write good modular C programs that are simple to develop, read, fix.\n\nSo... if the difference gets smaller you start *seriously* to see the good points of C: it's fast, the interface with the operating system is not mediated, there are **static checks!** when you compile. If everything compiles well and you test the application there are very little chances that the user will see a runtime error because a name of a var was a typo.\n\nThere are even advantages that are about being low-level: programmers able good C programs care a lot about a data structure being O(1) or O(N^2) in certain kind of operations, it's like if every part of the program is written with more \"computer science\" in mind.\n\nI think this all the reasons why in pratice a lot of the best software available is written  in C. ", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5ybcs", "id": "c029alr", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 47, "author": "ddyson", "created_utc": "1192463596", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192473123", "name": "t1_c029bt1", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426377, "score": 5, "score_hidden": false, "body": "Best... comment...ever.", "author": "lalaland4711", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 5, "parent_id": "t1_c029any", "id": "c029bt1", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 47, "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426392, "id": "c029any", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c029any", "parent_id": "t3_5ybcs", "body": "Why should I care which language you use?", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "fergie", "created_utc": "1192465605", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "joe24pack", "created_utc": "1192465838", "children": [{"controversiality": 0, "retrieved_on": 1427426373, "subreddit_id": "t5_2fwo", "archived": true, "ups": 2, "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 2, "body": "I guess whoever downmodded this forgot where Bell Labs was at ... oh, nevermind.", "author": "joe24pack", "created_utc": "1192475617", "distinguished": null, "edited": false, "id": "c029c4o", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029c4o", "parent_id": "t1_c029aws", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 1, "name": "t1_c029aws", "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426389, "score_hidden": false, "id": "c029aws", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029avv", "body": "I always thought of it as the New Jersey of programming languages, or is that the programming language of New Jersey, I can't remember.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 1, "name": "t1_c029avv", "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426389, "score_hidden": false, "id": "c029avv", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5ybcs", "body": "I think it is quaint that even 'progressive' C programmers regard object-orientation as 'trendy'\r\n\r\nLong live C and all it's daftness! We love its idiosyncracies- it's the Britain of programming languages.", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c029ax3", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426388, "score": 6, "score_hidden": false, "id": "c029ax3", "author": "adric", "created_utc": "1192465913", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 6, "parent_id": "t3_5ybcs", "body": "C has its (legitimate) place:  See [\"The Fundamental Theory of C\"](http://kickin-the-darkness.blogspot.com/2007/09/fundamental-theory-of-c.html).", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "norkakn", "created_utc": "1192466636", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "novagenesis", "created_utc": "1192467308", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c029bqe", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426378, "score": 5, "score_hidden": false, "id": "c029bqe", "author": "norkakn", "created_utc": "1192472523", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 5, "parent_id": "t1_c029b2v", "body": "I've done some programming in hex.  C is very high level.  (-:", "author_flair_css_class": null}], "subreddit": "programming", "ups": 3, "name": "t1_c029b2v", "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426387, "score_hidden": false, "id": "c029b2v", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029azs", "body": "Calling C \"high level\" is like calling a baseball bat a weapon of mass destruction.", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192469198", "name": "t1_c029bbx", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426383, "score": 1, "score_hidden": false, "id": "c029bbx", "author": "dlsspy", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c029azs", "body": "&gt; C is the high level language that most accurately represents when is happening on the silicon. When one is programming on the hardware instead of in a mathematical fantasy, this is very important.\n\nYour descriptions of C seem to contradict any description of a high level language I've ever heard of.", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 6, "author": "mr_chromatic", "created_utc": "1192471235", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192476670", "ups": 1, "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426371, "score": 1, "body": "Compared to what though?  I guess I feel that C gives me a better feel for memory vs registers and especially devices than any other language.  And it gives me a much better feel for what is actually in memory, and how the hardware manipulates it.", "author": "norkakn", "author_flair_text": null, "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c029ca1", "parent_id": "t1_c029bkx", "score_hidden": false, "id": "c029ca1"}], "subreddit": "programming", "score_hidden": false, "ups": 6, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426380, "body": "&gt; C is the high level language that most accurately represents when is happening on the silicon.\n\nMaybe PDP-11 silicon, but I'm not sure C accurately represents what happens on any processor designed in the past ten years.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029bkx", "parent_id": "t1_c029azs", "id": "c029bkx", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1192489786", "name": "t1_c029dt2", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426351, "score": 4, "score_hidden": false, "id": "c029dt2", "author": "Sukoshi", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 4, "parent_id": "t1_c029azs", "body": "If you have a soft-spot for low-level programming (like me), play around with Forth. Factor is like a higher-level Forth, so it's fun too :)", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 0, "name": "t1_c029azs", "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426387, "score_hidden": false, "id": "c029azs", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5ybcs", "body": "C is the high level language that most accurately represents when is happening on the silicon.  When one is programming on the hardware instead of in a mathematical fantasy, this is very important.", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192467472", "ups": 3, "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426387, "score": 3, "body": "I think the reason to use C is greater control, more so than just program execution speed.\n\nAs many people have pointed out, there are times when programs written in \"higher level\" languages will be faster than a comparable program written in C.  But C gives you more fine grained control over resources like memory, file handles, etc.  There may be very good reasons, for example, that you don't want the specific characteristics of Java or Python or Common Lisp's memory management.  The ranter kind of gets at this when he says that C's one legitimate rule is to write runtimes for other languages.  This is because C gives you a lot of control to give those runtimes exactly the characteristics you want.\n\nYou may need to consider these things even if you are not creating a new language runtime, however.  These are the times you want to strongly consider C.", "id": "c029b3s", "author": "jimbokun", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c029b3s", "parent_id": "t3_5ybcs", "score_hidden": false, "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427426383, "subreddit_id": "t5_2fwo", "created_utc": "1192469258", "ups": -1, "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": -1, "body": "c is the first modern syntactical programming language. That is why we don't program in assembly. Because it is hard. c isn't the answer for everything, but neither is any other programming language. If you just need to do a generic task, java is great. But what about embedded system, you can't write java for a portable device. And like it or not, other programming languages aren't that fast yet. Whenever I use any Java program ever, it quickly bloats up to be unuseable very quickly. The user gets no benefit, just the developer. Sure in the future computers will be so fast that optimization will be nearly pointless, but we still aren't there yet.", "author": "Fidodo", "archived": true, "distinguished": null, "edited": false, "id": "c029bc6", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029bc6", "parent_id": "t3_5ybcs", "score_hidden": false, "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 24, "author": "bottar", "created_utc": "1192469504", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192477880", "name": "t1_c029cfe", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426369, "score": 2, "score_hidden": false, "id": "c029cfe", "author": "tanger", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 2, "parent_id": "t1_c029bd4", "body": "Perhaps you should use C++ with smart pointers, they take care about deallocating stuff. They are based on reference counting so you still have to watch out for memory leaks caused by reference cycles, but that is much better than screwing yourself with dangling pointers. And any time you need/want, you can switch back to straight C.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 24, "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426383, "id": "c029bd4", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c029bd4", "parent_id": "t3_5ybcs", "body": "I'm a professional C coder.\n\nI write gobs of C for a proprietary embedded platform. \n\nI love C because it's close to the machine but not assembly. \nI love C because it lets me do whatever I want with memory. \nI love C because it's simple yet very powerful. \nI often write OO C, it's not hard at all.\n\nI hate C because it lets me do what I want with memory. The lack of memory management is a huge time suck when debugging. \n\nWhen I'm writing code outside of my job I use Python, JavaScript, and C. Depending on the task. I mostly use Python, love it.\n\nThis is an old argument that comes down to using the right tool for the job and knowing how to use the tool well.", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 9, "author": "illuminatedwax", "created_utc": "1192470096", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192479240", "name": "t1_c029cli", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426367, "score": 4, "score_hidden": false, "body": "I agree with you, if you're not using a programming language you like using, switch.", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 4, "parent_id": "t1_c029bfq", "id": "c029cli", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c029bfq", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 9, "link_id": "t3_5ybcs", "retrieved_on": 1427426382, "id": "c029bfq", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5ybcs", "body": "'Cuz I like using it.\n\nThat should be your number 1 criterion in choosing a programming language.", "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427426380, "subreddit_id": "t5_2fwo", "created_utc": "1192471175", "ups": 11, "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 11, "body": "I'm amused that he doesn't seem to know the answer to his question.  One word: infrastructure.\n\nThe toolset, the libraries, the IDEs, the documentation, the millions of fellow C programmers worldwide, all of that; it's all more numerous, more debugged, more mature in C.\n\nLanguages that succeed in wide adoption either build on existing popular languages (C++, Objective-C) or have major capital to build these resources from scratch (Java, C#).", "author": "millstone", "archived": true, "distinguished": null, "edited": false, "id": "c029bkm", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029bkm", "parent_id": "t3_5ybcs", "score_hidden": false, "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192471453", "ups": 10, "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426379, "score": 10, "body": "He is an angry, angry man.", "author": "Stopher", "archived": true, "distinguished": null, "edited": false, "id": "c029bm5", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c029bm5", "parent_id": "t3_5ybcs", "score_hidden": false, "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427426376, "subreddit_id": "t5_2fwo", "created_utc": "1192473712", "ups": 13, "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 13, "body": "C is the lingua franca of programming. Deal with it.\n\nYou might as well argue for Esperanto. It's not gonna happen (... at least not for several decades)", "author": "lalaland4711", "archived": true, "distinguished": null, "edited": false, "id": "c029bvv", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029bvv", "parent_id": "t3_5ybcs", "score_hidden": false, "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427426371, "subreddit_id": "t5_2fwo", "created_utc": "1192476592", "ups": 9, "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 9, "body": " &gt; C has a very small (almost 1:1) relation to assembly  \n   \nBut that *is* the point! C should be viewed as language for system programming not for application development.   \nOne example is automotive embedded systems (the field I work in). All the applications are developed as [Simulink](http://www.mathworks.com/products/simulink/)  models where as the os is developed in C. The models are translated to C before linking into the main image.   \nThis way, I am able to see the problems in implementation which may not be present in simulation. And I don't have to be an assembly language guru.   \nMoreover, C provides the perfect mapping to all the hardware there is which is just great while debugging.   \nIMHO C is the assembly language of today, you might not program in it but you must know it.", "author": "surajbarkale", "archived": true, "distinguished": null, "edited": false, "id": "c029c9k", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029c9k", "parent_id": "t3_5ybcs", "score_hidden": false, "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "Whisper", "created_utc": "1192476636", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1192478302", "name": "t1_c029ch9", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426368, "score": 1, "score_hidden": false, "body": "C is not the only compiled language.", "author": "noamsml", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c029c9t", "id": "c029ch9", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 3, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ybcs", "retrieved_on": 1427426371, "body": "... because you are not sophomoric, and understand that there will always be CPU-bound tasks?", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029c9t", "parent_id": "t3_5ybcs", "id": "c029c9t", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c029cgu", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426368, "score": 2, "body": "Must be a young guy rationalizing.  I made a lot of money off of C and feel it's worth pointing out how much legacy code is out there that has to be maintained.  I learned C before even Pascal and it has served me well right up through Java and .Net (am currently doing enteprise web apps in Java/Struts/XML/XSLT).  It's amazing how many people who call themselves programmers don't have the foggiest clue about machine architecture, how pointer arithmentic works, or what a linker does.  \n\n\n", "author": "[deleted]", "created_utc": "1192478213", "distinguished": null, "edited": false, "id": "c029cgu", "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 2, "parent_id": "t3_5ybcs", "score_hidden": false, "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c029ck4", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426367, "score": 1, "score_hidden": false, "id": "c029ck4", "author": "[deleted]", "created_utc": "1192478986", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t3_5ybcs", "body": "[deleted]", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 6, "author": "markedtrees", "created_utc": "1192479523", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 4, "author": "OMouse", "created_utc": "1192481465", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "piranha", "created_utc": "1192520281", "children": [{"controversiality": 0, "retrieved_on": 1427426286, "subreddit_id": "t5_2fwo", "created_utc": "1192559625", "ups": -1, "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": -1, "id": "c029iu7", "author": "OMouse", "archived": true, "distinguished": null, "edited": false, "body": "&gt;Good luck pulling that off while retaining peer respect and.. your job.\n\nAs long as the work gets done and it works with the other languages in use, I think it's fine. It also maintains job security which is why people use Perl and C++ most of time anyway.", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029iu7", "parent_id": "t1_c029fz9", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 0, "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426323, "id": "c029fz9", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c029fz9", "parent_id": "t1_c029cvo", "body": "Unfortunately, one condition of working with other programmers is that you have to work with other programmers.  Good luck pulling that off while retaining peer respect and.. your job.", "author_flair_css_class": null}], "subreddit": "programming", "ups": 4, "name": "t1_c029cvo", "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426363, "score_hidden": false, "id": "c029cvo", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029cn2", "body": "Do it with Gambit-C or Bigloo Scheme too.\n\nAlso, Bigloo Scheme and a few other Schemes compile to Java. So if you're stuck in a Java-shop you can still kick ass.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 6, "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426366, "id": "c029cn2", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c029cn2", "parent_id": "t3_5ybcs", "body": "Write Scheme and compile to C if anybody asks you what programming language you're using. ", "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427426366, "subreddit_id": "t5_2fwo", "archived": true, "ups": 2, "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 2, "id": "c029cno", "author": "alephnil", "created_utc": "1192479686", "distinguished": null, "edited": false, "body": "While many programs would better have been written in another programming language than C, he is a little bit extreme, and lacks some knowledge and/or imagination. I just wrote an algorithm that worked on a several GB data structure, using memory maped files and similar tricks. On a unix-like system (or even windows), it is hard to do this in another language than C (or C++ in a C-like way). This is of cause partially because most common OSes are written in C.\n\nThis only applies for the most time-critical algorithms however, and everything else should be written in a higher level language than C. Also, it is a PITA to write this kind of high-performance code, and most C code written is not of that quality.", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029cno", "parent_id": "t3_5ybcs", "score_hidden": false, "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 3, "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426365, "score": 3, "id": "c029cp6", "author": "jsnx", "created_utc": "1192479975", "distinguished": null, "edited": false, "body": "This is article leans way to heavily on _ad hominem_ and sweeping generalizations. Learn C to understand more about operating systems, file systems and all that other stuff you use that's written in C.\n\nIt's legitimate to complain that C is overused -- C++ could handle a lot of the application level tasks that C is used for (now that C++ is mostly implemented). In fact, OCaml could handle a lot of those tasks; but people like expected value: it's a big investment to learn a language, and there weren't any well demonstrated alternatives for app development even ten years ago.", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c029cp6", "parent_id": "t3_5ybcs", "score_hidden": false, "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "[deleted]", "created_utc": "1192480512", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c029dei", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426357, "score": 2, "score_hidden": false, "body": "Agreed, in other languages as well.  Many programs that would have been painful to write in 100% C (or at least slower to write), have been sped up by writing some parts in C or ASM.", "author": "norkakn", "created_utc": "1192485936", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 2, "parent_id": "t1_c029crh", "id": "c029dei", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 3, "name": "t1_c029crh", "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426365, "score_hidden": false, "id": "c029crh", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5ybcs", "body": "well, if you use python. it's nice to be able to write extensions in c.", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 5, "author": "roerd", "created_utc": "1192484404", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "revence27", "created_utc": "1192517385", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192541459", "ups": 1, "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426311, "score": 1, "score_hidden": false, "body": " Yes, you're right, implementing fold in a sane way requires genericity. But it remains true that it doesn't require closures, though the author of the submission claimed that. ", "author": "roerd", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c029gw3", "parent_id": "t1_c029fub", "id": "c029gw3", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "name": "t1_c029fub", "controversiality": 0, "author_flair_text": null, "ups": 3, "link_id": "t3_5ybcs", "retrieved_on": 1427426326, "body": "Let's fold over a string, shall we?\nOr a FILE **.\n\nFold is a generic function. intFoldl and charFoldl and FILEFoldl and charpFoldl and voidpFoldl ... these aren't genericity. Well, they are, but you had to write it yourself. And see how many for loops those are.\n\nRepetition is the quickest death in programming. Messy death. And the bare minimum I expect from a language is support for compile-time-verifiable genericity. C doesn't have it. Hence why you didn't write a Fold, but and intFoldl.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029d87", "id": "c029fub", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 5, "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426359, "id": "c029d87", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c029d87", "parent_id": "t3_5ybcs", "body": "Fold doesn't require closures:\n\n    #include &lt;stdio.h&gt;\n\n    int intFoldl(int(* f)(int, int), int z, int* xs, int xn) {\n        int i;\n\n        for (i = 0; i &lt; xn; i++)\n            z = (*f)(z, xs[i]);\n\n        return z;\n    }\n\n    int add(int n, int m) {\n        return n + m;\n    }\n\n    int main() {\n        int xs[] = {1, 2, 3};\n\n        printf(\"The sum of 1, 2, 3 is %d.\\n\", intFoldl(add, 0, xs, 3));\n\n        return 0;\n    }\n\n", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "Sukoshi", "created_utc": "1192490023", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "[deleted]", "created_utc": "1192497640", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "doctor_shim", "created_utc": "1192504101", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192517829", "ups": 1, "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426324, "score": 1, "score_hidden": false, "body": "Yes. Learning C is valuable. Just a history lesson is valuable. _Very_ valuable.\nBut to use C in writing systems software today - say like a web server - shows (to me, anyway) an appalling lack of imagination and an obsession with details that only matter as much today as where the family will go to hunt for food today.", "author": "revence27", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c029fv6", "parent_id": "t1_c029f1q", "id": "c029fv6", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 0, "name": "t1_c029f1q", "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426335, "score_hidden": false, "id": "c029f1q", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029eio", "body": "Do you think learning C is valuable?", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 2, "controversiality": 0, "archived": true, "link_id": "t3_5ybcs", "retrieved_on": 1427426342, "id": "c029eio", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c029eio", "parent_id": "t1_c029dtn", "body": " &gt; Invaluable in picking up any C-like language. (i.e. Java, C++, ObjC, C#, etc.)\n\nOf course, you could just pick up one of those higher-level languages instead. =P \n\n(Not saying knowing C isn't valuable, I'm just saying that the amount of time spent learning C plus the amount of time spent \"upgrading\" your knowledge to a similar language is probably equal to the time spent just learning the other language.)", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029dtn", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 3, "link_id": "t3_5ybcs", "retrieved_on": 1427426351, "body": "Here are some reasons why modern, sane people would use C (not many, I admit).\n\n* C is very easy to learn. (Easy to learn, hard to program in.)\n\n* Some people actually enjoy the paradigm C gives when programming (hard to believe, especially for a Haskell programmer, but true).\n\n* Invaluable in picking up any C-like language. (i.e. Java, C++, ObjC, C#, etc.)", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5ybcs", "id": "c029dtn", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192494959", "ups": 2, "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426345, "score": 2, "body": "in distant future, when haskell or python will be fast and compilers for them will be mainstream, I'll be happy to write everything in great functional style. now all we have are c compilers for embedded devices and weak batteries. even 10% overhead is painfull. \nI personally hate all the micromanagement c stuff", "id": "c029e9k", "author": "runnig", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c029e9k", "parent_id": "t3_5ybcs", "score_hidden": false, "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1192496186", "name": "t1_c029edr", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426344, "score": 0, "score_hidden": false, "id": "c029edr", "author": "Zorak", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 0, "parent_id": "t3_5ybcs", "body": "You shouldn't.  From the title and text of your article it is clear you are at least retarded and possibly a borderline idiot.  By all means DO NOT USE C!  In  fact, you should stop using all mechanized systems of greater complexity than a toaster.  Scratch that--stop using the toaster as well.  Dear god, just waddle off to an unpopulated area and wait for nature to take it's course.  With any luck (yours, not ours) it will be swift and decisive in a painless sort of way.  If you do not heed this advice, we may need to hunt you down.  Don't make us do this.", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192496407", "ups": 1, "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426343, "score": 1, "id": "c029ee7", "author": "throwaway", "archived": true, "distinguished": null, "edited": false, "body": "I believe I haven't directly programmed in raw C in over a year.  I use python almost all the time, and [pyrex](http://www.cosc.canterbury.ac.nz/greg.ewing/python/Pyrex/) works great when I need the speed of C.  But I must admit, you couldn't get the full value of pyrex without knowing C first.", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c029ee7", "parent_id": "t3_5ybcs", "score_hidden": false, "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c029f3y", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426335, "score": -1, "score_hidden": false, "body": "I liked the part where he was trashing C, but not the part where he was defending C++. Both deserve to be thrown in the drawer of history with Fortran and COBOL.", "author": "raldi", "created_utc": "1192504909", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": -1, "parent_id": "t3_5ybcs", "id": "c029f3y", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c029fec", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426330, "score": 1, "body": "The fact that he didn't offer up a feasible alternative should be his answer.", "author": "prockcore", "created_utc": "1192509073", "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t3_5ybcs", "score_hidden": false, "id": "c029fec"}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192514368", "ups": 3, "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426327, "score": 3, "body": "Anyone else pick up on the irony of ranting about using something as low-level as C in unadorned ASCII? \n\nDon't get me wrong, I agree with him about C but we have this thing called HTML these days.", "id": "c029fp1", "author": "mdreid", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c029fp1", "parent_id": "t3_5ybcs", "score_hidden": false, "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427426326, "subreddit_id": "t5_2fwo", "created_utc": "1192516179", "name": "t1_c029fsc", "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 1, "score_hidden": false, "id": "c029fsc", "author": "zoomzoom83", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t3_5ybcs", "body": "I think every programmer should have a good working knowledge of C (And some assembly for that matter), however I don't think C should be used for high level application development.\n\n", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1192521205", "name": "t1_c029g07", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426323, "score": 0, "score_hidden": false, "id": "c029g07", "author": "xoner2", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 0, "parent_id": "t3_5ybcs", "body": "proggit successfully trolled!", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c029g89", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426320, "score": 4, "score_hidden": false, "body": "STFU and go back to programming in visual basic, you smug stupid asshole", "author": "AngryWaiter", "created_utc": "1192526971", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 4, "parent_id": "t3_5ybcs", "id": "c029g89", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c029gbr", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426318, "score": -1, "score_hidden": false, "id": "c029gbr", "author": "jbstjohn", "created_utc": "1192529622", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": -1, "parent_id": "t3_5ybcs", "body": "It takes a certain kind of arrogance (which is sadly fairly common) to say, \"Wow, all these smart respected people are saying something I think is wrong. Hey, they must actually be *stupid*!\"", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192531981", "name": "t1_c029gef", "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426317, "score": 0, "score_hidden": false, "id": "c029gef", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 0, "parent_id": "t3_5ybcs", "body": "C is a light, sharp sword that takes much time and suffering to master. If you can master C, all those other sugary languages will be your willing bitches.\n\nNow if your programmers are mediocre to merely \"pretty good\", don't let them play with the sword. Even master programmers shouldn't be drawing the sword unless there's a serious dragon to be slain.", "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427426317, "subreddit_id": "t5_2fwo", "created_utc": "1192532988", "ups": 1, "gilded": 0, "link_id": "t3_5ybcs", "downs": 0, "score": 1, "body": "[deleted]", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "id": "c029ggc", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029ggc", "parent_id": "t3_5ybcs", "score_hidden": false, "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192552342", "ups": 9, "gilded": 0, "link_id": "t3_5ybcs", "retrieved_on": 1427426297, "score": 9, "body": " Very entertaining. Most Haskell/Lisp/Erlang lovers are true intellectuals and are very capable. They write very well - there is no way someone here can honestly call that guy stupid.\n\nHowever, when I look around I never see any results of their work. I browse APT repository on Debian, I see interesting new projects pop up here and there, and almost everything is done in C. \n\nSomehow those \"stupid and ignorant\" C programmers managed to build everything that powers the Internet: GCC, Apache, OSes, tools, Gnome+friends, the list is huge. Nearly everything is written in C. And it's not just legacy, if you focus on projects started within last 5 years the picture will not change.\n\nMeanwhile higher-level language intellectuals  produced very little. On my Ubuntu desktop I do not believe I have a single piece of software written in Haskell. How come? \n\nIf your language is so superior, and it makes you guys so much more productive, why don't you flood us with actual software written in it? \n\n ", "author": "[deleted]", "author_flair_text": null, "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c029hya", "parent_id": "t3_5ybcs", "score_hidden": false, "id": "c029hya"}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 9, "author": "chime", "created_utc": "1193807344", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 25, "author": "vineetk", "created_utc": "1193810755", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 17, "author": "lonjerpc", "created_utc": "1193815349", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193838655", "name": "t1_c02ccwv", "gilded": 0, "link_id": "t3_5zhs8", "retrieved_on": 1427424892, "score": -4, "score_hidden": false, "body": "I'm not, because I'm not american.", "author": "r3m0t", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": -4, "parent_id": "t1_c02cbpo", "id": "c02ccwv", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": 4, "gilded": 0, "link_id": "t3_5zhs8", "retrieved_on": 1427424891, "score": 4, "body": "Yeah, I was really hoping the solution would be one of those \"Huh, awesome\" things, not one of those \"Goddamnit, that's just stupid\" things. :(", "author": "pavel_lishin", "created_utc": "1193839440", "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02cczv", "parent_id": "t1_c02cbpo", "score_hidden": false, "id": "c02cczv"}], "subreddit_id": "t5_2fwo", "name": "t1_c02cbpo", "ups": 17, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zhs8", "retrieved_on": 1427424907, "score_hidden": false, "body": "I am hitting myself for not seeing it right away.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02cbg6", "id": "c02cbpo", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02cbg6", "ups": 25, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zhs8", "retrieved_on": 1427424911, "score_hidden": false, "body": "That's no more a \"solution\" than this is (in bourne shell):\n\n    echo '\"north dakota\", \"south carolina\"'\n    echo '\"north carolina\", \"south dakota\"'", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02cb89", "id": "c02cbg6", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02cb89", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 9, "link_id": "t3_5zhs8", "retrieved_on": 1427424914, "id": "c02cb89", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t3_5zhs8", "body": "Here's a solution in PHP :)\n\n    preg_match(\"/\\[\\[(.*)\\]\\]/siU\", file_get_contents(\"http\".\"://blog.moertel.com/articles/2007/09/01/clusterby-a-handy-little-function-for-the-toolbox\"), $key);\n    echo html_entity_decode($key[0]);\n", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 5, "author": "lespea", "created_utc": "1193807800", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 13, "author": "llimllib", "created_utc": "1193808030", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": 1, "gilded": 0, "link_id": "t3_5zhs8", "retrieved_on": 1427424907, "score": 1, "body": "Ah okay, for some reason when I was reading his synapsis I thought he said he created the cartesian product of all the leters and then tested them all. Maybe that was the c++ guy... too lazy to check!\r\n\r\nHis way makes a ton more sense :: way less work ;)", "id": "c02cbrt", "author": "lespea", "created_utc": "1193816790", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02cbrt", "parent_id": "t1_c02cb9l", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": 13, "name": "t1_c02cb9l", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zhs8", "retrieved_on": 1427424913, "score_hidden": false, "body": "He doesn't get the cartesian product of all the letters of each state pair, he just puts them in a list and sorts them, looking for pairs that have the same \"bag of letters\" as some other pair of states.", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02cb98", "id": "c02cb9l", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427424901, "subreddit_id": "t5_2fwo", "created_utc": "1193827045", "ups": 6, "gilded": 0, "link_id": "t3_5zhs8", "downs": 0, "score": 6, "body": "Cartesian product of states:\n\n    [(x,y) for x in states for y in states]\n\n", "id": "c02cc7d", "author": "[deleted]", "author_flair_text": null, "distinguished": null, "edited": true, "archived": true, "subreddit": "programming", "name": "t1_c02cc7d", "parent_id": "t1_c02cb98", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 5, "score_hidden": false, "controversiality": 0, "archived": true, "link_id": "t3_5zhs8", "retrieved_on": 1427424913, "id": "c02cb98", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02cb98", "parent_id": "t3_5zhs8", "body": "Sorry I'm not a python programmer... how does he get the cartesian product of all the letters?\r\n\r\nThis is probably really obvious :o", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 8, "author": "ayrnieu", "created_utc": "1193810524", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 8, "author": "sans-serif", "created_utc": "1193817884", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "statictype", "created_utc": "1193820681", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 7, "author": "degustisockpuppet", "created_utc": "1193835382", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 1, "gilded": 0, "link_id": "t3_5zhs8", "retrieved_on": 1427424872, "score": 1, "id": "c02cef1", "author": "statictype", "created_utc": "1193850281", "distinguished": null, "edited": false, "body": "Well, I think there's a difference between verbose code and verbose data..\n\nVerbose code should be discouraged. You still have to read it after its generated..\n\nI think verbose data is ok. Its a lot easier to reason about a complex or large data structure rather than a complex or large body of code.\n", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02cef1", "parent_id": "t1_c02ccm4", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 7, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zhs8", "retrieved_on": 1427424897, "body": "Or use Perl:\n\n    my @states = qw(alabama alaska arizona arkansas);\n\n(I'm not a particular fan of Perl anymore, but what you say reminds me a lot of programmers who claim that Java's verboseness doesn't matter, because Eclipse generates the getters and setters for them.)", "archived": true, "distinguished": null, "edited": true, "name": "t1_c02ccm4", "parent_id": "t1_c02cby2", "id": "c02ccm4", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 2, "controversiality": 0, "archived": true, "link_id": "t3_5zhs8", "retrieved_on": 1427424904, "id": "c02cby2", "author_flair_text": null, "distinguished": null, "edited": true, "name": "t1_c02cby2", "parent_id": "t1_c02cbtk", "body": "Thats a really good point.\n\nInstead of writing code to put data into a structure, its usually far more efficient to just use a keyboard macro on your editor and be done with it. Its just static data, after all. \n", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 8, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zhs8", "retrieved_on": 1427424906, "body": "Or a keyboard macro.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02cbtk", "parent_id": "t1_c02cbfo", "id": "c02cbtk", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193824526", "name": "t1_c02cc49", "gilded": 0, "link_id": "t3_5zhs8", "retrieved_on": 1427424902, "score": 8, "score_hidden": false, "body": "If you *really* want to save on a few keystrokes, you could just do:\r\n\r\n'alabama alaska southdakota northdakota'.split()\r\n", "author": "zepolen", "author_flair_text": null, "distinguished": null, "edited": true, "archived": true, "subreddit_id": "t5_2fwo", "ups": 8, "parent_id": "t1_c02cbfo", "id": "c02cc49", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": 3, "gilded": 0, "link_id": "t3_5zhs8", "retrieved_on": 1427424883, "score": 3, "body": "Actually, I just did a copy and paste of the list of states from Mark Nelson's code and let emacs re-format it. Laziness FTW!", "id": "c02cdn0", "author": "thraxil", "created_utc": "1193844868", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02cdn0", "parent_id": "t1_c02cbfo", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02cbfo", "ups": 8, "controversiality": 0, "archived": true, "link_id": "t3_5zhs8", "retrieved_on": 1427424911, "score_hidden": false, "id": "c02cbfo", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5zhs8", "body": "&gt; `states = [\"alabama\",\"alaska\",\"arizona\",\"arkansas\",\"california\",\"colorado\",`\r\n\r\nBlech, you need a program to generate something this verbose.\r\n", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 20, "author": "Porges", "created_utc": "1193811269", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 13, "author": "novagenesis", "created_utc": "1193838217", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193844092", "name": "t1_c02cdj7", "gilded": 0, "link_id": "t3_5zhs8", "retrieved_on": 1427424885, "score": 4, "score_hidden": false, "id": "c02cdj7", "author": "nuclear_eclipse", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 4, "parent_id": "t1_c02ccv3", "body": "clearly", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 13, "name": "t1_c02ccv3", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zhs8", "retrieved_on": 1427424893, "score_hidden": false, "body": "So Haskell's winning?", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02cbh5", "id": "c02ccv3", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02cbh5", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 20, "link_id": "t3_5zhs8", "retrieved_on": 1427424911, "id": "c02cbh5", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5zhs8", "body": "Haskell 1, Python 0, C++ INT_MAX+1", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 9, "author": "[deleted]", "created_utc": "1193812949", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "fuglybear", "created_utc": "1193836830", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "arthurujm", "created_utc": "1193841508", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "[deleted]", "created_utc": "1193856867", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 4, "author": "tierrie", "created_utc": "1193858440", "children": [{"controversiality": 0, "retrieved_on": 1427424857, "subreddit_id": "t5_2fwo", "created_utc": "1193858566", "ups": 2, "gilded": 0, "link_id": "t3_5zhs8", "downs": 0, "score": 2, "body": "Or a significantly more verbose version\n\n      for my $i (0..$#s) {\n        for my $j ($i..$#s) {\n          my $key = join( '', sort( split( /(\\w)/, $s[$i].$s[$j] ) ) );\n          if ( $seen{$key} ) {\n            print \"match: $s[$i] + $s[$j] matches $seen{$key}\\n\";\n          } else {\n            $seen{$key} = \"$s[$i] + $s[$j]\";\n          }\n        }    \n      }", "author": "tierrie", "archived": true, "distinguished": null, "edited": true, "id": "c02cfkz", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02cfkz", "parent_id": "t1_c02cfke", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427424845, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02cgl3", "gilded": 0, "link_id": "t3_5zhs8", "downs": 0, "score": 3, "score_hidden": false, "body": "With the noobs crying \"Perl is cryptic!\"\n\nWhile this density level is obviously counterproductive, it's fun to see.  Nice work.\n\nNot sure why you're splitting with a regex of '(\\w)', though.  An empty regex should also work and the capture buffer isn't used.\n\nTowards denser insanity:\n\n    for$i(0..$#s){for$j($i..$#s){$_=\"$s[$i]+$s[$j]\";$h{$k=join'',sort split//}?print\"$_=$h{$k}\":{$h{$k}=$_}}}", "author": "do-un-to", "created_utc": "1193866539", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 3, "parent_id": "t1_c02cfke", "id": "c02cgl3", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427424842, "subreddit_id": "t5_2fwo", "created_utc": "1193868175", "ups": 7, "gilded": 0, "link_id": "t3_5zhs8", "downs": 0, "score": 7, "id": "c02cgqc", "author": "MarshallBanana", "archived": true, "distinguished": null, "edited": false, "body": "What fun is Perl if it's *that* easy to read and understand?\n\nThis is how you do it:\n\n    print join\"\\n\",map{$k='a'x0xa0;(substr$k,$_,1)++for(map{ord$_}split//);($h{$k}&amp;&amp;\"$_=$h{$k}\")||($h{$k}=$_)&amp;&amp;()}map{$a=$s[$_];map\"$a+$_\",@s[0..$_-1]}(1..$#s);\n    print \"\\n\";\n\n", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02cgqc", "parent_id": "t1_c02cfke", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02cfke", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 4, "link_id": "t3_5zhs8", "retrieved_on": 1427424859, "id": "c02cfke", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02cfdz", "body": "All it takes is for one crazy perl programmer to say something like \n\n       (where @s = @states)\n       for$i(0..$#s){for$j($i..$#s){$h{$k=join('',sort(split(/(\\w)/,$s[$i].$s[$j])))}?(print\"$s[$i]+$s[$j]=\".$h{$k}):($h{$k}=\"$s[$i]+$s[$j]\");}}\n\nand suddenly everyone wants to leave the party. (run it!)", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 1, "name": "t1_c02cfdz", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zhs8", "retrieved_on": 1427424860, "score_hidden": false, "body": "Interesting improvement...\n\nI just thought the `sort` and the `lt` would limit the iteration, and make the code more readable.\n\nEDIT: I just got done changing the indexing the way you described.  For this test case, it takes more or less the same amount of time.  I am guessing the majority of the computation went to the `s2l` function.", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02cd8f", "id": "c02cfdz", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 3, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zhs8", "retrieved_on": 1427424889, "body": "No, because %hash contains the string of the pair of states that first showed up.\n\nWhat I recommend is cutting the iterations of the loops by half:\nfor my $i (0..$#states) {\n  for my $j ($i+1..$#states) {\n     $x= $states[$i];\n     $y= $states[$j];\n\nIf done that way, one can remove the sort'ing of the states as well, they do not need to be in order.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02cd8f", "parent_id": "t1_c02ccq2", "id": "c02cd8f", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02ccq2", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 3, "link_id": "t3_5zhs8", "retrieved_on": 1427424895, "id": "c02ccq2", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02cbki", "body": "Pretty good. . . but are you losing the information about what two states' names can be made from a second pair of states you find?  In other words, by just checking for a hash collision, don't you lose the information about what states were originally used to enter the (k,v) pair that you collided in to?", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": 1, "gilded": 0, "link_id": "t3_5zhs8", "retrieved_on": 1427424859, "score": 1, "body": "[deleted]", "id": "c02cfja", "author": "[deleted]", "created_utc": "1193858134", "distinguished": null, "edited": true, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02cfja", "parent_id": "t1_c02cbki", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 9, "name": "t1_c02cbki", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zhs8", "retrieved_on": 1427424909, "score_hidden": false, "body": "Also very manageable in perl:\n\n     my @states =\n       sort(qw(alabama alaska arizona arkansas california colorado\n        connecticut delaware florida georgia hawaii idaho\n        illinois indiana iowa kansas kentucky louisiana\n        maine maryland massachusetts michigan minnesota\n        mississippi missouri montana nebraska nevada\n        newhampshire newjersey newmexico newyork northcarolina\n        northdakota ohio oklahoma oregon pennsylvania rhodeisland\n        southcarolina southdakota tennessee texas utah vermont\n        virginia washington westvirginia wisconsin wyoming));\n\n     my %hash;\n     foreach my $x (@states) {\n       foreach my $y (@states) {\n         if ($x lt $y) {\n           my $letters = s2l(\"$x$y\");\n           if (!exists $hash{$letters}) {\n             $hash{$letters} = \"$x, $y\";\n           }\n           else {\n             print \"$x, $y; \", $hash{$letters}, \"\\n\";\n           }\n         }\n       }\n     }\n\n     sub s2l { join(\"\",sort(split(//,shift))); }\n", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5zhs8", "id": "c02cbki", "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427424909, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02cbm0", "gilded": 0, "link_id": "t3_5zhs8", "downs": 0, "score": 10, "score_hidden": false, "body": "&gt; Another comment on his post goes even further. Tom Moertel submits a solution implemented in Haskell. \n\nAnd for completeness, Tom posted cluster\\_by implementations for Python and Perl when programming.reddit.com last discussed this topic:\n\nhttp://programming.reddit.com/info/2l2sv/comments/c2l44s", "author": "[deleted]", "created_utc": "1193813586", "distinguished": null, "edited": true, "author_flair_text": null, "subreddit": "programming", "ups": 10, "parent_id": "t3_5zhs8", "id": "c02cbm0", "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427424908, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02cbnp", "gilded": 0, "link_id": "t3_5zhs8", "downs": 0, "score": 1, "score_hidden": false, "body": "[deleted]", "author": "[deleted]", "created_utc": "1193814439", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t3_5zhs8", "id": "c02cbnp", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -16, "author": "gigaquack", "created_utc": "1193816211", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 5, "author": "[deleted]", "created_utc": "1193816898", "children": [{"controversiality": 0, "retrieved_on": 1427424906, "subreddit_id": "t5_2fwo", "created_utc": "1193818906", "ups": -15, "gilded": 0, "link_id": "t3_5zhs8", "downs": 0, "score": -15, "body": "wrong.", "author": "gigaquack", "author_flair_text": null, "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit": "programming", "name": "t1_c02cbv2", "parent_id": "t1_c02cbry", "score_hidden": false, "id": "c02cbv2"}], "subreddit_id": "t5_2fwo", "ups": 5, "score_hidden": false, "controversiality": 0, "archived": true, "link_id": "t3_5zhs8", "retrieved_on": 1427424907, "id": "c02cbry", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02cbry", "parent_id": "t1_c02cbqv", "body": "Let me guess, you didn't read the article.", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1193839466", "ups": 14, "gilded": 0, "link_id": "t3_5zhs8", "retrieved_on": 1427424891, "score": 14, "body": "Paste your brain's source code, please, so we can verify.", "author": "pavel_lishin", "author_flair_text": null, "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit": "programming", "name": "t1_c02cczw", "parent_id": "t1_c02cbqv", "score_hidden": false, "id": "c02cczw"}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "bobbyi", "created_utc": "1193869652", "children": [{"controversiality": 0, "retrieved_on": 1427424840, "subreddit_id": "t5_2fwo", "archived": true, "gilded": 0, "link_id": "t3_5zhs8", "downs": 0, "score": 3, "score_hidden": false, "body": "including the time he wasted writing it? most impressive.", "author": "gigaquack", "created_utc": "1193870177", "distinguished": null, "edited": false, "id": "c02cgwm", "author_flair_text": null, "subreddit": "programming", "ups": 3, "parent_id": "t1_c02cguw", "name": "t1_c02cgwm", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 2, "score_hidden": false, "controversiality": 0, "archived": true, "link_id": "t3_5zhs8", "retrieved_on": 1427424841, "id": "c02cguw", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02cguw", "parent_id": "t1_c02cbqv", "body": "His program did it in 9 ms, so you lose.", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": -16, "controversiality": 0, "archived": true, "link_id": "t3_5zhs8", "retrieved_on": 1427424907, "id": "c02cbqv", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02cbqv", "parent_id": "t3_5zhs8", "body": "You don't need a program for that...\r\n\r\nNorth Dakota + South Carolina\r\n\r\nSouth Dakota + North Carolina\r\n\r\nThat took me all of 15 seconds.", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193817318", "name": "t1_c02cbsn", "gilded": 0, "link_id": "t3_5zhs8", "retrieved_on": 1427424906, "score": 1, "score_hidden": false, "id": "c02cbsn", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t3_5zhs8", "body": "[deleted]", "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427424906, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02cbuc", "gilded": 0, "link_id": "t3_5zhs8", "downs": 0, "score": 1, "score_hidden": false, "body": "So, C++ IS a low level language...", "author": "[deleted]", "created_utc": "1193818470", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t3_5zhs8", "id": "c02cbuc", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 12, "author": "bebnet", "created_utc": "1193820223", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 8, "author": "[deleted]", "created_utc": "1193827029", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "[deleted]", "created_utc": "1193833244", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 5, "author": "[deleted]", "created_utc": "1193834592", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "[deleted]", "created_utc": "1193835806", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 7, "author": "[deleted]", "created_utc": "1193836939", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "[deleted]", "created_utc": "1193851147", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 5, "author": "[deleted]", "created_utc": "1193851281", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "[deleted]", "created_utc": "1193851412", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "[deleted]", "created_utc": "1193851682", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1193856124", "ups": 1, "gilded": 0, "link_id": "t3_5zhs8", "retrieved_on": 1427424861, "score": 1, "body": "I already know who you are :)  My initial interpretation was wrong, but even under your meaning (if I understand correctly, that a tree implementation could never outperform an array-based hash table), there are cases (perhaps even many) where Judy will out-perform open addressed hash tables like Python's dictionary implementation due to Judy's significantly lower memory usage and its avoidance of large reallocs for resizing the hash table.", "author": "[deleted]", "author_flair_text": null, "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit": "programming", "name": "t1_c02cfam", "parent_id": "t1_c02ceo7", "score_hidden": false, "id": "c02cfam"}], "subreddit": "programming", "name": "t1_c02ceo7", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 2, "link_id": "t3_5zhs8", "retrieved_on": 1427424869, "id": "c02ceo7", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02cemf", "body": "&gt; As I recall, your comment wasn't edited when I read it.\n\nI fixed a typo or two, I didn't change the meaning (would the second sentence even make sense with your interpretation of the first?).  Heck, if you google my userid, do you see any signs that indicate that I *don't* know how fundamental data structures work?  Sheesh.", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02cemf", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5zhs8", "retrieved_on": 1427424870, "id": "c02cemf", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02celk", "body": "As I recall, your comment wasn't edited when I read it.", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02celk", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 5, "link_id": "t3_5zhs8", "retrieved_on": 1427424870, "body": "&gt; I'm saying that it's possible, in opposition to your statement that you didn't know how it would be possible to use a tree as a substitute for Python's dictionaries.\n\nNah, I didn't say that.  Try again, and make sure you read the *entire* sentence (including the part that begins with \"without\").  Stopping at the first comma doesn't really work.\n\n(and I get downmodded for asking people to read what I actually write instead of setting up strawmen?  nice.)", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02cekw", "id": "c02celk", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02cekw", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5zhs8", "retrieved_on": 1427424870, "id": "c02cekw", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02ccqk", "body": "I'm not saying it would buy you anything.  I'm saying that it's *possible*, in opposition to your statement that you didn't know how it would be *possible* to use a tree as a substitute for Python's dictionaries.\n\nI'm no expert in Judy, but if it saved anything, it would likely be memory usage (Python dictionaries still use open addressing, don't they?  That would mean that they must waste at least some memory to keep the load factor reasonably low) and perhaps in performance, based on the more compact Judy representation causing fewer cache misses.  Growing a Judy tree would also be cheaper than growing a hash table, since it doesn't involve reallocation of an entire array.\n\nChances are that these changes wouldn't really speed up Python's dictionaries; years of optimization have gone into them, so they're likely rather close to ideal for Python's needs.  But again, I never said that they would: I was only making the point that it would easily be possible to use a tree structure for such a task.  Whether it would gain anything in a competition of such highly optimized data structures is a question for benchmarks and profilers to answer, not me.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 7, "name": "t1_c02ccqk", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zhs8", "retrieved_on": 1427424895, "score_hidden": false, "body": "And that would buy me what?  In most situations, a Python dictionary needs *one* array lookup and *one* key object compare to locate the right object, no matter how big the dictionary is.  That's hard to beat.", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02ccn8", "id": "c02ccqk", "author_flair_css_class": null}], "subreddit": "programming", "ups": 1, "name": "t1_c02ccn8", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zhs8", "retrieved_on": 1427424895, "score_hidden": false, "body": "No, but Python objects are still pointers to objects with integer hash values.  You would have a JudyL tree mapping from the integer hash value to the PyObject* to the actual object.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02cck0", "id": "c02ccn8", "author_flair_css_class": null}], "subreddit": "programming", "ups": 5, "name": "t1_c02cck0", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zhs8", "retrieved_on": 1427424897, "score_hidden": false, "body": "&gt; A tree (rather, a level-compressed trie like Judy) can easily serve as a replacement for a dictionary; your keys are just hash values.\n\nI'm talking about a Python dictionary, not some arbitrary dictionary.  Python objects are not byte blobs.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02ccgv", "id": "c02cck0", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02ccgv", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 1, "link_id": "t3_5zhs8", "retrieved_on": 1427424898, "body": "&gt; I'm not sure how a tree could be used as a replacement for Python's own dictionary type\n\nA tree (rather, a level-compressed trie like Judy) can easily serve as a replacement for a dictionary; your keys are just hash values.  It's effectively used as a sparse array.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02cc7c", "id": "c02ccgv", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 8, "controversiality": 0, "archived": true, "link_id": "t3_5zhs8", "retrieved_on": 1427424901, "id": "c02cc7c", "author_flair_text": null, "distinguished": null, "edited": true, "name": "t1_c02cc7c", "parent_id": "t1_c02cbwz", "body": "&gt; BTW, any Python guru's know if libJudy is still being used at the core of any particular python implementations to do superlative hash management?\n\nStill?  I'm not sure how a tree could be used as a replacement for Python's own dictionary type, really, without killing any performance advantage the data structure itself might have (which is more hardware-related than algorithm-related).  And intuitively, even if it could be used without any extra overhead, I'm not convinced that it'd actually be a net win for most practical cases; see e.g. http://nothings.org/computer/judy/", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 13, "author": "cia_plant", "created_utc": "1193834719", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 9, "author": "[deleted]", "created_utc": "1193838639", "children": [{"controversiality": 0, "retrieved_on": 1427424886, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02cdcr", "gilded": 0, "link_id": "t3_5zhs8", "downs": 0, "score": 2, "score_hidden": false, "id": "c02cdcr", "author": "avigesaa", "created_utc": "1193842563", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 2, "parent_id": "t1_c02ccwt", "body": "See also: tr1::unordered_map", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 9, "controversiality": 0, "archived": true, "link_id": "t3_5zhs8", "retrieved_on": 1427424892, "id": "c02ccwt", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02ccwt", "parent_id": "t1_c02cck9", "body": "[deleted]", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 13, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zhs8", "retrieved_on": 1427424897, "body": "The STL has a dictionary class. It's called a \"map.\"\n\nI agree with you that one shouldn't rely on STL for everything, but it's not like it only supports \"vector\" - there's also map, list, set, multimap, multiset, deque, stack, queue, and priority_queue.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02cck9", "parent_id": "t1_c02cbwz", "id": "c02cck9", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 8, "author": "erikw", "created_utc": "1193834740", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": 1, "gilded": 0, "link_id": "t3_5zhs8", "retrieved_on": 1427424841, "score": 1, "body": "Yeah, dictionaries are central to Python's implementation of OOP, so I imagine they'd want to optimize the hell out of them.", "id": "c02cgtk", "author": "schizobullet", "created_utc": "1193869288", "distinguished": null, "edited": true, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02cgtk", "parent_id": "t1_c02cckd", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": 8, "name": "t1_c02cckd", "controversiality": 0, "archived": true, "link_id": "t3_5zhs8", "retrieved_on": 1427424897, "score_hidden": false, "id": "c02cckd", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02cbwz", "body": "The implementation of the python dict is described in chap 18. in [beautiful code](http://www.oreilly.com/catalog/9780596510046/toc.html). The dict has evolved over many years, and is a highly optimized part of python.\n\nI think pythons predecessor, ABC, used binary trees as a keyed container-type However this was inefficient, and GVR decided to use hash-tables when he designed python.", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427424849, "subreddit_id": "t5_2fwo", "author_flair_text": null, "name": "t1_c02cgc2", "gilded": 0, "link_id": "t3_5zhs8", "downs": 0, "score": 8, "score_hidden": false, "body": "&gt; I think then that the real point of this article is to never let ones chops dwindle in light of the library/built-in megalith that any language can over-provide; skipping around in languages is a pretty good way to defeat dwindling chop, then. At least, thats the point I got from this article ..\n\nExactly. I was a little surprised (and disappointed) to see so many people here interpret it as an attack on a particular language. The people who took it as excuse to  play the micro-optimization game and shave more milliseconds off the execution time have also completely missed the point.", "author": "thraxil", "created_utc": "1193864388", "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "ups": 8, "parent_id": "t1_c02cbwz", "id": "c02cgc2", "author_flair_css_class": null}], "subreddit": "programming", "ups": 12, "name": "t1_c02cbwz", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zhs8", "retrieved_on": 1427424905, "score_hidden": false, "body": "I dunno, I walk away from this article (metaphorically) with the feeling that the problem isn't so much that C++ programmers don't know their basics, just that they over-rely on the STL and all its semantics to solve the problem for them.\n\nI mean, all the loveliness of Pythons dictionary/tuple/hash list is all implemented, after all, in a pretty straight-forward C-based hash implementation.  I suppose I would have approached this problem by using plain ol' C, and throwing my already tried-and-true hash libs into the mix.  Not sure that it would have been cleaner, or less code, or even faster; but I am pretty sure that libJudy would've been as easy for me to use as a tuple would be for a Python user.\n\nI think then that the real point of this article is to never let ones chops dwindle in light of the library/built-in megalith that *any* language can over-provide; skipping around in languages is a pretty good way to defeat dwindling chop, then.  At least, thats the point I got from this article .. \n\nBTW, any Python guru's know if libJudy is still being used at the core of any particular python implementations to do superlative hash management?  libJudy has been a godsend for me, for quite a few years now, as one of the best rudimentary data structure bolt-ons in this C-programmers kit ..\n\n", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5zhs8", "id": "c02cbwz", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193826601", "name": "t1_c02cc6h", "gilded": 0, "link_id": "t3_5zhs8", "retrieved_on": 1427424901, "score": 1, "score_hidden": false, "body": "[deleted]", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t3_5zhs8", "id": "c02cc6h", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193827255", "ups": 1, "gilded": 0, "link_id": "t3_5zhs8", "retrieved_on": 1427424901, "score": 1, "score_hidden": false, "body": "[deleted]", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02cc7o", "parent_id": "t3_5zhs8", "id": "c02cc7o", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 22, "author": "Vorlath", "created_utc": "1193828818", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "dugmartin", "created_utc": "1193834260", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 12, "author": "llimllib", "created_utc": "1193835975", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "MarkByers", "created_utc": "1193843363", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": 28, "gilded": 0, "link_id": "t3_5zhs8", "retrieved_on": 1427424876, "score": 28, "body": "I like that! Unsafe and insignificantly faster -- The whole essence of C++.", "id": "c02ce5a", "author": "hanzie", "created_utc": "1193848399", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02ce5a", "parent_id": "t1_c02cdfm", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": 2, "name": "t1_c02cdfm", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zhs8", "retrieved_on": 1427424885, "score_hidden": false, "body": "Fine! Then save lots of comparisons and don't check the upper limit at all!\n\n(Edit: what's the point of saving a single comparison anyway? Does it really matter?)", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02ccnm", "id": "c02cdfm", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 12, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zhs8", "retrieved_on": 1427424895, "body": "As long as the puzzle is solvable, that state will never be hit and he won't save any compares.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02ccnm", "parent_id": "t1_c02ccj9", "id": "c02ccnm", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02ccj9", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5zhs8", "retrieved_on": 1427424897, "id": "c02ccj9", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02cc9o", "body": "Save yourself one more compare, change the \"i&lt;50\" to \"i&lt;49\".\n", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193835196", "name": "t1_c02cclo", "gilded": 0, "link_id": "t3_5zhs8", "retrieved_on": 1427424897, "score": 14, "score_hidden": false, "id": "c02cclo", "author": "Rhoomba", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 14, "parent_id": "t1_c02cc9o", "body": "Don't be crazy, C++ has to suck!", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 4, "author": "zem", "created_utc": "1193845188", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 7, "author": "javaru", "created_utc": "1193846461", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1193848320", "ups": 5, "gilded": 0, "link_id": "t3_5zhs8", "retrieved_on": 1427424876, "score": 5, "body": "You must've missed the revolution. The real world isn't *en vogue* anymore.", "id": "c02ce4t", "author": "finix", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "name": "t1_c02ce4t", "parent_id": "t1_c02cduu", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": 7, "name": "t1_c02cduu", "controversiality": 0, "archived": true, "link_id": "t3_5zhs8", "retrieved_on": 1427424880, "score_hidden": false, "id": "c02cduu", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02cdoq", "body": "so what if its the same big O, it still takes twice the time by avoiding an obvious shortcut. ", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 4, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zhs8", "retrieved_on": 1427424882, "body": "2 is a constant factor", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02cdoq", "parent_id": "t1_c02cc9o", "id": "c02cdoq", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 20, "author": "thraxil", "created_utc": "1193846149", "children": [{"controversiality": 0, "retrieved_on": 1427424876, "subreddit_id": "t5_2fwo", "created_utc": "1193848631", "ups": 3, "gilded": 0, "link_id": "t3_5zhs8", "downs": 0, "score": 3, "id": "c02ce6d", "author": "Rhoomba", "archived": true, "distinguished": null, "edited": false, "body": "I don't think it is the only naive solution. The naive (and stupid) solution that occurred to me first was to generate lots of permutations of the letters and look for matches. I would guess that is what the original C++ guy did.\n\nOnce you realise the problem is \"find the pairs that contain the same letters\" the naive solution is going to be pretty much the same in any language that has dictionarys/hashtables/associative arrays.", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02ce6d", "parent_id": "t1_c02cdtd", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "name": "t1_c02cdtd", "controversiality": 0, "author_flair_text": null, "ups": 20, "link_id": "t3_5zhs8", "retrieved_on": 1427424880, "body": "It's not bragging about the algorithm. The point is that in Python, it's the simple, naive solution and yet is still \"fast enough\". The code is a first-pass, one-off solution. The kind of thing that scripting languages are ideal for. Since in my mind, the algorithm started with \"take the cartesian product of states x states\" simply looping over the list twice and then throwing out duplicates was sufficient and the most obvious approach. Fretting about loop indices on a one-off program strikes me as a premature micro-optimization. ", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02cc9o", "id": "c02cdtd", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c02ce35", "gilded": 0, "link_id": "t3_5zhs8", "retrieved_on": 1427424877, "score": 4, "body": "Why did you use a vendor-specific string class? std::string is fine. And you could've written sort(letters.begin(), letters.end()) ;P", "id": "c02ce35", "author": "hanzie", "created_utc": "1193848050", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 4, "parent_id": "t1_c02cc9o", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 1, "gilded": 0, "link_id": "t3_5zhs8", "retrieved_on": 1427424875, "score": 1, "body": "Nice.\n\nThough I have to wonder: does Borland's String return a non-const pointer for c_str? I'd expected to see simply begin() &amp; end()...", "author": "finix", "created_utc": "1193848732", "distinguished": null, "edited": false, "id": "c02ce6t", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02ce6t", "parent_id": "t1_c02cc9o", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427424849, "subreddit_id": "t5_2fwo", "created_utc": "1193864166", "ups": 1, "gilded": 0, "link_id": "t3_5zhs8", "downs": 0, "score": 1, "id": "c02cgaz", "author": "nasorenga", "archived": true, "distinguished": null, "edited": false, "body": "I tried it on a 1GHz linux box: 4 ms", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02cgaz", "parent_id": "t1_c02cc9o", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427424845, "subreddit_id": "t5_2fwo", "created_utc": "1193866449", "ups": 2, "gilded": 0, "link_id": "t3_5zhs8", "downs": 0, "score": 2, "body": "Hint: Sorting two sorted strings is faster than sorting them all over again and again.\n", "author": "DKKat", "archived": true, "distinguished": null, "edited": false, "id": "c02cgkq", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02cgkq", "parent_id": "t1_c02cc9o", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02cc9o", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 22, "link_id": "t3_5zhs8", "retrieved_on": 1427424900, "body": "&gt;To me, that Python code is about as simple and direct as it gets.\r\n\r\nI don't get it.  It's bragging about the algorithm, yet it checks for duplicates and takes twice as long as it should.  There's no need for the inner loop to start at the first entry.  It can start at the item after the outer loop's index.\r\n\r\nI'm using Borland's String class (System.hpp), but you can use whatever.  Guess what language this is!\r\n\r\n    #include &lt;System.hpp&gt;\r\n    #include &lt;algorithm&gt;\r\n    #include &lt;map&gt;\r\n    \r\n    using namespace std;\r\n    \r\n    \r\n    String states[50] = {\"alabama\",\"alaska\",\"arizona\",\"arkansas\",\"california\",\r\n    \"colorado\",\"connecticut\",\"delaware\",\"florida\",\"georgia\",\"hawaii\",\r\n    \"idaho\",\"illinois\",\"indiana\",\"iowa\",\"kansas\",\"kentucky\",\"louisiana\",\r\n    \"maine\",\"maryland\",\"massachusetts\",\"michigan\",\"minnesota\",\"mississippi\",\r\n    \"missouri\",\"montana\",\"nebraska\",\"nevada\",\"newhampshire\",\"newjersey\",\r\n    \"newmexico\",\"newyork\",\"northcarolina\",\"northdakota\",\"ohio\",\"oklahoma\",\r\n    \"oregon\",\"pennsylvania\",\"rhodeisland\",\"southcarolina\",\"southdakota\",\r\n    \"tennessee\",\"texas\",\"utah\",\"vermont\",\"virginia\",\"washington\",\"westvirginia\",\r\n    \"wisconsin\",\"wyoming\"};\r\n    \r\n    int main(int argc, char* argv[]) {\r\n      typedef pair&lt;int, int&gt; StatesPair;\r\n      typedef map&lt;String, StatesPair&gt; StatesMap;\r\n      StatesMap keys;\r\n\r\n      for (int i=0; i&lt;50; i++) {\r\n        for (int j=i+1; j&lt;50; j++) {\r\n          String letters = states[i] + states[j];\r\n          sort(letters.c_str(),letters.c_str()+letters.Length());\r\n          StatesMap::iterator k = keys.find(letters);\r\n          if (k==keys.end()) {\r\n            // Add it.\r\n            keys.insert(StatesMap::value_type(letters, StatesPair(i,j)));\r\n          }\r\n          else {\r\n             // Found it.\r\n             printf(\"Found: %s %s, %s %s\\n\", states[i], states[j], states[k-&gt;second.first], states[k-&gt;second.second]);\r\n             return 0;\r\n          }\r\n        }\r\n      }\r\n      return 0;\r\n    }\r\n\r\nedit: used pair instead of a int.", "archived": true, "distinguished": null, "edited": true, "parent_id": "t3_5zhs8", "id": "c02cc9o", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 45, "author": "kalven", "created_utc": "1193830683", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193869445", "name": "t1_c02cgu9", "gilded": 0, "link_id": "t3_5zhs8", "retrieved_on": 1427424841, "score": -2, "score_hidden": false, "body": "You know, that wasn't the point of the article.  Read it again.", "author": "eoliveri", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": -2, "parent_id": "t1_c02ccca", "id": "c02cgu9", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02ccca", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 45, "link_id": "t3_5zhs8", "retrieved_on": 1427424899, "body": "This just in: algorithmic complexity matters!\n", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5zhs8", "id": "c02ccca", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 9, "author": "FeepingCreature", "created_utc": "1193832935", "children": [{"controversiality": 0, "retrieved_on": 1427424874, "subreddit_id": "t5_2fwo", "created_utc": "1193849363", "ups": 3, "gilded": 0, "link_id": "t3_5zhs8", "downs": 0, "score": 3, "body": "And here's the completely incomprehensible version using zip, map and cross (from the scrapple.tools library). 13ms on my box :)\n\n&gt;     import tools.log, tools.base, tools.functional;\n&gt;     void main() {\n\n&gt;       auto states = [\"alabama\"[],\"alaska\",\"arizona\",\"arkansas\",\"california\",\"colorado\",\n&gt;         \"connecticut\",\"delaware\",\"florida\",\"georgia\",\"hawaii\",\"idaho\",\n&gt;         \"illinois\",\"indiana\",\"iowa\",\"kansas\",\"kentucky\",\"louisiana\",\n&gt;         \"maine\",\"maryland\",\"massachusetts\",\"michigan\",\"minnesota\",\n&gt;         \"mississippi\",\"missouri\",\"montana\",\"nebraska\",\"nevada\",\n&gt;         \"newhampshire\",\"newjersey\",\"newmexico\",\"newyork\",\"northcarolina\",\n&gt;         \"northdakota\",\"ohio\",\"oklahoma\",\"oregon\",\"pennsylvania\",\"rhodeisland\",\n&gt;         \"southcarolina\",\"southdakota\",\"tennessee\",\"texas\",\"utah\",\"vermont\",\n&gt;         \"virginia\",\"washington\",\"westvirginia\",\"wisconsin\",\"wyoming\"];\n&gt;       Stuple!(string, string)[string] seen;\n&gt;       auto pairs=states /cross/ states;\n&gt;       pairs /map/ &amp;concat!(string) /map/ &amp;member!(string, \"sort\") /zip/ pairs\n&gt;       /map/ (string s, Stuple!(string, string) pair) {\n&gt;         if (s in seen) {\n&gt;           if (seen[s]==stuple(pair.values[1], pair.values[0])) return;\n&gt;           with (seen[s])\n&gt;             logln(\"Pair: \", pair.values[0], \": \", pair.values[1], \" vs \", values[0], \": \", values[1]);\n&gt;         } else seen[s]=pair;\n&gt;       };\n&gt;     }\n&gt; \n", "author": "FeepingCreature", "archived": true, "distinguished": null, "edited": true, "id": "c02ceab", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02ceab", "parent_id": "t1_c02ccgb", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02ccgb", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 9, "link_id": "t3_5zhs8", "retrieved_on": 1427424898, "id": "c02ccgb", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t3_5zhs8", "body": "Of course, being who I am, I have to post a D version now.\nIt's an almost literal port of the Python version. :)\n\nhttp://pastebin.ca/756334", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "author_flair_text": null, "name": "t1_c02cch7", "gilded": 0, "link_id": "t3_5zhs8", "retrieved_on": 1427424898, "score": 15, "score_hidden": false, "body": "I took mississippi and massachusetts and got...\n\n&gt; Is a spastics shut pessimism.\n\nIs that one of those small southern states?", "author": "[deleted]", "created_utc": "1193833379", "distinguished": null, "edited": true, "archived": true, "subreddit": "programming", "ups": 15, "parent_id": "t3_5zhs8", "id": "c02cch7", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 5, "gilded": 0, "link_id": "t3_5zhs8", "retrieved_on": 1427424897, "score": 5, "body": "The python implementation in the article could be improved a bit:\n\n    from collections import defaultdict\n    states = [...]\n    bag = defaultdict(list)\n    for i, state1 in enumerate(states):\n        for state2 in states[i:]:\n            key = ''.join(sorted(state1+state2))\n            if key in bag:\n                for old1, old2 in bag[key]:\n                    print \"%s,%s=%s,%s\" % (old1, old2, state1, state2)\n            bag[key].append((state1, state2))\n\nStill there is one list copy operation for each iteration.\n\nMust resist...  Must get back to work...", "author": "erikw", "created_utc": "1193833754", "distinguished": null, "edited": false, "id": "c02cci3", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02cci3", "parent_id": "t3_5zhs8", "score_hidden": false, "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427424897, "subreddit_id": "t5_2fwo", "created_utc": "1193835258", "ups": 23, "gilded": 0, "link_id": "t3_5zhs8", "downs": 0, "score": 23, "body": "&gt; I'm waiting for a Prolog programmer to come along and smoke everyone next.\n\nI gave it a shot:\n\n    enum(X:Y, [X|R]) :- member(Y,R).\n    enum(X:Y, [_|R]) :- enum(X:Y, R).\n    mypermutation(X, Y) :- sort0(X,Z), sort0(Y,Z).\n\n    test(States, Res) :-\n    \tfindall(E, (enum(E1:E2, States), append(E1,E2,E)), L),\n    \tfindall(E1:E2, (enum(E1:E2, L), mypermutation(E1, E2)), Res).\n\nCall:\n\n    test([\"alabama\", \"alaska\", ..., \"wyoming\"], Res).\n\nUnfortunately it's terribly slow.  Any ideas for improvements?", "author": "[deleted]", "archived": true, "distinguished": null, "edited": true, "id": "c02cclr", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02cclr", "parent_id": "t3_5zhs8", "score_hidden": false, "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 9, "author": "[deleted]", "created_utc": "1193840196", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "[deleted]", "created_utc": "1193841013", "children": [{"controversiality": 0, "retrieved_on": 1427424887, "subreddit_id": "t5_2fwo", "author_flair_text": null, "name": "t1_c02cdbn", "gilded": 0, "link_id": "t3_5zhs8", "downs": 0, "score": 1, "score_hidden": false, "body": "[deleted]", "author": "[deleted]", "created_utc": "1193842305", "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "ups": 1, "parent_id": "t1_c02cd6c", "id": "c02cdbn", "author_flair_css_class": null}], "subreddit": "programming", "ups": 2, "name": "t1_c02cd6c", "controversiality": 0, "archived": true, "link_id": "t3_5zhs8", "retrieved_on": 1427424890, "score_hidden": false, "id": "c02cd6c", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02cd2r", "body": "Ooops, I forgot to break after I found the answer, it improved my time to 47ms", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "marklubi", "created_utc": "1193842550", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": 1, "gilded": 0, "link_id": "t3_5zhs8", "retrieved_on": 1427424885, "score": 1, "body": "I replaced it with 50, but it didn't change the time.  I'm sure when it gets compiled, it would compile it to 50 anyway", "id": "c02cdgn", "author": "[deleted]", "created_utc": "1193843554", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02cdgn", "parent_id": "t1_c02cdcn", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427424879, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02cdxg", "gilded": 0, "link_id": "t3_5zhs8", "downs": 0, "score": 1, "score_hidden": false, "body": "Even if that's an optimization at all, it should probably be called a yocto-optimization.. Compare the time taken by sorting an array among other things inside the loop body to a simple field access.", "author": "hanzie", "created_utc": "1193846889", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c02cdcn", "id": "c02cdxg", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02cdcn", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5zhs8", "retrieved_on": 1427424886, "id": "c02cdcn", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02cd2r", "body": "you can probably decrease that time further by hoisting the states.length out of the for loops.", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 2, "gilded": 0, "link_id": "t3_5zhs8", "retrieved_on": 1427424885, "score": 2, "id": "c02cdi4", "author": "dergeist", "created_utc": "1193843859", "distinguished": null, "edited": false, "body": "Can't you also set j=i+1 in the inner loop? I don't see the need to compare each state to itself.\n\nCorrect me if I'm wrong.", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02cdi4", "parent_id": "t1_c02cd2r", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193847694", "name": "t1_c02ce21", "gilded": 0, "link_id": "t3_5zhs8", "retrieved_on": 1427424877, "score": 2, "score_hidden": false, "body": "Here's a groovy version I put together which ended up being pretty much what you did in java:\n\n\tstates = [\"alabama\",\"alaska\",\"arizona\",\"arkansas\",\"california\",\"colorado\",\"connecticut\",\"delaware\",\"florida\",\"georgia\",\"hawaii\",\"idaho\",\"illinois\",\"indiana\",\"iowa\",\"kansas\",\"kentucky\",\"louisiana\",\"maine\",\"maryland\",\"massachusetts\",\"michigan\",\"minnesota\",\"mississippi\",\"missouri\",\"montana\",\"nebraska\",\"nevada\",\"newhampshire\",\"newjersey\",\"newmexico\",\"newyork\",\"northcarolina\",\"northdakota\",\"ohio\",\"oklahoma\",\"oregon\",\"pennsylvania\",\"rhodeisland\",\"southcarolina\",\"southdakota\",\"tennessee\",\"texas\",\"utah\",\"vermont\",\"virginia\",\"washington\",\"westvirginia\",\"wisconsin\",\"wyoming\"]\n\ttriedPair = [:]\n\tstart = System.currentTimeMillis()\n\tstates[0..(states.size() - 2)].eachWithIndex { first, i -&gt;\n\t    states[(i + 1)..(states.size() - 1)].each { second -&gt;\n\t        sortedPair = \"$first$second\".split(\"\").toList().sort().join()\n\t        if (triedPair[sortedPair]) {\n\t            println \"Found [$first, $second] matching ${triedPair[sortedPair]}, took ${System.currentTimeMillis() - start}\"; return\n\t        }\n\t        triedPair[sortedPair] = [first, second]\n\t    }\n\t}", "author": "freshgroundpepper", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 2, "parent_id": "t1_c02cd2r", "id": "c02ce21", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 5, "author": "derekslager", "created_utc": "1193858393", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "Rhoomba", "created_utc": "1193863567", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "author_flair_text": null, "name": "t1_c02cgur", "gilded": 0, "link_id": "t3_5zhs8", "retrieved_on": 1427424841, "score": 1, "score_hidden": false, "id": "c02cgur", "author": "derekslager", "created_utc": "1193869627", "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "ups": 1, "parent_id": "t1_c02cg80", "body": "The separate containsKey / get operations are probably a factor as well.", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 2, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zhs8", "retrieved_on": 1427424850, "body": "The unnecessary string concat and new strings in the Java version probably aren't helping. \n\nConcatenating a string, getting the char array, and creating a new string will cause three separate array creations and copies. A custom class would almost certainly be faster.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02cg80", "parent_id": "t1_c02cfk5", "id": "c02cg80", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 5, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zhs8", "retrieved_on": 1427424859, "body": "My C# version of the Python solution takes &lt; 5ms. That's somewhat misleading, though, since your Java solution with the break-after-find fix takes 16ms on the same hardware.\n\n        var seen = new Dictionary&lt;string, Tuple&lt;string, string&gt;&gt;();\n\n        foreach (var state1 in states) {\n            foreach (var state2 in states) {\n                if (state1 == state2) continue;\n\n                var chars = (state1 + state2).ToCharArray();\n                Array.Sort(chars);\n                var key = new String(chars);\n\n                Tuple&lt;string, string&gt; tuple;\n                if (seen.TryGetValue(key, out tuple)) {\n                    if (tuple.A == state2 &amp;&amp; tuple.B == state1) {\n                        continue;\n                    } else {\n                        Console.WriteLine(\"found it \" + state1 + \" + \" + state2 + \", \" + tuple.A + \" + \" + tuple.B);\n                    }\n                    return;\n                } else {\n                    seen.Add(key, new Tuple&lt;string, string&gt;(state1, state2));\n                }\n            }\n        }", "archived": true, "distinguished": null, "edited": true, "name": "t1_c02cfk5", "parent_id": "t1_c02cd2r", "id": "c02cfk5", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 9, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zhs8", "retrieved_on": 1427424890, "body": "Here's my Java Solution:\n\nIt ran in 63 milliseconds.\n\n\n    \tString states[] = {\"alabama\",\"alaska\",\"arizona\",\"arkansas\",\"california\",\"colorado\",\n        \"connecticut\",\"delaware\",\"florida\",\"georgia\",\"hawaii\",\"idaho\",\n        \"illinois\",\"indiana\",\"iowa\",\"kansas\",\"kentucky\",\"louisiana\",\n        \"maine\",\"maryland\",\"massachusetts\",\"michigan\",\"minnesota\",\n        \"mississippi\",\"missouri\",\"montana\",\"nebraska\",\"nevada\",\n        \"newhampshire\",\"newjersey\",\"newmexico\",\"newyork\",\"northcarolina\",\n        \"northdakota\",\"ohio\",\"oklahoma\",\"oregon\",\"pennsylvania\",\"rhodeisland\",\n        \"southcarolina\",\"southdakota\",\"tennessee\",\"texas\",\"utah\",\"vermont\",\n        \"virginia\",\"washington\",\"westvirginia\",\"wisconsin\",\"wyoming\"};\n    \tdouble start = System.currentTimeMillis();\n    \tchar[] scramble;\n    \tString[] currentCity;\n    \tHashMap dictionary = new HashMap();\n    \tfor (int i=0;i&lt;states.length;i++) {\n    \t\tfor (int j=i;j&lt;states.length;j++) {\n    \t\t\tscramble = (states[i]+states[j]).toCharArray();\n    \t\t\tArrays.sort(scramble);\n    \t\t\tif (dictionary.containsKey(new String(scramble)))\n    \t\t\t\tSystem.out.println(states[i]+\",\"+states[j]+\" gives you \" + dictionary.get(new String(scramble)));\n    \t\t\telse\n    \t\t\t\tdictionary.put((new String(scramble)), states[i]+\",\"+states[j]);\n    \t\t}\n    \t}\n    \tSystem.out.println(\"Took system \" + (System.currentTimeMillis() - start));\n\n", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02cd2r", "parent_id": "t3_5zhs8", "id": "c02cd2r", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 5, "author": "shenglong", "created_utc": "1193840741", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 9, "author": "shenglong", "created_utc": "1193843726", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 0, "author": "martinbishop", "created_utc": "1193851685", "children": [{"controversiality": 0, "retrieved_on": 1427424868, "subreddit_id": "t5_2fwo", "author_flair_text": null, "name": "t1_c02ceqg", "gilded": 0, "link_id": "t3_5zhs8", "downs": 0, "score": 11, "score_hidden": false, "body": "The premise of the problem is that they have to be two other states. Returning the same states in a different order isn't a proper solution.", "author": "sn0re", "created_utc": "1193852109", "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "ups": 11, "parent_id": "t1_c02ceo8", "id": "c02ceqg", "author_flair_css_class": null}], "subreddit": "programming", "ups": 0, "score_hidden": false, "controversiality": 0, "archived": true, "link_id": "t3_5zhs8", "retrieved_on": 1427424869, "id": "c02ceo8", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02ceo8", "parent_id": "t1_c02cdhe", "body": "What about New York and New Jersey, and New Jersey and New York? :)", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193858112", "name": "t1_c02cfj3", "gilded": 0, "link_id": "t3_5zhs8", "retrieved_on": 1427424859, "score": 1, "score_hidden": false, "body": "Basically, but it depends how you want to consider the solution. If the solution is a set of two that can be reformed correctly, then yes, two answers - \"SC and ND\" or \"SD and NC.\"\n\nIf the solution is a matched set of two pairs of states that are equivalent, then there's one answer - \"SC/ND = NC/SD\"\n\nThe way the question is worded makes it ambiguous as to whether it's asking for all four states or just the two initial ones. ", "author": "psyne", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c02cdhe", "id": "c02cfj3", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 9, "controversiality": 0, "archived": true, "link_id": "t3_5zhs8", "retrieved_on": 1427424885, "id": "c02cdhe", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02cdhe", "parent_id": "t1_c02cd57", "body": "I don't understand the downmodding.\n\nAnswer 1: South Carolina, North Dakota\nAnswer 2: North Carolina, South Dakota.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02cd57", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 5, "link_id": "t3_5zhs8", "retrieved_on": 1427424890, "body": "Aren't there technically two solutions to this problem?", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5zhs8", "id": "c02cd57", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "Slipgrid", "created_utc": "1193841366", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 6, "author": "[deleted]", "created_utc": "1193851512", "children": [{"controversiality": 0, "retrieved_on": 1427424869, "subreddit_id": "t5_2fwo", "created_utc": "1193851680", "ups": 5, "gilded": 0, "link_id": "t3_5zhs8", "downs": 0, "score": 5, "id": "c02ceo6", "author": "Slipgrid", "archived": true, "distinguished": null, "edited": false, "body": "I agree.  Tell that to the kids here who think for loops should be removed from C.", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02ceo6", "parent_id": "t1_c02cen9", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": 6, "name": "t1_c02cen9", "controversiality": 0, "archived": true, "link_id": "t3_5zhs8", "retrieved_on": 1427424869, "score_hidden": false, "id": "c02cen9", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02cd7n", "body": "Or just use high-level data structures in C++.  For such (small) tasks made easy by high-level data structure, C++ generally results in around the same number of lines as Python (never fewer, but never significantly more, either)", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 2, "controversiality": 0, "archived": true, "link_id": "t3_5zhs8", "retrieved_on": 1427424889, "id": "c02cd7n", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02cd7n", "parent_id": "t3_5zhs8", "body": "The point should be to use the right tools for the problem.  If you want to build a high level scripting language, then you should use C or C++.  If you want to solve a simple puzzle, then use the high level programming language you built with C or C++.", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": 11, "gilded": 0, "link_id": "t3_5zhs8", "retrieved_on": 1427424886, "score": 11, "body": "Erlang.  Runs in ~17 ms.\n\n    solve() -&gt;\n        Dict = dict:new(),\n        solve(Dict, states()).\n\n    solve(_Dict, []) -&gt;\n        false;\n    solve(Dict, [Hstate|T]) -&gt;\n        solve(Dict, Hstate, T, T).\n\n    solve(Dict, _State, Statelist, []) -&gt;\n        solve(Dict, Statelist);\n    solve(Dict, State, Statelist, [Hstate|T]) -&gt;\n        Letters = lists:sort(atom_to_list(State) ++ atom_to_list(Hstate)),\n        case dict:is_key(Letters, Dict) of\n            true -&gt; \n                {{State, Hstate}, dict:fetch(Letters, Dict)};\n            false -&gt;\n                solve(dict:append(Letters, {State, Hstate}, Dict), \n                      State, Statelist, T)\n        end.", "id": "c02cdeh", "author": "TheManWithNoName", "created_utc": "1193843062", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02cdeh", "parent_id": "t3_5zhs8", "score_hidden": false, "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427424885, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02cdf2", "gilded": 0, "link_id": "t3_5zhs8", "downs": 0, "score": 7, "score_hidden": false, "id": "c02cdf2", "author": "DannoHung", "created_utc": "1193843276", "distinguished": null, "edited": true, "author_flair_text": null, "subreddit": "programming", "ups": 7, "parent_id": "t3_5zhs8", "body": "APL like languages win!\n\nq)s:(\"alabama\";\"arkansas\"....)\n\nq)p[m where (count each m:value group a:asc each  p: s cross s) &gt; 2]\n\n\"northcarolinasouthdakota\" \"northdakotasouthcarolina\" \"southcarolinanorthdakota\" \"southdakotanorthcarolina\"", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193849884", "ups": -5, "gilded": 0, "link_id": "t3_5zhs8", "retrieved_on": 1427424873, "score": -5, "score_hidden": false, "id": "c02ced7", "author": "[deleted]", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02ced7", "parent_id": "t3_5zhs8", "body": "[deleted]", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1193851433", "ups": 2, "gilded": 0, "link_id": "t3_5zhs8", "retrieved_on": 1427424870, "score": 2, "body": "print \"North Carolina, South Dakota\"\r\n\r\nThere you go. ;)", "id": "c02ceml", "author": "Kolibri", "author_flair_text": null, "distinguished": null, "edited": true, "archived": true, "subreddit": "programming", "name": "t1_c02ceml", "parent_id": "t3_5zhs8", "score_hidden": false, "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427424861, "subreddit_id": "t5_2fwo", "created_utc": "1193856159", "ups": 2, "gilded": 0, "link_id": "t3_5zhs8", "downs": 0, "score": 2, "id": "c02cfas", "author": "RetroRock", "archived": true, "distinguished": null, "edited": true, "body": "PHP :)\n\n\t$states = array ('alabama','alaska','arizona','arkansas','california','colorado',\n\t\t\t  'connecticut','delaware','florida','georgia','hawaii','idaho',\n\t\t\t  'illinois','indiana','iowa','kansas','kentucky','louisiana',\n\t\t\t  'maine','maryland','massachusetts','michigan','minnesota',\n\t\t\t  'mississippi','missouri','montana','nebraska','nevada',\n\t\t\t  'newhampshire','newjersey','newmexico','newyork','northcarolina',\n\t\t\t  'northdakota','ohio','oklahoma','oregon','pennsylvania','rhodeisland',\n\t\t\t  'southcarolina','southdakota','tennessee','texas','utah','vermont',\n\t\t\t  'virginia','washington','westvirginia','wisconsin','wyoming');\n\t$seen = array ();\n\tforeach($states as $state1)\n\t{\n\t\tforeach($states as $state2)\n\t\t{\n\t\t\tif ($state1 != $state2)\n\t\t\t{\n\t\t\t\t$letters = str_split($state1 . $state2);\n\t\t\t\tsort($letters);\n\t\t\t\t$letters = implode('', $letters);\n\n\t\t\t\tif (isset($seen[$letters])  &amp;&amp; ($seen[$letters][1] != $state2 &amp;&amp; $seen[$letters][1] != $state2))\n\t\t\t\t{\n\t\t\t\t\texit($state1 . ' and ' . $state2 . ' become ' . $seen[$letters][1] . ' and ' . $seen[$letters][2]);\n\t\t\t\t}\n\n\t\t\t\t$seen[$letters] = array ('1' =&gt; $state1, '2' =&gt; $state2);\n\t\t\t}\n\t\t}\n\t}\n", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02cfas", "parent_id": "t3_5zhs8", "score_hidden": false, "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427424859, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02cfir", "gilded": 0, "link_id": "t3_5zhs8", "downs": 0, "score": 1, "score_hidden": false, "id": "c02cfir", "author": "[deleted]", "created_utc": "1193858009", "distinguished": null, "edited": true, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t3_5zhs8", "body": "[deleted]", "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427424852, "subreddit_id": "t5_2fwo", "created_utc": "1193861615", "ups": 1, "gilded": 0, "link_id": "t3_5zhs8", "downs": 0, "score": 1, "body": "Yay, wasted 20 minutes to find out that with the C++ model I first came up with it would take 500ms to complete. I'm a complete amateur though, so I'll just go ahead and be proud now.", "author": "[deleted]", "archived": true, "distinguished": null, "edited": true, "id": "c02cfyr", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02cfyr", "parent_id": "t3_5zhs8", "score_hidden": false, "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427424850, "subreddit_id": "t5_2fwo", "created_utc": "1193863345", "ups": 1, "gilded": 0, "link_id": "t3_5zhs8", "downs": 0, "score": 1, "body": "[deleted]", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "id": "c02cg76", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02cg76", "parent_id": "t3_5zhs8", "score_hidden": false, "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1193863368", "ups": 1, "gilded": 0, "link_id": "t3_5zhs8", "retrieved_on": 1427424850, "score": 1, "body": "[deleted]", "id": "c02cg7b", "author": "[deleted]", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "name": "t1_c02cg7b", "parent_id": "t3_5zhs8", "score_hidden": false, "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "author_flair_text": null, "name": "t1_c02cg9k", "gilded": 0, "link_id": "t3_5zhs8", "retrieved_on": 1427424849, "score": 1, "score_hidden": false, "id": "c02cg9k", "author": "[deleted]", "created_utc": "1193863953", "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "ups": 1, "parent_id": "t3_5zhs8", "body": "[deleted]", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": 7, "gilded": 0, "link_id": "t3_5zhs8", "retrieved_on": 1427424846, "score": 7, "body": "A bit off-topic from the complexity question, I found the solution using vim, sort, and uniq.  Took me about 25 minutes.\n\nWhy do I feel proud and embarrassed at the same time?", "id": "c02cghp", "author": "ttoyooka", "created_utc": "1193865771", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02cghp", "parent_id": "t3_5zhs8", "score_hidden": false, "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02cgyq", "gilded": 0, "link_id": "t3_5zhs8", "retrieved_on": 1427424839, "score": 8, "created_utc": "1193870782", "id": "c02cgyq", "author": "[deleted]", "author_flair_text": null, "distinguished": null, "edited": false, "body": "I asked this on the article directly but I figure I may get more feedback here...\n\nIt took me a while to understand what the puzzle was asking me to solve. Is that a sign I\u2019m a poor programmer? I mean, I had a suspicion which turned out to be correct, but it took me probably 15\u201320 minutes to confirm it (after rewriting the author\u2019s script in Ruby).\n\nI\u2019m always curious how great programmers think and solve problems, and to be honest, it worries me that you were able to \u201cimmediately stop reading,\u201d take five minutes and have it solved. In other words, I feel pretty slow sometimes.\n\nDid anyone else take a moment to \u201cgear up\u201d to solve the puzzle?", "subreddit_id": "t5_2fwo", "score_hidden": false, "parent_id": "t3_5zhs8", "ups": 8, "author_flair_css_class": null}
{"distinguished": null, "controversiality": 0, "downs": 0, "subreddit": "programming", "ups": 1, "archived": true, "name": "t1_c02ch9v", "gilded": 0, "link_id": "t3_5zhs8", "retrieved_on": 1427424835, "score": 1, "id": "c02ch9v", "author": "eibat", "created_utc": "1193873858", "author_flair_text": null, "edited": true, "subreddit_id": "t5_2fwo", "score_hidden": false, "parent_id": "t3_5zhs8", "body": "Readable, re-usable Ruby: \nhttp://pastie.caboo.se/112909", "author_flair_css_class": null}
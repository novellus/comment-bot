{"controversiality": 0, "retrieved_on": 1427424951, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02c8bz", "gilded": 0, "link_id": "t3_5zgsq", "downs": 0, "score": 17, "score_hidden": false, "id": "c02c8bz", "author": "Odd_Bloke", "created_utc": "1193776832", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 17, "parent_id": "t3_5zgsq", "body": "\"tabs vs. spaces, and their reasoning\" would seem to be fairly well dealt with in PEP 8... :p", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 50, "author": "dlsspy", "created_utc": "1193777966", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 39, "author": "[deleted]", "created_utc": "1193778854", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -7, "author": "[deleted]", "created_utc": "1193790711", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 14, "author": "morner", "created_utc": "1193796633", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 11, "author": "sjs", "created_utc": "1193800655", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1193806843", "ups": 11, "gilded": 0, "link_id": "t3_5zgsq", "retrieved_on": 1427424914, "score": 11, "body": "It's more complex than simply \"memory\".  It's also about recall.  Put me in front of an IDE with source files and code completion -- my recall is *far* better than when you stick me in front of a blank whiteboard.  Is this because my memory is 'worse' than the guy who has pydocs memorized, or simply because I've optimized recall and storage efficiency for my particular choice of IDE?\n\nOne might argue that since memory is finite, the less I waste on memorizing things computers already memorize (e.g. syntax, exact API details, etc.), the more memory I have available for remembering intangibles that cannot be documented easily (e.g. design choices and rationale), and the more free space I'll have available in my short-term memory for keeping track of what I need to and what I *must not* do.  Thus the more effective I will be when compared to the vi hacker who can rewrite the API docs from scratch, but who is constantly mentally context switching.\n\nUntil we actually test performance or learn more about memory, it's impossible to say which candidate is 'better'.  Consequently, it's silly to base recruitment criteria on these subjective notions about how a programmer should be able to code (what's next?  blindfolded?  drunk?  upside-down?  in a freezer?)  Afterall, if we objectively knew what made good programmers we wouldn't have threads like these :P", "author": "urabsurd", "author_flair_text": null, "distinguished": null, "edited": true, "author_flair_css_class": null, "archived": true, "subreddit": "programming", "name": "t1_c02cb73", "parent_id": "t1_c02capg", "score_hidden": false, "id": "c02cb73"}], "subreddit": "programming", "score_hidden": false, "ups": 11, "controversiality": 0, "archived": true, "link_id": "t3_5zgsq", "retrieved_on": 1427424921, "id": "c02capg", "author_flair_text": null, "distinguished": null, "edited": true, "name": "t1_c02capg", "parent_id": "t1_c02cadk", "body": "I won't make any audacious claims such as \"you must have a good memory to be a good programmer\", but there is some truth in jemfinch's statement.\n\nThe more you can remember, the faster you can bang out code.  Not to mention that it's easier to reason about a problem when you can remember all the elements in the equation.", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "author_flair_text": null, "name": "t1_c02cbsg", "gilded": 0, "link_id": "t3_5zgsq", "retrieved_on": 1427424906, "score": 1, "score_hidden": false, "body": "Wait .. uh .. I forget what you guys are talking about .. ", "author": "bebnet", "created_utc": "1193817257", "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "ups": 1, "parent_id": "t1_c02cadk", "id": "c02cbsg", "author_flair_css_class": null}], "subreddit": "programming", "ups": 14, "name": "t1_c02cadk", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zgsq", "retrieved_on": 1427424925, "score_hidden": false, "body": "It seems you lack reasoning skills. \n\nTough break.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02c9wb", "id": "c02cadk", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": -7, "controversiality": 0, "archived": true, "link_id": "t3_5zgsq", "retrieved_on": 1427424932, "id": "c02c9wb", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02c9wb", "parent_id": "t1_c02c8l4", "body": "Unfortunately, both reasoning skills *and* a good memory are necessary for being a good programmer.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 39, "name": "t1_c02c8l4", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zgsq", "retrieved_on": 1427424948, "score_hidden": false, "body": "Exactly. There's people with great reasoning skills who also have a lousy memory.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02c8ho", "id": "c02c8l4", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": 16, "gilded": 0, "link_id": "t3_5zgsq", "retrieved_on": 1427424945, "score": 16, "body": "[deleted]", "author": "[deleted]", "created_utc": "1193781408", "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02c8vn", "parent_id": "t1_c02c8ho", "score_hidden": false, "id": "c02c8vn"}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 16, "author": "nostrademons", "created_utc": "1193785360", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 16, "author": "dlsspy", "created_utc": "1193789227", "children": [{"controversiality": 0, "retrieved_on": 1427424929, "subreddit_id": "t5_2fwo", "created_utc": "1193793424", "ups": 7, "gilded": 0, "link_id": "t3_5zgsq", "downs": 0, "score": 7, "body": "True. \nThe actual libraries you would use would vary by programmer or task. However, anyone who has done non-trivial work in Python would be familiar with at least some of the modules without having to consult the docs. \n\nThe correct thing to do in the interview would be to just find out which modules the programmer is most familiar with. \n\nThat should give some kind of indication of how much experience he\\she has.", "author": "statictype", "author_flair_text": null, "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit": "programming", "name": "t1_c02ca40", "parent_id": "t1_c02c9s5", "score_hidden": false, "id": "c02ca40"}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193813964", "ups": 0, "gilded": 0, "link_id": "t3_5zgsq", "retrieved_on": 1427424909, "score": 0, "score_hidden": false, "body": "[deleted]", "author": "[deleted]", "author_flair_text": null, "distinguished": null, "edited": true, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02cbms", "parent_id": "t1_c02c9s5", "id": "c02cbms", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 16, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zgsq", "retrieved_on": 1427424933, "body": "Sure, I know that, and lambdas and immutability and other random general stuff.\n\nIf you want me to read a csv or zipfile without reading the docs (which would be available to me had this been an actual programming task), then you should understand that you're not testing any of my abilities in any practical sense.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02c9s5", "parent_id": "t1_c02c9dv", "id": "c02c9s5", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1193807501", "ups": 2, "gilded": 0, "link_id": "t3_5zgsq", "retrieved_on": 1427424914, "score": 2, "body": "Except for the most basic questions, the others refer to stuff you can look up or pick up very quickly, esp. if you have coworkers using Python. I'd rather present the interviewee with a quickie programming challenge, and either give him internet access to look stuff up, or make sure he won't need that. \n\nMost importantly, I'd try to find out to what extent he likes programming. Ask him about his pet projects, if any. Otherwise, why hasn't he done anything and what would he like to do if those impediments weren't there.", "id": "c02cb8o", "author": "euccastro", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "name": "t1_c02cb8o", "parent_id": "t1_c02c9dv", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 16, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zgsq", "retrieved_on": 1427424938, "body": "Much of that (besides the libraries, and I doubt he expects you to know them all) isn't really learned by memorization, though.  It comes naturally if you work with the language enough.  Someone who writes Python on a daily basis is going to know about tuples vs. lists vs. dicts, or list comprehensions, or doctests and docstrings.  And they'll probably have at least heard of Django/Turbogears/BeautifulSoup/FeedParse/PIL, even if they haven't used them.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02c9dv", "parent_id": "t1_c02c8ho", "id": "c02c9dv", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "[deleted]", "created_utc": "1193817129", "children": [{"controversiality": 0, "retrieved_on": 1427424869, "subreddit_id": "t5_2fwo", "author_flair_text": null, "name": "t1_c02cenl", "gilded": 0, "link_id": "t3_5zgsq", "downs": 0, "score": 2, "score_hidden": false, "body": "&gt; If your memory isn't big enough to memorize a language as small as Python I guess I'm not going to hire you.\n\nI think you missed the point.\n\nHowever, excluding the libraries, there are a lot of things in python that aren't entirely obvious.  For example, what does the following code do?\n\n    a &gt;&gt;= b\n\nWhat if a is an custom subclass of object?\n\nWould you be able to explain the difference between / and // within your first few days?\n\nCan you name the statement that occurred between these two lines of code?\n\n    &gt;&gt;&gt; 1 / 2\n    0\n    &gt;&gt;&gt; ???\n    &gt;&gt;&gt; 1 / 2\n    0.5\n\nI'm not sure I'd hire anyone who claimed to be a master in anything after a few days.", "author": "dlsspy", "created_utc": "1193851558", "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "ups": 2, "parent_id": "t1_c02cbsa", "id": "c02cenl", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02cbsa", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 2, "link_id": "t3_5zgsq", "retrieved_on": 1427424907, "id": "c02cbsa", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02c8ho", "body": "[deleted]", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 50, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zgsq", "retrieved_on": 1427424950, "body": "I don't like questions that test memorization.  I don't work that way.\n\nI've used most of the modules described quite a bit, but I couldn't necessarily tell you off the top of my head how to use any of them.\n\nThat came up in an interview once.  The answer to the question involves me looking at pydoc and experimenting in the repl or shell for ~5 minutes.  The whiteboard had neither.", "archived": true, "distinguished": null, "edited": true, "name": "t1_c02c8ho", "parent_id": "t3_5zgsq", "id": "c02c8ho", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 9, "author": "ardit33", "created_utc": "1193779259", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 16, "author": "ovi256", "created_utc": "1193784500", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193802202", "name": "t1_c02catu", "gilded": 0, "link_id": "t3_5zgsq", "retrieved_on": 1427424919, "score": 0, "score_hidden": false, "body": "I think the moment of zen is when you realize that there is no difference, there are only master programmers and idiots with text editors.", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 0, "parent_id": "t1_c02c98x", "id": "c02catu", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "author_flair_text": null, "name": "t1_c02cba5", "gilded": 0, "link_id": "t3_5zgsq", "retrieved_on": 1427424913, "score": -1, "score_hidden": false, "id": "c02cba5", "author": "iseewhatyoudidthere", "created_utc": "1193808375", "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "ups": -1, "parent_id": "t1_c02c98x", "body": "I see what you did there.", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427424911, "subreddit_id": "t5_2fwo", "created_utc": "1193810898", "ups": 6, "gilded": 0, "link_id": "t3_5zgsq", "downs": 0, "score": 6, "body": "It's the halting problem for staff recruiters. Unfortunately only idiots solve it immediately while more deliberate people have their doubts.", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "id": "c02cbgc", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02cbgc", "parent_id": "t1_c02c98x", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02c98x", "ups": 16, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zgsq", "retrieved_on": 1427424939, "score_hidden": false, "body": "&gt;But I can't see how they would differentiate a good programmer from a mediocre one.  \n\nWhen you discover how to do that, you can call yourself a master.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02c8me", "id": "c02c98x", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 4, "gilded": 0, "link_id": "t3_5zgsq", "retrieved_on": 1427424932, "score": 4, "id": "c02c9wa", "author": "njharman", "created_utc": "1193790707", "distinguished": null, "edited": false, "body": "How one answers reveals much.  Interview questions are/should not be about getting the correct answer or not.  They are about\n\n- how you communicate\n- how confident/comfortable you are as a programmer\n- how passionate you are\n- how experienced you are (do you expand on answers)", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02c9wa", "parent_id": "t1_c02c8me", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 9, "score_hidden": false, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zgsq", "retrieved_on": 1427424948, "body": "ok, a lot of those questions are valid, you would know well if you programmed alot (daily) with python.  But I can't see how they would differentiate a good programmer from a mediocre one.\nI'd rather have a great programmer that knows only basic python  (and much more likeley to learn really fast),  rather than somebody that knows python well as a language, but can't really program it.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02c8me", "parent_id": "t3_5zgsq", "id": "c02c8me", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 7, "author": "sverrejoh", "created_utc": "1193781577", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 27, "author": "[deleted]", "created_utc": "1193784669", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 4, "gilded": 0, "link_id": "t3_5zgsq", "retrieved_on": 1427424929, "score": 4, "body": "I am a full time Perl programmer, but I will not be programming Perl in my next job, that's for sure.", "author": "sverrejoh", "created_utc": "1193793808", "distinguished": null, "edited": true, "id": "c02ca51", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02ca51", "parent_id": "t1_c02c99r", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02c99r", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 27, "link_id": "t3_5zgsq", "retrieved_on": 1427424939, "body": "No. Those were trick questions. We're actually looking for a Perl programmer.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02c8wa", "id": "c02c99r", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427424936, "subreddit_id": "t5_2fwo", "created_utc": "1193786904", "ups": 3, "gilded": 0, "link_id": "t3_5zgsq", "downs": 0, "score": 3, "body": "I got one wrong, but I already have a job.", "id": "c02c9js", "author": "kylev", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "name": "t1_c02c9js", "parent_id": "t1_c02c8wa", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193844601", "name": "t1_c02cdli", "gilded": 0, "link_id": "t3_5zgsq", "retrieved_on": 1427424883, "score": 1, "score_hidden": false, "id": "c02cdli", "author": "sping", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c02c8wa", "body": "But in that case you didn't answer correctly.  Sorry, you can't have the job.\n\n    Q: Can you use tuple unpacking for assignment?\n    A: Correct.\n\n", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 7, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zgsq", "retrieved_on": 1427424945, "body": "I answered everything correct - now please give me a job.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02c8wa", "parent_id": "t3_5zgsq", "id": "c02c8wa", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 37, "author": "ThomasPtacek", "created_utc": "1193782147", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193783543", "name": "t1_c02c94p", "gilded": 0, "link_id": "t3_5zgsq", "retrieved_on": 1427424941, "score": 17, "score_hidden": false, "body": "It's a good thing to know for version compatibility, but yeah not something you'd necessarily need to know off the top of your head.", "author": "ddipaolo", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 17, "parent_id": "t1_c02c8yx", "id": "c02c94p", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c02c9nn", "gilded": 0, "link_id": "t3_5zgsq", "retrieved_on": 1427424934, "score": 4, "body": "I'm guessing he would accept an answer that's close.  I would have answered \"2.3 or 2.4\".\n\n(now that I think about it, I think it's 2.4)", "author": "mackstann", "created_utc": "1193787782", "distinguished": null, "edited": true, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "ups": 4, "parent_id": "t1_c02c8yx", "score_hidden": false, "id": "c02c9nn"}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 37, "controversiality": 0, "archived": true, "link_id": "t3_5zgsq", "retrieved_on": 1427424943, "id": "c02c8yx", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02c8yx", "parent_id": "t3_5zgsq", "body": "You're kidding, right? \"Decorators added in which version\"?", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 16, "author": "spez", "created_utc": "1193782519", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 16, "author": "dwahler", "created_utc": "1193783666", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 14, "author": "spez", "created_utc": "1193784215", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": 1, "gilded": 0, "link_id": "t3_5zgsq", "retrieved_on": 1427424932, "score": 1, "body": "[deleted]", "id": "c02c9uz", "author": "[deleted]", "created_utc": "1193790257", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02c9uz", "parent_id": "t1_c02c97h", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427424929, "subreddit_id": "t5_2fwo", "created_utc": "1193793820", "ups": 10, "gilded": 0, "link_id": "t3_5zgsq", "downs": 0, "score": 10, "body": "For fun, I tried this out in Python 2.5.1 on FreeBSD. I also added a method 7 which was similar to method 6 but used a generator expression instead of a list comprehension.\r\n\r\n* 6 (''.join on list comprehension): 0.084s, 9046kB\r\n* 7 (''.join on generator expression): 0.095s, 8988kB\r\n* 4 (repeated append() and ''.join on list): 0.115s, 9064kB\r\n* 1 (repeated string concatenation): 0.141s, 4276kB\r\n* 5 (cStringIO): 0.150s, 4760kB\r\n* 3 (array): 0.204s, 4308kB\r\n* 2 (repeated MutableString concatenation): 30.1s, 4276kB\r\n\r\nSo the 3 fastest methods used about twice as much memory as the others. Of the methods with lower memory usage, repeated string concatenation was fastest. MutableString (which was never intended to be used) was the slowest by two orders of magnitude.", "author": "Rofl_Waffler", "author_flair_text": null, "distinguished": null, "edited": true, "author_flair_css_class": null, "archived": true, "subreddit": "programming", "name": "t1_c02ca53", "parent_id": "t1_c02c97h", "score_hidden": false, "id": "c02ca53"}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "IHaveAnIdea", "created_utc": "1193795886", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 6, "author": "dwahler", "created_utc": "1193797051", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "IHaveAnIdea", "created_utc": "1193797606", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 4, "author": "[deleted]", "created_utc": "1193815798", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "IHaveAnIdea", "created_utc": "1193816570", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "[deleted]", "created_utc": "1193817560", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "IHaveAnIdea", "created_utc": "1193818593", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193820343", "name": "t1_c02cbxf", "gilded": 0, "link_id": "t3_5zgsq", "retrieved_on": 1427424905, "score": 2, "score_hidden": false, "body": "&gt; Ok, I still didn't figure out what you meant by \"time(1)\":)\n\n    $ man time\n\n    TIME(1)                                                             \n\n    NAME\n       time - time a simple command or give resource usage\n\n    SYNOPSIS\n       time [options] command [arguments...]\n\n    DESCRIPTION\n       The  time  command  runs  the  specified program command with the given\n       arguments.  When command finishes, time writes a  message  to  standard\n       output  giving timing statistics about this program run. /.../", "author": "[deleted]", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 2, "parent_id": "t1_c02cbul", "id": "c02cbxf", "author_flair_css_class": null}], "subreddit": "programming", "ups": 2, "name": "t1_c02cbul", "controversiality": 0, "archived": true, "link_id": "t3_5zgsq", "retrieved_on": 1427424906, "score_hidden": false, "id": "c02cbul", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02cbt2", "body": "I was talking about the full production app, not the usage testing scripts. The usage tests are scaled way down. Although the fact that python **still?!?** doesn't free memory from small objects back to the OS may necessitate more direct profiling/tests.\n\nOk, I still didn't figure out what you meant by \"time(1)\":)", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 2, "controversiality": 0, "archived": true, "link_id": "t3_5zgsq", "retrieved_on": 1427424906, "id": "c02cbt2", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02cbt2", "parent_id": "t1_c02cbrh", "body": "Do you have to load the entire dataset to be able to benchmark the relevant algorithms/data structures?  Wouldn't, say, a 130 megabyte dataset tell you all you need to know?  Or a 13 megabyte dataset?", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 3, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zgsq", "retrieved_on": 1427424907, "body": "One of my apps takes 3 minutes to startup and 1.3G of mem after careful optimizations to memory usage. Memory usage gets no respect!\n", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02cbrh", "parent_id": "t1_c02cbq9", "id": "c02cbrh", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 4, "name": "t1_c02cbq9", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zgsq", "retrieved_on": 1427424907, "score_hidden": false, "body": "If you work with datasets that large, chances are that \"time(1)\" is all you need ;-)\n", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02cagk", "id": "c02cbq9", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02cagk", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 2, "link_id": "t3_5zgsq", "retrieved_on": 1427424924, "body": "well that's not so good for large datasets either.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02caet", "id": "c02cagk", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 6, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zgsq", "retrieved_on": 1427424924, "body": "&gt;**Note:** By default, `timeit()` temporarily turns off garbage collection during the timing. The advantage of this approach is that it makes independent timings more comparable.\n\nhttp://docs.python.org/lib/module-timeit.html", "archived": true, "distinguished": null, "edited": true, "name": "t1_c02caet", "parent_id": "t1_c02cabj", "id": "c02caet", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02cabj", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 2, "link_id": "t3_5zgsq", "retrieved_on": 1427424926, "id": "c02cabj", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02c97h", "body": "That testsuite has a bad case of **not testing only what it's supposed to**.\n\nThat's why I've been writing all of my speed and memory usage tests myself, using the code in exactly the way I'm intending to use it.\n", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 5, "author": "dwahler", "created_utc": "1193797016", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 4, "gilded": 0, "link_id": "t3_5zgsq", "retrieved_on": 1427424908, "score": 4, "id": "c02cboy", "author": "[deleted]", "created_utc": "1193814997", "distinguished": null, "edited": false, "body": "&gt; Hmm, upon further experimentation it seems like plain string concatenation hits some kind of speed bump around 500,000 characters and suddenly becomes quadratic.\n\nWhen you get that far, you're measuring the performance characteristics of the system's memory allocation subsystem.", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02cboy", "parent_id": "t1_c02caeq", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": 5, "name": "t1_c02caeq", "controversiality": 0, "archived": true, "link_id": "t3_5zgsq", "retrieved_on": 1427424924, "score_hidden": false, "id": "c02caeq", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02c97h", "body": "Hmm, upon further experimentation it seems like plain string concatenation hits some kind of speed bump around 500,000 characters and suddenly becomes quadratic. I'd be interested in knowing what causes that -- Python isn't using nearly enough memory to start swapping out to disk.\n\nOh, and on my system the break-even point between += and join() seems to be about 350 characters for me.", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 7, "author": "[deleted]", "created_utc": "1193814840", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "spez", "created_utc": "1193835191", "children": [{"controversiality": 0, "retrieved_on": 1427424895, "subreddit_id": "t5_2fwo", "created_utc": "1193836663", "ups": 9, "gilded": 0, "link_id": "t3_5zgsq", "downs": 0, "score": 9, "id": "c02ccpl", "author": "[deleted]", "archived": true, "distinguished": null, "edited": true, "body": "Does the benchmark scenario (building 500k strings by concatenating 100000 very short strings) match your use case?\n\nIf so, the most efficient approach is to use a list, with \"append\" bound to a local variable (this saves you 100000 method lookups).  This approach takes roughly 0.022 seconds on my machine, under Python 2.5.1.  Augmented assignment (+=) takes about 0.036 seconds.  That makes append/join roughly 1.6 times faster.  A null loop over the same data (just doing name lookups) takes 0.013 seconds.  If we remove also that time from the benchmark, append/join is about 2.5 times faster for this scenario.  Your milage may vary.\n\n(If it doesn't match your scenario, the only way to know what's fastest is to benchmark.  Sometimes += is faster, since it doesn't need to build a list, sometimes append/join is faster, since it doesn't need quite as many extra copies even in worst case).", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02ccpl", "parent_id": "t1_c02cclm", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02cclm", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 2, "link_id": "t3_5zgsq", "retrieved_on": 1427424897, "id": "c02cclm", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02cbok", "body": "Ok, fix the benchmark and let me know how it changes.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02cbok", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 7, "link_id": "t3_5zgsq", "retrieved_on": 1427424908, "id": "c02cbok", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02c97h", "body": "You're referring to a benchmark that attempts to measure a very fast operation, but does lots of extra conversions and *calls out to an external program* inside the timed section?  Ouch.  I'm not sure I'd hire you to write optimized Python code, really ;-)", "author_flair_css_class": null}], "subreddit": "programming", "ups": 14, "name": "t1_c02c97h", "controversiality": 0, "archived": true, "link_id": "t3_5zgsq", "retrieved_on": 1427424940, "score_hidden": false, "id": "c02c97h", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02c955", "body": "http://www.skymind.com/~ocrow/python_string/stest.py\n\nreplace \"import timing\" with \"import time\" for python2.5.\n\nResults may vary. They were all pretty close for me. The difference between 2.3 and 2.4 is striking.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02c955", "ups": 16, "controversiality": 0, "archived": true, "link_id": "t3_5zgsq", "retrieved_on": 1427424941, "score_hidden": false, "id": "c02c955", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02c90o", "body": "That's only true for a small number of concatenations:\n\n    $ python -V\n    Python 2.5.1\n\n    $ python -m timeit \"s = ''\" \"for i in xrange(20): s += 'xyzzy'\"\n    100000 loops, best of 3: 5.03 usec per loop\n    $ python -m timeit \"l = []\" \"for i in xrange(20): l.append('xyzzy')\" \"s = ''.join(l)\"\n    100000 loops, best of 3: 8.12 usec per loop\n\n    $ python -m timeit \"s = ''\" \"for i in xrange(200000): s += 'xyzzy'\"\n    10 loops, best of 3: 269 msec per loop\n    $ python -m timeit \"l = []\" \"for i in xrange(200000): l.append('xyzzy')\" \"s = ''.join(l)\"\n    10 loops, best of 3: 68.1 msec per loop", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427424932, "subreddit_id": "t5_2fwo", "created_utc": "1193790267", "ups": 2, "gilded": 0, "link_id": "t3_5zgsq", "downs": 0, "score": 2, "body": "Nice. I was waiting for you to point that out.", "author": "optimizeprime", "archived": true, "distinguished": null, "edited": false, "id": "c02c9v1", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02c9v1", "parent_id": "t1_c02c90o", "score_hidden": false, "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 15, "author": "IHaveAnIdea", "created_utc": "1193795721", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 5, "author": "euccastro", "created_utc": "1193807001", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 5, "gilded": 0, "link_id": "t3_5zgsq", "retrieved_on": 1427424911, "score": 5, "id": "c02cbgs", "author": "MarkByers", "created_utc": "1193811128", "distinguished": null, "edited": false, "body": "Even then join still wins:\n\n    from time import time\n\n    def test_string_append():\n        s=''\n        for x in xrange(1000000):\n            s+=str(x)\n\n    def test_join():\n        l=[]\n        for x in xrange(1000000):\n            l.append(str(x))\n        s=''.join(l)\n\n    t=time()\n    test_string_append()\n    print time()-t\n\n    t=time()\n    test_join()\n    print time()-t\n\n---\n\n    2.50300002098\n    1.92101311684\n\nThe difference is so minimal though that anyone who spends time arguing about this minor difference before they have profiled their code is wasting their time.", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02cbgs", "parent_id": "t1_c02cb7n", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": 5, "name": "t1_c02cb7n", "controversiality": 0, "archived": true, "link_id": "t3_5zgsq", "retrieved_on": 1427424914, "score_hidden": false, "id": "c02cb7n", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02caau", "body": "For full fairness, if you use += you don't need the overhead of building the list. I think that's what the grandparent meant. That said, I don't know which is faster in 2.5.", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "author_flair_text": null, "name": "t1_c02cbq4", "gilded": 0, "link_id": "t3_5zgsq", "retrieved_on": 1427424907, "score": 7, "score_hidden": false, "body": "&gt; So, we'll have to call you on that one. \"Code or it's not true.\"\n\nRecent versions of Python have special code that does += in place if there are no external references to the target string.  This works best if you add short strings, so the memory allocator doesn't need to move things around.\n\n(Python's allocator uses 8-byte alignment, so you can, on average, add 4 bytes without doing an extra copy.)", "author": "[deleted]", "created_utc": "1193815659", "distinguished": null, "edited": true, "archived": true, "subreddit": "programming", "ups": 7, "parent_id": "t1_c02caau", "id": "c02cbq4", "author_flair_css_class": null}], "subreddit": "programming", "ups": 15, "name": "t1_c02caau", "controversiality": 0, "archived": true, "link_id": "t3_5zgsq", "retrieved_on": 1427424926, "score_hidden": false, "id": "c02caau", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02c90o", "body": "what the hell man?\n\ncode with +=:\n        \n        from time import time\n        l=[]\n        for x in xrange(1000000):\n            l.append(str(x))\n        s=''\n\n        t=time()\n        for x in l:\n            s+=x\n        print time()-t\n\n1.71276688576 seconds\n\ncode with join:\n\n        from time import time\n        l=[]\n        for x in xrange(1000000):\n            l.append(str(x))\n        s=''\n\n\n        t=time()\n        s=''.join(l)\n        print time()-t\n\n0.185965061188 seconds\n\nfor comparison:\n\n        from time import time\n        l=[]\n        for x in xrange(1000000):\n            l.append(str(x))\n        s=''\n\n        t=time()\n        for x in l:\n            pass\n        print time()-t\n\n0.277467012405 seconds\n\nThat's a full **10x improvement for join**.\n\nSo, we'll have to call you on that one. \"Code or it's not true.\"", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "name": "t1_c02c90o", "controversiality": 0, "archived": true, "ups": 16, "link_id": "t3_5zgsq", "retrieved_on": 1427424942, "id": "c02c90o", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5zgsq", "body": "&gt; string building...do they use \"+=\" or do they build a list and use .join() to recombine them efficiently \n\nfun fact: += is the fastest way to build strings in python 2.5.", "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427424937, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02c9g1", "gilded": 0, "link_id": "t3_5zgsq", "downs": 0, "score": 1, "score_hidden": false, "id": "c02c9g1", "author": "[deleted]", "created_utc": "1193785957", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t3_5zgsq", "body": "[deleted]", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 18, "author": "theeth", "created_utc": "1193788212", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "pjdelport", "created_utc": "1193799526", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02capw", "gilded": 0, "link_id": "t3_5zgsq", "retrieved_on": 1427424920, "score": 3, "id": "c02capw", "author": "sjs", "created_utc": "1193800858", "distinguished": null, "edited": false, "body": "`class Foo(object)` is more appealing to me.", "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 3, "parent_id": "t1_c02cami", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427424899, "subreddit_id": "t5_2fwo", "created_utc": "1193831544", "ups": 2, "gilded": 0, "link_id": "t3_5zgsq", "downs": 0, "score": 2, "body": "That doesn't work when subclassing old-style classes. In those case, you have to inherit from object.", "author": "theeth", "author_flair_text": null, "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit": "programming", "name": "t1_c02ccdq", "parent_id": "t1_c02cami", "score_hidden": false, "id": "c02ccdq"}], "subreddit_id": "t5_2fwo", "name": "t1_c02cami", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 2, "link_id": "t3_5zgsq", "retrieved_on": 1427424922, "id": "c02cami", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02c9p6", "body": "&gt; I long for the day when Py 3K will get rid of that kludge.\n\nJust say `__metaclass__ = type` at the top of your module, and be rid of it today.", "author_flair_css_class": null}], "subreddit": "programming", "ups": 18, "name": "t1_c02c9p6", "controversiality": 0, "archived": true, "link_id": "t3_5zgsq", "retrieved_on": 1427424934, "score_hidden": false, "id": "c02c9p6", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5zgsq", "body": "&gt; - the difference between \"class Foo\" and \"class Foo(object)\" \n\nI long for the day when Py 3K will get rid of that kludge.", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 10, "author": "Yst", "created_utc": "1193789180", "children": [{"controversiality": 0, "retrieved_on": 1427424930, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02c9yb", "gilded": 0, "link_id": "t3_5zgsq", "downs": 0, "score": 1, "score_hidden": false, "id": "c02c9yb", "author": "[deleted]", "created_utc": "1193791343", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c02c9rz", "body": "[deleted]", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 10, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zgsq", "retrieved_on": 1427424933, "body": "I can't be the only one for whom \"Python Interview Questions\" brought to mind [a rather different interviewing technique](http://www.youtube.com/watch?v=1dWMIuipn_c).", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02c9rz", "parent_id": "t3_5zgsq", "id": "c02c9rz", "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427424932, "subreddit_id": "t5_2fwo", "created_utc": "1193790333", "ups": 5, "gilded": 0, "link_id": "t3_5zgsq", "downs": 0, "score": 5, "body": "Dammit I wish people interviewing me would ask those questions instead of how to code a quick sort or some [mostly] pointless programming puzzle.", "author": "njharman", "archived": true, "distinguished": null, "edited": true, "id": "c02c9v6", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02c9v6", "parent_id": "t3_5zgsq", "score_hidden": false, "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "statictype", "created_utc": "1193793885", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "RantyDave", "created_utc": "1193809359", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": 2, "gilded": 0, "link_id": "t3_5zgsq", "retrieved_on": 1427424911, "score": 2, "body": "A type corresponds to a set of values. An integer is any member of the set of all integers, a character is any member of the set of all characters, &amp;c.\n\nIf you cross two or more of those sets, then you'll get a set in which each element has more than one component. For example, the set Z * Z (integers cross integers) contains elements of the form (1,1), (2,5), (9,4), etc.\n\nAn element with two components might be referred to as a \"pair\", or a \"double\". Likewise, an element with three components is a \"triple\", four components == \"quadruple\", five = \"quintuple\", and so on. \"Tuple\" is used as a generic name for all of these.\n\nOddly, in Python, the type of (2,3) is \"tuple\". That's pretty meaningless when you think about what a tuple is. In languages like ML, the type of a tuple is the type of its domains separated by * (cross); for example, the type of (2,3) is int * int.", "id": "c02cbfr", "author": "schala09", "created_utc": "1193810563", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02cbfr", "parent_id": "t1_c02cbco", "score_hidden": false, "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "statictype", "created_utc": "1193814105", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193815088", "name": "t1_c02cbp4", "gilded": 0, "link_id": "t3_5zgsq", "retrieved_on": 1427424908, "score": 2, "score_hidden": false, "id": "c02cbp4", "author": "RantyDave", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 2, "parent_id": "t1_c02cbn1", "body": "Aha, gotcha. So, in many ways they are constant lists - you can iterate across them for example - but they are generally used more as an anonymous struct. Like in \"for x,y in some_dict.items()\"", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02cbn1", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 2, "link_id": "t3_5zgsq", "retrieved_on": 1427424908, "body": "Crudely put, tuples are meant to be the python equivalent of C's structs. Except, as you would expect, its more flexible. You would use it as a composite data type.\n\n*Edit*: [this](http://pyre.third-bit.com/blog/archives/000450.html#comment-290) is a far better explaination.\nTo summarize:\n&gt;Tuples are not constant lists \u2014 this is a common misconception. Lists are intended to be homogeneous sequences, while tuples are hetereogeneous data structures.", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02cbco", "id": "c02cbn1", "author_flair_css_class": null}], "subreddit": "programming", "ups": 2, "name": "t1_c02cbco", "controversiality": 0, "archived": true, "link_id": "t3_5zgsq", "retrieved_on": 1427424912, "score_hidden": false, "id": "c02cbco", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02ca5b", "body": "Tuples are not just immutable lists? How so? (seriously, I am a mostly-newbie Python programmer).", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "name": "t1_c02ca5b", "controversiality": 0, "archived": true, "ups": 2, "link_id": "t3_5zgsq", "retrieved_on": 1427424929, "id": "c02ca5b", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t3_5zgsq", "body": "I think more emphasis could be placed on finding out how 'pythonic', the programmer's code is.\nFor example, using a dictionary for dispatch instead of a giant if\\else block. Using tuples to represent simple data structures (knowing that they are not just 'immutable lists')", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193794800", "ups": -10, "gilded": 0, "link_id": "t3_5zgsq", "retrieved_on": 1427424927, "score": -10, "score_hidden": false, "body": "[deleted]", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02ca8c", "parent_id": "t3_5zgsq", "id": "c02ca8c", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193798154", "ups": 2, "gilded": 0, "link_id": "t3_5zgsq", "retrieved_on": 1427424923, "score": 2, "score_hidden": false, "id": "c02cai2", "author": "eipipuz", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02cai2", "parent_id": "t3_5zgsq", "body": "I want one of these for each language I \"know\". Could someone do a Ruby one? How about Erlang? I guess Java is covered by the Javaranch.", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 0, "author": "btipling", "created_utc": "1193800883", "children": [{"controversiality": 0, "retrieved_on": 1427424903, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02cc28", "gilded": 0, "link_id": "t3_5zgsq", "downs": 0, "score": 0, "score_hidden": false, "id": "c02cc28", "author": "catch23", "created_utc": "1193823077", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 0, "parent_id": "t1_c02capz", "body": "maybe there's a chance Guido signs up for the interview.", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 0, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zgsq", "retrieved_on": 1427424920, "body": "Python history? For a job? Are you trying to hire a historian? ", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02capz", "parent_id": "t3_5zgsq", "id": "c02capz", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 13, "author": "reddit_user13", "created_utc": "1193801375", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 6, "author": "[deleted]", "created_utc": "1193802417", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 6, "author": "LaurieCheers", "created_utc": "1193841399", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 5, "author": "nostrademons", "created_utc": "1193842284", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02cdl0", "gilded": 0, "link_id": "t3_5zgsq", "retrieved_on": 1427424883, "score": 3, "body": "My script threw a newt exception, but it got better!", "author": "TheCleric", "created_utc": "1193844514", "distinguished": null, "edited": false, "id": "c02cdl0", "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 3, "parent_id": "t1_c02cdbh", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 5, "name": "t1_c02cdbh", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zgsq", "retrieved_on": 1427424887, "score_hidden": false, "body": "But Python has witch, er, duck-typing!", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02cd7r", "id": "c02cdbh", "author_flair_css_class": null}], "subreddit": "programming", "ups": 6, "score_hidden": false, "controversiality": 0, "archived": true, "link_id": "t3_5zgsq", "retrieved_on": 1427424889, "id": "c02cd7r", "author_flair_text": null, "distinguished": null, "edited": true, "name": "t1_c02cd7r", "parent_id": "t1_c02cau9", "body": "Type error at line 1. Expected: speed, Found: continent", "author_flair_css_class": null}], "subreddit": "programming", "ups": 6, "name": "t1_c02cau9", "controversiality": 0, "archived": true, "link_id": "t3_5zgsq", "retrieved_on": 1427424919, "score_hidden": false, "id": "c02cau9", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02car8", "body": "African?", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 13, "name": "t1_c02car8", "controversiality": 0, "archived": true, "link_id": "t3_5zgsq", "retrieved_on": 1427424920, "score_hidden": false, "id": "c02car8", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5zgsq", "body": "\"What is the air-speed velocity of an unladen swallow?\"", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "author_flair_text": null, "name": "t1_c02caui", "gilded": 0, "link_id": "t3_5zgsq", "retrieved_on": 1427424919, "score": 2, "score_hidden": false, "id": "c02caui", "author": "[deleted]", "created_utc": "1193802497", "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "ups": 2, "parent_id": "t3_5zgsq", "body": "\"Excuse me, is this the Argument Clinic?\"", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "author_flair_text": null, "name": "t1_c02caxc", "gilded": 0, "link_id": "t3_5zgsq", "retrieved_on": 1427424918, "score": 1, "score_hidden": false, "id": "c02caxc", "author": "[deleted]", "created_utc": "1193803881", "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "ups": 1, "parent_id": "t3_5zgsq", "body": "[deleted]", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 1, "gilded": 0, "link_id": "t3_5zgsq", "retrieved_on": 1427424917, "score": 1, "body": "[deleted]", "author": "[deleted]", "created_utc": "1193804078", "distinguished": null, "edited": false, "id": "c02caxv", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02caxv", "parent_id": "t3_5zgsq", "score_hidden": false, "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427424917, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02cayq", "gilded": 0, "link_id": "t3_5zgsq", "downs": 0, "score": 1, "score_hidden": false, "body": "WTF? I came here for some parrot jokes!", "author": "ginowhitaker", "created_utc": "1193804428", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t3_5zgsq", "id": "c02cayq", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02cbn2", "gilded": 0, "link_id": "t3_5zgsq", "retrieved_on": 1427424908, "score": 1, "id": "c02cbn2", "author": "[deleted]", "created_utc": "1193814105", "distinguished": null, "edited": false, "body": "[deleted]", "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t3_5zgsq", "score_hidden": false, "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427424905, "subreddit_id": "t5_2fwo", "created_utc": "1193820462", "ups": -1, "gilded": 0, "link_id": "t3_5zgsq", "downs": 0, "score": -1, "body": "\\#1 Would you probably pick Python for a new development project you're responsible for?\n\n\\#2 What are the business reasons for your decision?\n\nIf #1 is yes and #2 is not satisfactory, end the interview and notify HR and whatever agency sent the applicant to not to send that candidate in the future.", "id": "c02cbxo", "author": "mikaelhg", "author_flair_text": null, "distinguished": null, "edited": true, "archived": true, "subreddit": "programming", "name": "t1_c02cbxo", "parent_id": "t3_5zgsq", "score_hidden": false, "author_flair_css_class": null}
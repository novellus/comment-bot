{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02abbz", "gilded": 0, "link_id": "t3_5yrao", "retrieved_on": 1427425918, "score": -6, "score_hidden": false, "id": "c02abbz", "author": "[deleted]", "created_utc": "1192921336", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": -6, "parent_id": "t3_5yrao", "body": "[deleted]", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 7, "author": "DannoHung", "created_utc": "1192921640", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "[deleted]", "created_utc": "1192953234", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "DannoHung", "created_utc": "1193010148", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "[deleted]", "created_utc": "1193029556", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "DannoHung", "created_utc": "1193057617", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193066960", "ups": 1, "gilded": 0, "link_id": "t3_5yrao", "retrieved_on": 1427425799, "score": 1, "body": "   O.K. the next possibility is to select another front end language and produce Q source as output. This might even be relatively easy given a language like Lisp you already examined. I occasionally use a wrapper for regular expression syntax which suggests a more functional style of puilding pattern and outputs regexps being compiled by the usual machinery. You can use also other languages you are familiar with when you know how to transform source. Python can be parsed into ASTs for example using the compiler package of the standard library. Code synthesis is far easier and you have to cover a subset of the target language only.", "author": "[deleted]", "author_flair_text": null, "distinguished": null, "edited": true, "id": "c02akex", "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02akex", "parent_id": "t1_c02ajkz", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02ajkz", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 1, "link_id": "t3_5yrao", "retrieved_on": 1427425810, "body": "I essentially have no hope of figuring out a formal grammar for Q.  I work with a guy who's been trying to document all the syntax of the language for a year and he still finds new stuff every few weeks, and to add on top of that, KX releases new versions pretty frequently.\n\nGuess I'm boned.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02ai7f", "id": "c02ajkz", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 1, "name": "t1_c02ai7f", "controversiality": 0, "archived": true, "link_id": "t3_5yrao", "retrieved_on": 1427425827, "score_hidden": false, "id": "c02ai7f", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02agpb", "body": "So you refer to this [Q](http://kx.com/q/d/q.htm).\n\nDid you even try to present the language syntax in a formal grammar? I think this is a prerequisite for the introduction of syntactic macros.\n", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02agpb", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 1, "link_id": "t3_5yrao", "retrieved_on": 1427425847, "body": "Sorry, I don't think we're talking about the same Q.  The one I'm referring to is the successor to this language: http://en.wikipedia.org/wiki/K_%28programming_language%29", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02adcj", "id": "c02agpb", "author_flair_css_class": null}], "subreddit": "programming", "ups": 1, "name": "t1_c02adcj", "controversiality": 0, "archived": true, "link_id": "t3_5yrao", "retrieved_on": 1427425890, "score_hidden": false, "id": "c02adcj", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02abck", "body": "ducking the question about experience with macros..\n\nit sounds like the run-time could possibly do a  better job of optimizing your previous code? the Q interpreter is GPL, so you could have a look into that? I do wonder why Q is being used in the first place when more mature runtimes are available.", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02adgg", "gilded": 0, "link_id": "t3_5yrao", "retrieved_on": 1427425889, "score": 1, "score_hidden": false, "body": "   A macro language built on top of an existing language comes with [MetaLua](http://metalua.luaforge.net/). I think the implementation is quite accessible.\n\nAnother approach for preprocessing a non s-expr language is [EasyExtend](http://www.fiber-space.de/EasyExtend/doc/EE.html) for Python. It's more a general code transformation system targetting Python and has a wider focus \nthan MetaLua. The macro system built on top of it is somewhat unfinished.\n\nWhen you decide to stay with a low cost text-macro substitution system but you just want to know what you do, you might read [this GCC paper](http://www.zib.de/its/Download/Intern/Manuals/gcc_4.1.1/cpp.pdf) about the C-preprocessor. Sometimes it's just \napproriate to inform people about possible pitfalls and document them well instead of doing development overhead because one feels the need to follow a certain ideology. \n\n   ", "author": "[deleted]", "created_utc": "1192955898", "distinguished": null, "edited": true, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c02abck", "id": "c02adgg", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 7, "controversiality": 0, "archived": true, "link_id": "t3_5yrao", "retrieved_on": 1427425916, "id": "c02abck", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02abck", "parent_id": "t3_5yrao", "body": "Very recently, I found myself re-rewriting some real time processing code for my job to reduce the CPU usage of a server.\n\nMy original rewrite used some simple higher order functions to do the job that a lot of repeated code had been doing originally.\n\nUnfortunately, the function call overhead in the language we use (Q) is rather high and when you multiply a number of extra calls by 100 million points of data per day, it kills your speed.\n\nSo, in order to avoid repetitive code, I created a *very* simple set of macros to generate the expanded code that we'd need st startup.  Halfway into this I realized I only had half an idea of what I was doing (thank you beginner's Lisp tutorial) and felt that I should seek expert advice on how to create a real, sort of full featured macro system in a non-sexpr based language.\n\nAnyone had any experience with this or know of documents on the subject?", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 4, "author": "mindslight", "created_utc": "1192922362", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "username223", "created_utc": "1192923638", "children": [{"controversiality": 0, "retrieved_on": 1427425913, "subreddit_id": "t5_2fwo", "created_utc": "1192925485", "ups": 2, "gilded": 0, "link_id": "t3_5yrao", "downs": 0, "score": 2, "id": "c02abm5", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "body": "I hate when my regular code gets incorrectly executed as a macro. That makes it hard to get things right. I know, don't make macros that parse like regular code.", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02abm5", "parent_id": "t1_c02abho", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425912, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02abnf", "gilded": 0, "link_id": "t3_5yrao", "downs": 0, "score": 6, "score_hidden": false, "id": "c02abnf", "author": "mindslight", "created_utc": "1192926031", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 6, "parent_id": "t1_c02abho", "body": "i'm using the -P option to at least prefix all the builtins with m4_, and my macro names start with MACRO_ which makes them stand out. code in any language can be good or bad. it's a matter of making the correct design decisions so that the code can be read easier, and frankly m4 helps in this case.\n\nalso, i did call it an abomination (because i'm using a macro processor to feed what should be a pretty advanced language), not a panacea. i could probably get 70% of the expressiveness i need with python, but python falls short in other areas (threading, interpreted, can't integrate untrusted code very well. jython comes a little closer, but not much)", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02abho", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5yrao", "retrieved_on": 1427425914, "id": "c02abho", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02aber", "body": "  Great suggestion... unless you want other humans to understand your code.  An understated explanation from the documentation:\n\n&gt; An innovation of the m4 language, compared to some of its predecessors (like Stratchey's GPM, for example), is the ability to recognize macro calls without resorting to any special, prefixed invocation character. While generally useful, this feature might sometimes be the source of spurious, unwanted macro calls.\n  ", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "archived": true, "ups": 2, "gilded": 0, "link_id": "t3_5yrao", "retrieved_on": 1427425911, "score": 2, "body": "On your last paragraph. I have grown up on x86 assembly (quite literally), and boy, I used to *really* miss those powerful macros... But, and that's the point, I'm also a recently converted haskeller, and I don't quite miss the macros anymore. And, there is template haskell if you still miss the metaprogramming angle...", "author": "halu", "created_utc": "1192927289", "distinguished": null, "edited": false, "id": "c02abqc", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02abqc", "parent_id": "t1_c02aber", "score_hidden": false, "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "fangs", "created_utc": "1192964160", "children": [{"controversiality": 0, "retrieved_on": 1427425866, "subreddit_id": "t5_2fwo", "created_utc": "1192991976", "name": "t1_c02af7w", "gilded": 0, "link_id": "t3_5yrao", "downs": 0, "score": 1, "score_hidden": false, "body": "well, basically, scala has an \"impedance mismatch\" between what you can come up with as a concise representation of your concepts (\"DSL\"), and how it shows up as language constructs.\n\nlet's say we want a concise way of creating integer fields that have to be in a certain range, as checked by some consistency function.\n\n    class Foo {\n        var a : int = _\n        var b : int = _\n\n        def check : unit = {\n            if ((a &lt; 5) || (a &gt; 8))\n                throw new Exception()\n            if ((b &lt; 13) || (b &gt; 89))\n                throw new Exception()\n        }\n    }\n\nnow, you want to avoid a lot of duplication, so you'd really like to do\n\n    class Bar {\n        RANGED(a, 5, 8)\n        RANGED(b, 13, 89)\n    }\n\nmaybe even with a little bit of glue, but not too much. you simply just can't do something like this.\n\nadmittedly, this is a very contrived example, and there might be not so horrible, alternative ways of expressing it. but when you then want to create functions to read and write the associated fields, with varying numbers and types of parameters, you're out of luck.\n          ", "author": "mindslight", "archived": true, "distinguished": null, "edited": true, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c02adqd", "id": "c02af7w", "author_flair_css_class": null}], "subreddit": "programming", "ups": 1, "name": "t1_c02adqd", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yrao", "retrieved_on": 1427425886, "score_hidden": false, "body": "could you explain what was lacking in scala that you had to resort to macros (code as well if possible)?\n\nIts a language I'm looking at using so I'm pretty curious about missing features :-)", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02aber", "id": "c02adqd", "author_flair_css_class": null}], "subreddit": "programming", "ups": 4, "name": "t1_c02aber", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yrao", "retrieved_on": 1427425916, "score_hidden": false, "body": "use gnu m4. really.\n\ni just settled on using m4 to process _scala_ code. it's an abomination, but it's the best solution (short of writing a new language) that i came up with in about 2 weeks of searching around for the proper language for a new project.\n\n*shrug*. eventually some language out there will get macros again, and the world will rejoice. until then, i guess we're stuck with nonstandard preprocessors, lisp (has-not-caught-up-with-the-times!), or toy languages (anything that does a hash table lookup for every symbol dereference, and/or doesn't support threads)", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5yrao", "id": "c02aber", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "naughty", "created_utc": "1192969962", "children": [{"controversiality": 0, "retrieved_on": 1427425878, "subreddit_id": "t5_2fwo", "created_utc": "1192978323", "ups": 2, "gilded": 0, "link_id": "t3_5yrao", "downs": 0, "score": 2, "body": "Interesting! EasyExtend follows the same basic strategy but implements kind of a visitor on the parse tree nodes ( Transformer objects ) and a Python API ( cst.py, csttools.py, cstgen.py ) for all node actions. A very flexible approach. The parser generator is a bit weak ( *very* fast table driven parsing but restricted to LL(1) parsers only ).\n\nWould be interested when more of those projects are spawned. Lua would be an obvious choice.", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "id": "c02aea1", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02aea1", "parent_id": "t1_c02adw4", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 2, "controversiality": 0, "archived": true, "link_id": "t3_5yrao", "retrieved_on": 1427425883, "id": "c02adw4", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02adw4", "parent_id": "t3_5yrao", "body": "There is a tool called [smgn](http://citeseer.ist.psu.edu/384591.html) in the [SUIF](http://suif.stanford.edu/) project that I've found very useful. You write a grammar to parse input files into a simple parse tree. Then you write macro expansions on the parse tree to create your output.\n\nThis is an excellent way of working. Would be nicer to use a script language like Lua instead of the macro language they have but it gets the job done (hmm... I think I've given myself an idea for  an OpenSource project).", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02aeug", "gilded": 0, "link_id": "t3_5yrao", "retrieved_on": 1427425871, "score": 1, "score_hidden": false, "id": "c02aeug", "author": "leed25d", "created_utc": "1192986794", "distinguished": null, "edited": true, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t3_5yrao", "body": " One of my favorite macro subsystems of all time was the one embedded\nin the BLISS compiler family.  Bliss was a system programming language\nthat appeared on the scene just before --or possibly contemporary\nwith-- the C language.  At any rate I was writing programs in BLISS\nbefore I was writing programs in C.\n\nFor the curious minded, here is a link to a Bliss reference manual\n(macros are covered in chapter 16)\n\n    http://h71000.www7.hp.com/freeware/freeware80/bliss/documentation/blslref.pdf\n\nAnd here is a link to the Wikipedia page:\n    http://en.wikipedia.org/wiki/BLISS_%28programming_language%29\n", "author_flair_css_class": null}
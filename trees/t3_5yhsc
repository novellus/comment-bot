{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -7, "author": "sickofthisshit", "created_utc": "1192625830", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 4, "author": "Rhoomba", "created_utc": "1192627789", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192629818", "ups": 1, "gilded": 0, "link_id": "t3_5yhsc", "retrieved_on": 1427426223, "score": 1, "score_hidden": false, "id": "c029nny", "author": "bitwize", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c029nny", "parent_id": "t1_c029nip", "body": "http://programming.reddit.com/info/1cvs4/comments/c1cwft", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -1, "author": "vagif", "created_utc": "1192641646", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192660569", "ups": 1, "gilded": 0, "link_id": "t3_5yhsc", "retrieved_on": 1427426173, "score": 1, "id": "c029ri7", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "body": "\"Slow\" is relative. ABCL is fast as far as JVM languages go (Groovy, JRuby, Jython are all quite slow).", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c029ri7", "parent_id": "t1_c029p2t", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c029p2t", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": -1, "link_id": "t3_5yhsc", "retrieved_on": 1427426205, "body": "I've read on ABCL page that it is slow.\n\nClojure with its compile might be much faster.\n", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029nip", "id": "c029p2t", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 4, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yhsc", "retrieved_on": 1427426225, "body": "[Armed Bear Common Lisp](http://armedbear.org/abcl.html)\n\nOr if you prefer scheme\n\n[Kawa scheme](http://www.gnu.org/software/kawa/)", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029nip", "parent_id": "t1_c029ndn", "id": "c029nip", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 5, "author": "[deleted]", "created_utc": "1192645233", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c029q0r", "gilded": 0, "link_id": "t3_5yhsc", "retrieved_on": 1427426193, "score": 1, "score_hidden": false, "body": "Scheme has nil as the empty list, just not as false. \n\nI don't quite get his description [above](http://programming.reddit.com/info/5yhsc/comments/c029ojd), but it seems to imply rest returns nil=false when an abstract container is empty, but nil is not a cons cell.", "author": "sickofthisshit", "created_utc": "1192648345", "distinguished": null, "edited": true, "archived": true, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c029pkn", "id": "c029q0r", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029pkn", "ups": 5, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yhsc", "retrieved_on": 1427426199, "score_hidden": false, "body": "   On one hand, I'm dubious of the value of ginning up whole new dialects of Lisp this late in the game. \n\nOTOH, I don't think you can fairly call a choice to follow the Scheme tradition instead of the CL tradition \"gratuitous\". That covers Lisp-1osity and False being distinct from the empty list.\n\nBut \"let\" binding sequentially is just weird. Like, [newLISP](http://newlisp.org) weird.    ", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c029ndn", "id": "c029pkn", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c029ndn", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": -7, "link_id": "t3_5yhsc", "retrieved_on": 1427426227, "body": "Common Lisp or it didn't happen.\n\n[Gratuitous design choices](http://clojure.sourceforge.net/reference/lisps.html)\n\nEDIT: To be fairer, there is some [attempt to explain](http://clojure.sourceforge.net/rationale.html) *some* of the choices, but really, EDIT^2: [SEE ABOVE default to dynamic scope?](http://programming.reddit.com/info/5yhsc/comments/c029ojd) Empty list not nil? A Lisp-1? let binds sequentially? \n\nAre those really the price to pay for supposed concurrency benefits and good use of the JVM? Or are they arbitrary and unwise departures from Lisp tradition and experience?", "archived": true, "distinguished": null, "edited": true, "parent_id": "t3_5yhsc", "id": "c029ndn", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 14, "author": "charlieb", "created_utc": "1192627660", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 7, "author": "w-g", "created_utc": "1192628145", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 4, "gilded": 0, "link_id": "t3_5yhsc", "retrieved_on": 1427426222, "score": 4, "id": "c029nuc", "author": "charlieb", "created_utc": "1192631665", "distinguished": null, "edited": false, "body": "Also apparently [Bigloo Scheme](http://www-sop.inria.fr/mimosa/fp/Bigloo/doc/bigloo-24.html) can also target the JVM. ", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c029nuc", "parent_id": "t1_c029njl", "score_hidden": false, "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 4, "author": "sickofthisshit", "created_utc": "1192634732", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 32, "author": "richhickey", "created_utc": "1192636921", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 6, "author": "sickofthisshit", "created_utc": "1192637795", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c029oom", "gilded": 0, "link_id": "t3_5yhsc", "retrieved_on": 1427426210, "score": 13, "score_hidden": false, "body": "Right - Clojure vars are similar to top-level defvars in CL.\n\nFunction args and let-bound locals are not variables in Clojure - they are immutable.\n\nVars get dynamically re-bound using the \"binding\" macro, not let.\n\nMore items for the differences list, I see...", "author": "richhickey", "created_utc": "1192638352", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 13, "parent_id": "t1_c029omi", "id": "c029oom", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029omi", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 6, "link_id": "t3_5yhsc", "retrieved_on": 1427426211, "id": "c029omi", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c029ojd", "body": " Perhaps I mis-interpreted the bullet point on the \"Differences\" page. Am I to take it that Vars are the analogous to what is defined in CL with \"top-level defvar/defparameter\", and that function args, etc., are not \"Vars\"? If so, then how do you distinguish between dynamic rebinding in lambda lists, etc., and introducing lexical bindings?\n\n&gt; All Vars can be dynamically rebound, no special declaration. Since Clojure is a Lisp-1, functions can be dynamically rebound. \n\nAs for the nil/empty list, is there no cons cell concept at all? What is the default for optional lambda arguments/let bindings/etc.? ", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "SuperGrade", "created_utc": "1192641565", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 6, "author": "[deleted]", "created_utc": "1192643239", "children": [{"controversiality": 0, "retrieved_on": 1427426201, "subreddit_id": "t5_2fwo", "archived": true, "ups": 1, "gilded": 0, "link_id": "t3_5yhsc", "downs": 0, "score": 1, "body": "Caveat: I think he has to not be gratuitously changing the order-of-evaluation from CL arguments-left-to-right.", "author": "sickofthisshit", "created_utc": "1192643750", "distinguished": null, "edited": false, "id": "c029pdi", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029pdi", "parent_id": "t1_c029paj", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": 6, "name": "t1_c029paj", "controversiality": 0, "archived": true, "link_id": "t3_5yhsc", "retrieved_on": 1427426202, "score_hidden": false, "id": "c029paj", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c029p29", "body": " You certainly can build CL's LET out of LET* (using macros, of course). Figuring out how is a pretty good exercise; alternatively, you can find the answer [here](http://home.pipeline.com/~hbaker1/MetaCircular.html). \n\nI'm curious about how FN forms work in Clojure, too. After all, in CL and Scheme,\n\n    (let ((x a) (y b)) ...stuff...)\n\nis equivalent to \n\n    ((lambda (x y) ...stuff...) a b)\n\nwithout any issue about ordering. ", "author_flair_css_class": null}], "subreddit": "programming", "ups": 3, "name": "t1_c029p29", "controversiality": 0, "archived": true, "link_id": "t3_5yhsc", "retrieved_on": 1427426205, "score_hidden": false, "id": "c029p29", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029ojd", "body": "On let vs let*:\r\n\r\nOne thing to point out, while let* is often more useful, (CL's) let has special properties:\r\n\r\n    (let ((a 9) (b (* a 7))) .... )\r\n    ; b refers to a prior a\r\n\r\nthat cannot be rebuilt in terms of let*.  It's kind of an order-independence/hygiene mechanism in itself.\r\n\r\nGood luck in the new effort, though - sounds very interesting.\r\n\r\n", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192648839", "ups": 3, "gilded": 0, "link_id": "t3_5yhsc", "retrieved_on": 1427426192, "score": 3, "body": "As for the nil === empty list, isn't the awkwardness in Scheme due to nil != false, rather than nil === '() === empty list?", "id": "c029q3w", "author": "sickofthisshit", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c029q3w", "parent_id": "t1_c029ojd", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427426142, "subreddit_id": "t5_2fwo", "archived": true, "ups": 5, "gilded": 0, "link_id": "t3_5yhsc", "downs": 0, "score": 5, "body": "&gt; I want it to be attractive to people who might otherwise use JRuby, Jython or Groovy.\n\nWell, I was thinking of learning Groovy, but it looks like I might be learning Clojure instead.\n\nI hope your project gets the optimal amount of attention and praise and whatever else you need/want to keep it going. :)\n\nThis might be a killer \"app\" for JVM.", "author": "[deleted]", "created_utc": "1192695982", "distinguished": null, "edited": false, "id": "c029txx", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029txx", "parent_id": "t1_c029ojd", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 32, "name": "t1_c029ojd", "controversiality": 0, "archived": true, "link_id": "t3_5yhsc", "retrieved_on": 1427426212, "score_hidden": false, "id": "c029ojd", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c029o7l", "body": " First - a correction. Clojure does not default to dynamic scope any more than does Common Lisp. Could you point out where in the docs it seems to imply that? Clojure is lexically scoped, locals are always lexical, and Clojure is stricter than CL in its flagging of free references to undeclared globals. CL's defvar defines a dynamic variable and Clojure's def does something similar. \n\nYour other points are subjective, but my decisions were not gratuitous, so I'll try to explain them.\n\n- In Clojure, first and rest are functions of the sequence abstraction, not hard-wired to slots in a concrete cons cell, and rest does in fact return nil when there are no more items, as do all of the sequence functions. Thus iteration can use direct conditional tests rather than awkward comparisons with () or calls to null? or whatever. But lists, maps and vectors are all container abstractions on equal footing, and can all be empty. In addition, there can be multiple kinds of concrete lists. Which one should be represented by nil?\n\n- Lisp-1 vs. 2 is somewhat of a religious issue. I find Lisp-1 more elegant, I like the evaluated fn position, I don't like funcall and #'. But I also like defmacro, and have gone to a lot of trouble to make Lisp-1 compatible with defmacro without hygiene nightmares. This is reflected in the differences between symbols and vars, the difference between quote and backquote, and the differences between Clojure namespaces and CL's packages. There are good reasons that things are the way they are, even if they are not apparent from a first glance at the docs.\n\n- let vs. let\\*. In CL I use let\\* far more frequently. I wanted Clojure to have only one let, and for it to be sequential, and decided the \\* at the end is not going to be meaningful to newcomers. It's already different from CL in that it uses [] around the bindings, and they aren't individually parenthesized. \n\nIn short, it's not an objective of Clojure that one be able to dump their CL/Scheme code into Clojure and have it work. Clojure is a 'from-scratch' Lisp, and it has names from CL, Haskell and SML (which binds sequentially in let, iirc). Clojure doesn't have car and cdr. I want it to be attractive to people who might otherwise use JRuby, Jython or Groovy. Thus the 'differences' page, to keep experienced Lispers from getting tripped up when their assumptions are incorrect.\n\nThe docs are a work in progress and I may try to put in more of the 'why's, time permitting. ", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 4, "controversiality": 0, "archived": true, "link_id": "t3_5yhsc", "retrieved_on": 1427426216, "id": "c029o7l", "author_flair_text": null, "distinguished": null, "edited": true, "name": "t1_c029o7l", "parent_id": "t1_c029njl", "body": "There's a difference between differences that are definitive and differences that are gratuitous. A Lispy way to handle non-mutable data is interesting. Aligning with the JVM view of the universe *potentially* has large advantages. Extensible sequence protocols/\"more generic functions\" is an example where lots of people have wanted to figure out a solution.\n\n[EDIT: see response below--Dynamic scope as the default was known to be dangerous in the 1960s, and discovered to be irrelevant to efficient compilation in the 1970s.]\n\n\"Let binds sequentially\" is just going to confuse. Nil not equal to the empty list smacks of personal aesthetics trumping a huge element of Lisp tradition.", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 7, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yhsc", "retrieved_on": 1427426225, "body": "Maybe because someone thought that writing a new dialect that is somewhat different, and targetting the JVM, would be a nice idea?\n\nIt may not me \"more expressive\" than Common Lisp, but it could perhaps be more convenient for some people.\n\n", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029njl", "parent_id": "t1_c029nic", "id": "c029njl", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 93, "author": "richhickey", "created_utc": "1192631454", "children": [{"controversiality": 0, "retrieved_on": 1427426211, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c029om3", "gilded": 0, "link_id": "t3_5yhsc", "downs": 0, "score": 15, "score_hidden": false, "id": "c029om3", "author": "newton_dave", "created_utc": "1192637682", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 15, "parent_id": "t1_c029nto", "body": "Oh, you and your \"answers\" and \"thoughtfulness\", bah humbug I say!\n\nDefinitely something I'll consider annoying my boss with. (Clojure, I mean, not your \"answers\" and \"thoughtfulness\". Although that might annoy him too; it does when it comes from me :D", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192653266", "ups": 2, "gilded": 0, "link_id": "t3_5yhsc", "retrieved_on": 1427426184, "score": 2, "body": "Although extensibility of sequence types is not a requirement of Common Lisp, implementations are not forbidden to, and indeed many of them already allow it. (sbcl comes to mind)\n\nEven if you couldn't, there are mechanisms you can use to get the same effect.", "author": "azimuth", "author_flair_text": null, "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c029qp7", "parent_id": "t1_c029nto", "score_hidden": false, "id": "c029qp7"}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c029sy4", "gilded": 0, "link_id": "t3_5yhsc", "retrieved_on": 1427426155, "score": 9, "score_hidden": false, "body": "I am very impressed with how you have thought this out; I will definitely be watching your work as it progresses and brings me a good tool to when talking to Javaland.\n\nMajor nitpick: a socket-based swank-like facility is a nearly dealbreaker for me. In many ways SWANK+SLIME is far ahead of being able to be one with your live, running program than many modern IDEs or scripting languages easily provide for.\n\nIn my blog post some time time ago, \"[The Lisp Before the End of My Lifetime](http://metalinguist.wordpress.com/2007/08/04/the-lisp-before-the-end-of-my-lifetime/)\" this falls under category one: \"the compiler (running environment, really) is your friend\"\n\nFinally, having read more of your page, I really like your usage of an anaphoric variable to do recursion. It nicely ties up those annoying 'forgot-to-change-recursive-call' bugs that annoy from time to time. One way to take it even further would be to just have 'return' be a quasi-reserved symbol in every scope that would yield a value (if any) to the caller. That's what return typically is anyway, but it'd be nice to treat it as a first class value sometimes instead of a simple reserved word.", "author": "Dan_Farina", "created_utc": "1192678630", "distinguished": null, "edited": true, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 9, "parent_id": "t1_c029nto", "id": "c029sy4", "author_flair_css_class": null}], "subreddit": "programming", "ups": 93, "name": "t1_c029nto", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yhsc", "retrieved_on": 1427426222, "score_hidden": false, "body": "I'm Clojure's author.\n\nFirst off, I think Common Lisp and Scheme are great, and I cite ABCL, Kawa and SISC as good implementations of standard Lisps for the JVM. If you think Common Lisp or Scheme should be the last Lisp(s) ever written, then Clojure isn't for you and there isn't much to discuss.\n\nClojure has some tangible, non-superficial differences from Common Lisp and Scheme. They yield something that is different, and might or might not be more suitable depending on your programming style and application domain.\n\n- Most of the core data structures are immutable. This is part of an overall design philosophy to make Clojure a good language for concurrent/multi-core programming.\n\n- Most of the data structures are extensible abstractions. This is different from Common Lisp where you can't extend the sequence functions to your own data structures, for instance. Even invocability is an abstraction - allowing maps to be functions of their keys and vice-versa.\n\n- Clojure extends code-as-data to maps and vectors in a deep way. They have literal reader syntax, the compiler understands them, backquote works with them, they support metadata etc. Because they are efficiently immutable and persistent, they support very Lisp-y recursive usage, shared structure etc, in ways Common Lisp's hash tables and vectors cannot.\n\n- Clojure embraces its host platform in ways that the standard Lisps ported to the JVM can't. For instance, Common Lisp's strings could never be Java Strings since the former are mutable and the latter are not. Clojure strings are Java Strings. The Clojure sequence library functions work over Clojure and Java data structures transparently. Etc.\n\n- Clojure has metadata as a core concept, not something one could retrofit onto the built-in Common Lisp types.\n\n- Clojure is designed for concurrency. Vars (similar to CL special variables) have explicit threading semantics. Clojure has a software transactional memory system. Etc.\n\nIn short, Clojure is (non-gratuitously) different. If you don't want different, you don't want Clojure. If you like Lisp and need to write multi-threaded programs for the JVM, you might find something interesting in Clojure.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029nic", "id": "c029nto", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 12, "author": "SuperGrade", "created_utc": "1192643882", "children": [{"controversiality": 0, "retrieved_on": 1427426162, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c029sf6", "gilded": 0, "link_id": "t3_5yhsc", "downs": 0, "score": 2, "score_hidden": false, "body": "&gt; The system seems to highlight functional data \n&gt; structures - a functional hashtable and map \n&gt; (lispers usually use a functional list either \n&gt; inadvertently or not). \n\nMaybe see [FSet](http://common-lisp.net/project/fset/)\n\n- \n", "author": "DGolden", "created_utc": "1192670654", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 2, "parent_id": "t1_c029pe8", "id": "c029sf6", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 12, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yhsc", "retrieved_on": 1427426201, "body": "I've actually gone and bothered to read the web page on this - I initially misunderstood the scope of this project.\r\n\r\nThe title here on the Reddit really doesn't help.\r\n\r\n\"Lisp on the JVM\" conjures up, first, a CL on JVM (of which one or two already exist, which may or may not be production grade).\r\n\r\nSecondly, it highlights that this is for connecting with the JVM; but wrt the scope of this project and what it means, that, too, is kind of secondary (at least that's how it appears to me).\r\n\r\nClojure appears to be a fairly different language that just happens to resemble CL.\r\n\r\nIt leverages immutability in areas that the other Lisps can't assume it, either forcing it or at least leveraging it in optimizations.\r\n\r\nThe system seems to highlight functional data structures - a functional hashtable and map (lispers usually use a functional list either inadvertently or not).  These types of data structures are loosely exposed in haskell, and can be replicated in other languages; but are not common in the normal Lisper's lexicon.  (At the very least, I'll want to steal these for CL development).\r\n\r\nGoing by the docs, Software transactional memory is highly integrated with all this, and the data structures and language intended to induce coding that interoperates efficiently with STM.\r\n\r\n\r\n", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029pe8", "parent_id": "t1_c029nic", "id": "c029pe8", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 6, "author": "feijai", "created_utc": "1192681854", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "easye", "created_utc": "1192785772", "children": [{"distinguished": null, "controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02a1xi", "gilded": 0, "link_id": "t3_5yhsc", "retrieved_on": 1427426038, "score": 4, "score_hidden": false, "id": "c02a1xi", "author": "feijai", "created_utc": "1192794790", "author_flair_text": null, "edited": false, "subreddit_id": "t5_2fwo", "ups": 4, "parent_id": "t1_c02a1jv", "body": "&gt; If the cart ain't moving fast enough for you, why don't you get out and push?\n\nI didn't say I wanted ABCL to be moving faster: just that Kawa was way way ahead.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 1, "name": "t1_c02a1jv", "controversiality": 0, "archived": true, "link_id": "t3_5yhsc", "retrieved_on": 1427426043, "score_hidden": false, "id": "c02a1jv", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029t5t", "body": "If the cart ain't moving fast enough for you,  why don't you get out and push?\n\nWhile ABCL does not currently have a core set of developers with commit rights, a roadmap, and so forth, patches are promptly reviewed and comitted to the CVS HEAD.  Bug reports with reproducible test cases are answered fairly fast as well.\n\nAs for speed, I find it surprisingly fast for binding together Java libraries, as [have others][1].  For any serious use, I would recommend using Alan Ruttenburgs [JSS][2] package, which introduces a nice read macro syntax on '#\"' *and* dynamically looks up classes on a Classpath (ala Beanshell):\n\n(let ((sw (new 'StringWriter)))\n  (#\"write\" sw \"Hello \")\n  (#\"write\" sw \"World\")\n   (print (#\"toString\" sw)))\n\n\n\n[1]: http://article.gmane.org/gmane.editors.j.devel/1382\n\n[2]: http://mumble.net:8080/svn/lsw/", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 6, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yhsc", "retrieved_on": 1427426152, "body": "First off, ABCL hasn't seen an update since March, and stands at version 0.0.10.  It's rife with bugs, incomplete implementations, and all sorts of gunk.  Hardly a \"proper Common Lisp\".\n\nIf you're looking for a proper (by which I mean \"well tested and fast\") lisp implementation, albeit in scheme, Kawa is definitely the one to beat.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029t5t", "parent_id": "t1_c029nic", "id": "c029t5t", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c029nic", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 14, "link_id": "t3_5yhsc", "retrieved_on": 1427426225, "id": "c029nic", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5yhsc", "body": "Why oh why would I use that when there's a proper [Common Lisp that targets the JVM](http://armedbear.org/abcl.html)?", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 17, "author": "sblinn", "created_utc": "1192628381", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "archived": true, "ups": 1, "gilded": 0, "link_id": "t3_5yhsc", "retrieved_on": 1427426163, "score": 1, "id": "c029sa8", "author": "[deleted]", "created_utc": "1192669034", "distinguished": null, "edited": false, "body": "[deleted]", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029sa8", "parent_id": "t1_c029nk7", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192669225", "ups": 1, "gilded": 0, "link_id": "t3_5yhsc", "retrieved_on": 1427426163, "score": 1, "id": "c029sb1", "author": "[deleted]", "archived": true, "distinguished": null, "edited": true, "body": "[deleted]", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c029sb1", "parent_id": "t1_c029nk7", "score_hidden": false, "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 6, "author": "richhickey", "created_utc": "1192669444", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "sblinn", "created_utc": "1192715164", "children": [{"controversiality": 0, "retrieved_on": 1427426114, "subreddit_id": "t5_2fwo", "created_utc": "1192724509", "ups": 7, "gilded": 0, "link_id": "t3_5yhsc", "downs": 0, "score": 7, "id": "c029w27", "author": "richhickey", "archived": true, "distinguished": null, "edited": false, "body": "Sorry, I didn't realize you were up and running. The example needs the latest boot.clj.\nYou can grab the latest [release](http://sourceforge.net/project/showfiles.php?group_id=137961&amp;package_id=151481&amp;release_id=547945)\n", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029w27", "parent_id": "t1_c029uy5", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": 3, "name": "t1_c029uy5", "controversiality": 0, "archived": true, "link_id": "t3_5yhsc", "retrieved_on": 1427426129, "score_hidden": false, "id": "c029uy5", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029sbt", "body": "&gt; java.lang.Exception: REPL:2: REPL:2: REPL:2: REPL:3: REPL:6: Unable to resolve symbol: dotimes in this context\n\nAs usual, I'm probably doing it wrong.", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 6, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yhsc", "retrieved_on": 1427426163, "body": "Good point - done!\n\n[Refs and Transactions](http://clojure.sourceforge.net/reference/refs.html)\n", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029sbt", "parent_id": "t1_c029nk7", "id": "c029sbt", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029nk7", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 17, "link_id": "t3_5yhsc", "retrieved_on": 1427426225, "id": "c029nk7", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t3_5yhsc", "body": "This actually seems to be a nice, well-thought, well-documented and useful project. The value might be more easily seen if there were some kind of example on the \"Refs and Transactions\" reference page.", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 12, "author": "Heow", "created_utc": "1192632585", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1192636164", "name": "t1_c029oez", "gilded": 0, "link_id": "t3_5yhsc", "retrieved_on": 1427426214, "score": 2, "score_hidden": false, "body": "Do you know where the other Lisp groups are listed?", "author": "OMouse", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 2, "parent_id": "t1_c029nxz", "id": "c029oez", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "newton_dave", "created_utc": "1192637773", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 5, "author": "[deleted]", "created_utc": "1192641033", "children": [{"controversiality": 0, "retrieved_on": 1427426205, "subreddit_id": "t5_2fwo", "archived": true, "ups": 11, "gilded": 0, "link_id": "t3_5yhsc", "downs": 0, "score": 11, "body": "Yeah, but one trip can be expensed!", "author": "sickofthisshit", "created_utc": "1192641546", "distinguished": null, "edited": false, "id": "c029p22", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029p22", "parent_id": "t1_c029ozb", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 5, "name": "t1_c029ozb", "controversiality": 0, "archived": true, "link_id": "t3_5yhsc", "retrieved_on": 1427426207, "score_hidden": false, "id": "c029ozb", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029omf", "body": "Now that's a very very hard choice to make &lt;/sarcasm&gt;.\n\nGotta love hundreds of gratuitous Java web frameworks, tons of different XML schemata, and of course a huge, not very fast, web server.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 2, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yhsc", "retrieved_on": 1427426211, "body": "Oh, of course; during ApacheCon :(", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029omf", "parent_id": "t1_c029nxz", "id": "c029omf", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029nxz", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 12, "link_id": "t3_5yhsc", "retrieved_on": 1427426220, "id": "c029nxz", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5yhsc", "body": "Great timing, Rich will be presenting Clojure Nov 13th at LispNYC!   http://lispnyc.org", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 6, "author": "z5h", "created_utc": "1192637657", "children": [{"controversiality": 0, "retrieved_on": 1427426205, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c029p40", "gilded": 0, "link_id": "t3_5yhsc", "downs": 0, "score": 1, "score_hidden": false, "id": "c029p40", "author": "[deleted]", "created_utc": "1192641926", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c029om1", "body": "[deleted]", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 20, "author": "sblinn", "created_utc": "1192642017", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192647947", "ups": 5, "gilded": 0, "link_id": "t3_5yhsc", "retrieved_on": 1427426195, "score": 5, "score_hidden": false, "id": "c029pyc", "author": "z5h", "author_flair_text": null, "distinguished": null, "edited": true, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c029pyc", "parent_id": "t1_c029p4j", "body": " I jumped the gun a bit quick on that. You get an upmod. Thanks.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 20, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yhsc", "retrieved_on": 1427426204, "body": "However the inclusion of the `recur` special form allows you to define such tail calls.\n", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029p4j", "parent_id": "t1_c029om1", "id": "c029p4j", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 6, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yhsc", "retrieved_on": 1427426211, "body": "There is no tail-call optimization.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029om1", "parent_id": "t3_5yhsc", "id": "c029om1", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "SuperGrade", "created_utc": "1192641019", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 5, "author": "[deleted]", "created_utc": "1192642312", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "SuperGrade", "created_utc": "1192642576", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c029pft", "gilded": 0, "link_id": "t3_5yhsc", "retrieved_on": 1427426200, "score": 1, "score_hidden": false, "body": " I think the issue is deeper. OK, so immutability has certain advantages. *Exactly* which CL design misfeatures affect that, and what needs to be changed? What effect does it have on existing code? What effect does it have on implementors? Aesthetics?\n\nLike the rationale format in the ANSI CL standard.\n\nHowever, the approach here seems to be \"well, perfect excuse to start from a clean slate!\" and explicitly throwing out compatibility of any code. The thing is, this dilutes the value of Lisp knowledge and experience and established idioms.\n\nLisp has a hard enough time as it is. CL seems flexible enough that it can move like an amoeba, rather than having new dialects start from scratch.\n ", "author": "sickofthisshit", "created_utc": "1192644173", "distinguished": null, "edited": true, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c029p79", "id": "c029pft", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 3, "score_hidden": false, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yhsc", "retrieved_on": 1427426203, "body": "For (1) I meant his clojure language written in CL - it could be built on top of mutable data structures but conceal the mutability - based on having a stricter subset of CL be useful.\r\n\r\nBut that said - yeah, it'd just mean duplication of effort when it comes time to make a JVM version.  I'm inclined toward retraction of my original statement as naive (please disregard :) )\r\n\r\n", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029p79", "parent_id": "t1_c029p65", "id": "c029p79", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 0, "author": "justinhj", "created_utc": "1192642985", "children": [{"controversiality": 0, "retrieved_on": 1427426202, "subreddit_id": "t5_2fwo", "created_utc": "1192643303", "name": "t1_c029pb4", "gilded": 0, "link_id": "t3_5yhsc", "downs": 0, "score": -1, "score_hidden": false, "id": "c029pb4", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": -1, "parent_id": "t1_c029p9f", "body": "Is that a goal? From what I can tell Clojure only targets the JVM.", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 7, "author": "richhickey", "created_utc": "1192653875", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192664431", "ups": 5, "gilded": 0, "link_id": "t3_5yhsc", "retrieved_on": 1427426168, "score": 5, "score_hidden": false, "id": "c029rwf", "author": "justinhj", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c029rwf", "parent_id": "t1_c029qsa", "body": "That makes sense, thanks.\n", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029qsa", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 7, "link_id": "t3_5yhsc", "retrieved_on": 1427426183, "id": "c029qsa", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029p9f", "body": "I maintained a port of Clojure to .Net for a long time early on, when it generated Java/C# source rather than compiling to bytecode. I got tired of doing everything twice, and after dropping .Net made much more progress.\n\nI decided that trying to support both would mean the base language and libraries would always be limited by having to make everything work identically in both places. Or one platform would become more weakly supported. Targeting only Java lets the relationship run deep, as the implementation and in particular the libraries can presume Java.", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427426168, "subreddit_id": "t5_2fwo", "created_utc": "1192664351", "ups": 1, "gilded": 0, "link_id": "t3_5yhsc", "downs": 0, "score": 1, "body": "[deleted]", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "id": "c029rw8", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029rw8", "parent_id": "t1_c029p9f", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 0, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yhsc", "retrieved_on": 1427426203, "body": "How would Clojure map to the .net framework? Apart from .net not having a J in it?\n\n", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029p9f", "parent_id": "t1_c029p65", "id": "c029p9f", "author_flair_css_class": null}], "subreddit": "programming", "ups": 5, "name": "t1_c029p65", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yhsc", "retrieved_on": 1427426204, "score_hidden": false, "body": "On the site it explains a lot about why this approach isn't taken, and basically it comes down to design decisions made in CL don't fit the goal of his language (all immutable data structures, etc), and it doesn't map particularly well to the JVM.\n\nThe point of Clojure, from reading the site, seems to be getting away from worrying about backwards compatibility with CL or Scheme. Tying the design to either one would limit what could be done with the language.\n\nNot to mention the existing JVM CL implementation (ABCL) isn't particularly production ready.", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c029oz9", "id": "c029p65", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029oz9", "ups": 3, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yhsc", "retrieved_on": 1427426207, "score_hidden": false, "body": "Sounds interesting.  However, I think there are 2 elements in play here:\r\n\r\n1.  The language itself.\r\n2.  The application of the language to JVM\r\n\r\nCan't (1) be explored in CL independently?  May be a nice way to develop, period - and it doesn't seem to preclude running on top of an existing CL.\r\n\r\n(2) - A CL on JVM would be more useful and have wider appeal - but if (1) were written in CL (assuming it could convert to CL nicely) then Clojure could still take advantage of tying to JVM.\r\n\r\n\r\n\r\n", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5yhsc", "id": "c029oz9", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "vagif", "created_utc": "1192641850", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "[deleted]", "created_utc": "1192642173", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "sickofthisshit", "created_utc": "1192644590", "children": [{"controversiality": 0, "retrieved_on": 1427425920, "subreddit_id": "t5_2fwo", "created_utc": "1192918128", "score": 3, "link_id": "t3_5yhsc", "downs": 0, "name": "t1_c02ab3h", "score_hidden": false, "body": "My opinion:\n\n    (javax.swing.JOptionPane showMessageDialog nil \"Hello World!\")\n\nor\n\n    (. javax.swing.JOptionPane showMessageDialog nil \"Hello World!\")", "author": "ehird", "archived": true, "distinguished": null, "edited": false, "gilded": 0, "author_flair_text": null, "subreddit": "programming", "ups": 3, "parent_id": "t1_c029phv", "id": "c02ab3h", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 0, "name": "t1_c029phv", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yhsc", "retrieved_on": 1427426200, "score_hidden": false, "body": "Ignoring the choice he made to make it a Lisp-1, Lisp already has a method call syntax. `(method &amp;rest args)`\n\nI don't know Java, but some possibilities are \n\n    ((javax.swing.JOptionPane showMessageDialog) nil \"Hello World!\")\n\nor as vagif suggested\n\n    ((showMessageDialog javax.swing.JOptionPane) nil \"Hellow World!\")\n\nNaming java methods and determining them from the java object they are attached to is a separate problem from where to put the method in the expression.\n\nPresumably other JVM Lisp dialects have tackled this.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029p5f", "id": "c029phv", "author_flair_css_class": null}], "subreddit": "programming", "ups": 2, "name": "t1_c029p5f", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yhsc", "retrieved_on": 1427426204, "score_hidden": false, "body": " I don't think it is terribly confusing. I understand what is going on there. The dot as a function is a method call,\n\n    javax.swing.JOptionPane.showMessageDialog(nil, \"Hello World\")\n\nand the dots in between names are name spaces. I don't think Clojure's usage is inconsistent, but I haven't used a lot of Java, either. ", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c029p3r", "id": "c029p5f", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427426186, "subreddit_id": "t5_2fwo", "created_utc": "1192652806", "ups": 14, "gilded": 0, "link_id": "t3_5yhsc", "downs": 0, "score": 14, "body": "dot (.) is the member-access operator. It is a special operator, and belongs in the function position. Generally, you can understand it as:\n\n&gt; (member-of target member)\n\nWhere the target can be a class name (for statics, and might contain dots in the class name per Java), or an expression (for instance members). The member can be a field name or a method call. The syntax you propose would require the compiler to know from the names alone that this was Java-land, something I want to avoid. Using the dot operator effectively places all Java names in a different namespace (yup, Clojure is a Lisp-2 after all!).\n\nAlso, anything that would require\n\n&gt; (showMessageDialog javax.swing.JOptionPane)\n\nto evaluate to a first-class function object could get expensive. I have some experience with exposing Java calls to Lisp - [jFli](http://jfli.sourceforge.net/) and [Foil](http://foil.sourceforge.net/), and I like this new syntax best. It has a nice extension to the dotdot (..) macro:\n\n&gt; (.. System (getProperties) (get \"os.name\")) ", "author": "richhickey", "archived": true, "distinguished": null, "edited": false, "id": "c029qn7", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029qn7", "parent_id": "t1_c029p3r", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 3, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yhsc", "retrieved_on": 1427426205, "body": "  Question to the author.\n\n&gt;(. javax.swing.JOptionPane (showMessageDialog nil \"Hello World\"))\n\nHere you have dot as a function (lisp way) and dots in between names (java way). \n\nThis is not consistent and confusing. What are the rules ? When to use which approach ?\n\nI think more consistent and lispy would be \n\n&gt;(showMessageDialog javax.swing.JOptionPane nil \"Hello World\")\n\nor\n\n&gt;((showMessageDialog javax.swing.JOptionPane)  nil \"Hello World\")\n  ", "archived": true, "distinguished": null, "edited": true, "name": "t1_c029p3r", "parent_id": "t3_5yhsc", "id": "c029p3r", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 5, "author": "[deleted]", "created_utc": "1192642061", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c029p92", "gilded": 0, "link_id": "t3_5yhsc", "retrieved_on": 1427426203, "score": 3, "body": "Having easy to use STM should allow easy parallelisation meaning that's going to be a bug peformance boost for applications that are not trivial to parallelise using locks. ", "id": "c029p92", "author": "justinhj", "created_utc": "1192642922", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 3, "parent_id": "t1_c029p4u", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029p4u", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 5, "link_id": "t3_5yhsc", "retrieved_on": 1427426204, "body": "I guess I'll be the one to ask: what is performance like? Any benchmarks or rough comparisons to other languages?", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5yhsc", "id": "c029p4u", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c029p51", "gilded": 0, "link_id": "t3_5yhsc", "retrieved_on": 1427426204, "score": 6, "body": "Is there an example how one would use Clojure as a servlet ?\n\nI would be very interested to to mixin clojure into my web app and then gradually move to it.\n", "id": "c029p51", "author": "vagif", "created_utc": "1192642125", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 6, "parent_id": "t3_5yhsc", "score_hidden": false, "author_flair_css_class": null}
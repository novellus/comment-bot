{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 6, "author": "[deleted]", "created_utc": "1193154267", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 9, "author": "llimllib", "created_utc": "1193154532", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 10, "author": "[deleted]", "created_utc": "1193155834", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 5, "author": "llimllib", "created_utc": "1193156112", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "SuperGrade", "created_utc": "1193163215", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "llimllib", "created_utc": "1193163938", "children": [{"controversiality": 0, "retrieved_on": 1427425661, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02av32", "gilded": 0, "link_id": "t3_5yxpy", "downs": 0, "score": 2, "score_hidden": false, "id": "c02av32", "author": "SuperGrade", "created_utc": "1193167482", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 2, "parent_id": "t1_c02auk7", "body": "\r\nThis \"single-dispatch\"-method-centric expression form is *really* going to get tired.  Are people going to be sticking functional constructs to every type?\r\n\r\nWhat's annoying about being forced to qualify static function calls is that the alternative to single-dispatch-method use is syntactically demoted as a solution.\r\n", "author_flair_css_class": null}], "subreddit": "programming", "ups": 1, "name": "t1_c02auk7", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yxpy", "retrieved_on": 1427425667, "score_hidden": false, "body": "not to my knowledge. ", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02augr", "id": "c02auk7", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "grauenwolf", "created_utc": "1193167932", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "SuperGrade", "created_utc": "1193168060", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1193188712", "gilded": 0, "link_id": "t3_5yxpy", "retrieved_on": 1427425625, "name": "t1_c02axv0", "score_hidden": false, "body": "If you use the line\r\n\r\n    Imports SomeClass\r\n\r\nat the head of the file, then all the static methods of that class are imported into the current namespace. In effect this means you can use them without prefixing the class name anywhere in the file.\r\n\r\nYou can also import a class at the project level. Same effect as above, but it applies to all files.\r\n\r\n-------\r\n\r\nNow if you are writing your own functions, then you can put them in a Module instead of a pretend-Class like C#. Functions in modules are automatically promoted to their containing namespace, thus you never need to write \"SomeModule.SomeFunction\".\r\n ", "author": "grauenwolf", "archived": true, "distinguished": null, "edited": true, "score": 1, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c02av6t", "id": "c02axv0", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 1, "name": "t1_c02av6t", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yxpy", "retrieved_on": 1427425659, "score_hidden": false, "id": "c02av6t", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02av6d", "body": "Is that the ability to lexically scope a section of code for a specific object, or is there a way to refer to \"global\" functions? ", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 1, "name": "t1_c02av6d", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yxpy", "retrieved_on": 1427425659, "score_hidden": false, "body": "Assuming you are talking about .NET, just use VB instead in C#. It elminated the need for such nonesense a decade ago. ", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02augr", "id": "c02av6d", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 1, "controversiality": 0, "archived": true, "link_id": "t3_5yxpy", "retrieved_on": 1427425669, "id": "c02augr", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02augr", "parent_id": "t1_c02atit", "body": "Is there any plan to get rid of the need to type \"SomeClass\":\r\n\r\nSomeClass.SomeCoolFunction()\r\n\r\nWhen referring to a function?\r\n\r\n", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02atit", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 5, "link_id": "t3_5yxpy", "retrieved_on": 1427425681, "body": "I hope people realize that Limit(this type of C# hackery) ~= F# .\n\nC# 3.0 will likely be a way to sneak functional programming in the backdoor.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02ath6", "id": "c02atit", "author_flair_css_class": null}], "subreddit": "programming", "ups": 10, "name": "t1_c02ath6", "controversiality": 0, "archived": true, "link_id": "t3_5yxpy", "retrieved_on": 1427425681, "score_hidden": false, "id": "c02ath6", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02ataa", "body": "Then it should be a throw-up sound, not a sigh.\n\nI solved the problem by not using C#.", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 9, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yxpy", "retrieved_on": 1427425684, "body": "Because it's verbose and gross?", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02ataa", "parent_id": "t1_c02at8n", "id": "c02ataa", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 6, "controversiality": 0, "archived": true, "link_id": "t3_5yxpy", "retrieved_on": 1427425684, "id": "c02at8n", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02at8n", "parent_id": "t3_5yxpy", "body": "Why the sigh?", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193163678", "ups": 3, "gilded": 0, "link_id": "t3_5yxpy", "retrieved_on": 1427425669, "score": 3, "body": "This kind of ugliness ought to be banned outside of \"Obfuscated X\" contests.", "author": "spookylukey", "author_flair_text": null, "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02auj2", "parent_id": "t3_5yxpy", "score_hidden": false, "id": "c02auj2"}
{"controversiality": 0, "retrieved_on": 1427425659, "subreddit_id": "t5_2fwo", "created_utc": "1193167865", "name": "t1_c02av62", "gilded": 0, "link_id": "t3_5yxpy", "downs": 0, "score": 1, "score_hidden": false, "id": "c02av62", "author": "[deleted]", "archived": true, "distinguished": null, "edited": true, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t3_5yxpy", "body": "[deleted]", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193168081", "ups": 1, "gilded": 0, "link_id": "t3_5yxpy", "retrieved_on": 1427425659, "score": 1, "body": "[deleted]", "author": "[deleted]", "author_flair_text": null, "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02av6x", "parent_id": "t3_5yxpy", "score_hidden": false, "id": "c02av6x"}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "AlanCrowe", "created_utc": "1193168122", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 4, "author": "[deleted]", "created_utc": "1193168910", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "AlanCrowe", "created_utc": "1193170823", "children": [{"controversiality": 0, "retrieved_on": 1427425646, "subreddit_id": "t5_2fwo", "created_utc": "1193176556", "ups": 1, "gilded": 0, "link_id": "t3_5yxpy", "downs": 0, "score": 1, "body": "I thought you'd be able to stretch yourself to derive the obvious conclusion :) Allow me to assist:\n\n    Prelude&gt; let g n = foldr (*) 1 [1..n]\n    Prelude&gt; g 10\n    3628800\n", "author": "[deleted]", "archived": true, "distinguished": null, "edited": true, "id": "c02aw6r", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02aw6r", "parent_id": "t1_c02avka", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 2, "name": "t1_c02avka", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yxpy", "retrieved_on": 1427425654, "score_hidden": false, "id": "c02avka", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02avai", "body": "Not exactly, you are writing \"g [1..10]\" not \"g 10\"", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 4, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yxpy", "retrieved_on": 1427425658, "body": "Also known as a 'fold right' or 'right list reduction'\n\n    Prelude&gt; let f = foldr (:) []\n    Prelude&gt; f [1..10]\n    [1,2,3,4,5,6,7,8,9,10]\n    Prelude&gt; let g = foldr (*) 1\n    Prelude&gt; g [1..10]\n    3628800\n\n    ", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02avai", "parent_id": "t1_c02av74", "id": "c02avai", "author_flair_css_class": null}], "subreddit": "programming", "ups": 2, "name": "t1_c02av74", "controversiality": 0, "archived": true, "link_id": "t3_5yxpy", "retrieved_on": 1427425659, "score_hidden": false, "id": "c02av74", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5yxpy", "body": "That managed to completely obscure the fun point that factorial is the same code as copy-list, just with different functions\n\n       &gt; (defun my-copy (list)\n           (if (endp list)\n               nil\n               (cons (car list)\n                     (my-copy (cdr list)))))\n\n       &gt; (my-copy '(1 2 3))\n       =&gt;(1 2 3)\n\n       &gt; (defun meta-copy (data &amp;key cons car cdr end-test end-value)\n           (labels ((copier (data)\n                      (if (funcall end-test data)\n                          end-value\n                          (funcall cons\n                                   (funcall car data)\n                                   (copier (funcall cdr data))))))\n             (copier data)))\n\n       &gt; (meta-copy '(1 2 3)\n                    :cons #'cons\n                    :car #'car\n                    :cdr #'cdr\n                    :end-test #'endp\n                    :end-value '())\n       =&gt;(1 2 3)\n\n       &gt; (meta-copy 6\n                    :cons #'*\n                    :car #'identity\n                    :cdr #'1-\n                    :end-test #'zerop\n                    :end-value 1)\n       =&gt; 720\n", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 3, "gilded": 0, "link_id": "t3_5yxpy", "retrieved_on": 1427425654, "score": 3, "id": "c02avlm", "author": "wozer", "created_utc": "1193171037", "distinguished": null, "edited": false, "body": "Imagine someone decides to learn about functional programming and this article is the first thing they read...", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02avlm", "parent_id": "t3_5yxpy", "score_hidden": false, "author_flair_css_class": null}
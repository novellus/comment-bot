{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -3, "author": "drosser", "created_utc": "1192764307", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "plong0", "created_utc": "1192771361", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 10, "author": "revence27", "created_utc": "1192772824", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192787011", "ups": 2, "gilded": 0, "link_id": "t3_5ymzk", "retrieved_on": 1427426043, "score": 2, "body": " I certainly hope you didn't use this to do it:\n\n\\#define FOR(i, n) for(i=0;i&lt;n;i++)  ", "author": "Jivlain", "author_flair_text": null, "distinguished": null, "edited": true, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02a1lq", "parent_id": "t1_c02a0w4", "score_hidden": false, "id": "c02a1lq"}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192798027", "ups": -1, "gilded": 0, "link_id": "t3_5ymzk", "retrieved_on": 1427426036, "score": -1, "score_hidden": false, "id": "c02a24o", "author": "username223", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02a24o", "parent_id": "t1_c02a0w4", "body": "...and now you want a cookie?", "author_flair_css_class": null}], "subreddit": "programming", "ups": 10, "name": "t1_c02a0w4", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ymzk", "retrieved_on": 1427426053, "score_hidden": false, "body": "The for loop is one thing that carries a minimum of four delicate statements in it.\nThree of these statements barely change at all wherever they occur.\n\nNow, what did your Master tell you, again?\n\nMe, I rebelled against the for loop.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02a0t0", "id": "c02a0w4", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 6, "author": "mgsloan", "created_utc": "1192777865", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -3, "author": "Hermel", "created_utc": "1192779999", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 13, "author": "rkts", "created_utc": "1192781808", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "jbstjohn", "created_utc": "1192818038", "children": [{"controversiality": 0, "retrieved_on": 1427425993, "subreddit_id": "t5_2fwo", "created_utc": "1192828007", "name": "t1_c02a5g3", "gilded": 0, "link_id": "t3_5ymzk", "downs": 0, "score": 2, "score_hidden": false, "id": "c02a5g3", "author": "rkts", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 2, "parent_id": "t1_c02a47j", "body": "You can apply it to all *iterative* problems, which is the point of this discussion.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02a47j", "ups": 2, "controversiality": 0, "archived": true, "link_id": "t3_5ymzk", "retrieved_on": 1427426009, "score_hidden": false, "id": "c02a47j", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02a1dj", "body": "You do know that you can't apply tail recursion to all recursive problems, right?\n\nOr you can only apply it to part of the problem (the second partition of a recursive quicksort, for example).\n\nConsidering the stack isn't that bad a thing, especially on embedded devices.", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 13, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ymzk", "retrieved_on": 1427426047, "body": "http://en.wikipedia.org/wiki/Tail_recursion", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02a1dj", "parent_id": "t1_c02a1ah", "id": "c02a1dj", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "novagenesis", "created_utc": "1192801287", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "mgsloan", "created_utc": "1192845601", "children": [{"controversiality": 0, "retrieved_on": 1427425864, "subreddit_id": "t5_2fwo", "archived": true, "ups": 1, "gilded": 0, "link_id": "t3_5ymzk", "downs": 0, "score": 1, "id": "c02afd5", "author": "schlenk", "created_utc": "1192993583", "distinguished": null, "edited": false, "body": "'almost all programmers' is surely mostly imperative programmers, as it probably includes all the java drones etc.\n\nBut nova has a point. If you have maintainance programmers that are often not the best programmers and you have them look at code using many recursions, they will probably more often break stuff, because they do not understand it.\n", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02afd5", "parent_id": "t1_c02a6wo", "score_hidden": false, "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "novagenesis", "created_utc": "1193069236", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "mgsloan", "created_utc": "1193105821", "children": [{"controversiality": 0, "retrieved_on": 1427425700, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02as23", "gilded": 0, "link_id": "t3_5ymzk", "downs": 0, "score": 1, "score_hidden": false, "body": "&gt; If I recall correctly, it was pre-for-loop basic\n\nI wish I could remember if TI basic had loops in 1986-87.  I vaguely remember doing loops with GOTOs in some language or another.\n\n&gt; As soon as you pick up the execution model, GOTOs make sense\n\nProcedural programming isn't a concept a lot of programmers *have* to pick up.  \"Do this, then that, then that\" has always been completely natural to me, even before I started trying to program.  I learned math procedurally with an abstracting out of steps (maybe half of why I had so much trouble showing my work).\n\n&gt; What I'm talking about is the actual idioms that people use with loops.\n\nWell, then I'll agree with you.  The idioms suck.  I have, in the path, implemented other idioms (or attempted to do so) when I felt those more natural.  Honestly, you should have access to all of the above.  A complicated situation might not map cleanly to 'each'.  I have always had trouble wrapping my simple method of doing a Fibonacci sequence in a .each style of syntax.   ", "author": "novagenesis", "created_utc": "1193145348", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c02ap40", "id": "c02as23", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02ap40", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5ymzk", "retrieved_on": 1427425738, "body": " I disagree.  I learned basic when I was 8.  If I recall correctly, it was pre-for-loop basic.  Even though this was 1998, all I had was an atari :)\n\nI don't think you can really say anything is natural.  You just pick it up really fast.  As soon as you pick up the execution model, GOTOs make sense.  Of course, I 'reinvented' the for loop all over the place.\n\nI soon moved on to other basics, and did indeed encounter for-loops. Sure, they're easy to learn.  What I'm talking about is the actual idioms that people use with loops.  You can get fairly convoluted control structures, especially when it comes to C++ style loops and breaking.  Recursion can often handle these complex structures better.\n\nOften times an issue is the state that is implicitly passed to each iteration.  Recursion makes this more explicit.\n\nOh, and recursion makes perfect sense to me.  One time I saw a featurepoint on a language that said \"recursive functions\".  Once I found out what they were I was curious why they would ever not work, as they're very useful.\n\nSure, doing everything you would do with loops in recursion is a bit hard at first, but a lot of that is just old training.", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02akoy", "id": "c02ap40", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 2, "name": "t1_c02akoy", "controversiality": 0, "archived": true, "link_id": "t3_5ymzk", "retrieved_on": 1427425795, "score_hidden": false, "id": "c02akoy", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02a6wo", "body": "&gt; you mean imperative programmers\n\nActually, I meant people with the \"programmer gene\".  I got into programming in part because when I stumbled into it, I understood it implicitly.  I was 6, and the language was BASIC; for loops seemed natural to me before I was coding them.\n\nYou claim it takes \"quite a bit of time\"... I'll say that I learned recursion and loops at about the same time (as did several programmers I know), and loops were a 5-minute \"ahhh\", while recursion was a \"how do I get from point A to point B again? precisely?\"", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02a6wo", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 1, "link_id": "t3_5ymzk", "retrieved_on": 1427425975, "body": "I think when you mean programmers, you mean imperative programmers, those who have already spent quite a bit of time getting good at for loops.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02a2dr", "id": "c02a6wo", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02a2dr", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 0, "link_id": "t3_5ymzk", "retrieved_on": 1427426033, "id": "c02a2dr", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02a1ah", "body": "There are valid complaints against recursion: almost all programmers can understand a well-written loop on first sight.  Mediocre programmers cannot understand well-written functional-style recursion on the first sight.  A great many programmers cannot understand well-written arbitrary recursion (not designed with lambda calculus in mind) on first sight.)\n\nPlease drop the worthless arguments ;)", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02a1ah", "score_hidden": false, "controversiality": 0, "archived": true, "ups": -3, "link_id": "t3_5ymzk", "retrieved_on": 1427426048, "id": "c02a1ah", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02a16c", "body": "  In theory, recursion is a beautiful construct. However, in practice, for loops are often the more reasonable choice because of the risk of stack overflows when using recursion. When the depth of a recursion depends on the size of the input (e.g. the length of a list), you can easily make it crash by feeding it an excessively lengthy input.  ", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02a16c", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 6, "link_id": "t3_5ymzk", "retrieved_on": 1427426048, "body": "The main thing is the difference in perspective from imperative to functional programming.  You don't have loops, you have recursion.  Even in the absence of higher order functions such as map, fold, and filter, recursion is often times a better expression of the actual semantics.\n\nThis can be tricky to see when you've learned the ins and outs of for-loops and imperative reasoning over the years.\n\n&gt; And how about those (quite common) cases where you just don't have a list object to call a block on in the first place?\n\nWell, at least in the case of lazy functional languages, the difference between computation and data is quite fuzzy.  The list type of haskell more readily represents a generator (as found in python) than a concrete structure.  So, with an optimizing compiler, mapM_ print [0..1000] is just as good as for(unsigned i = 0; i &lt; 1000; i++) { std::cout &lt;&lt; i &lt;&lt; \"\\n\"; }", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02a0t0", "id": "c02a16c", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 3, "controversiality": 0, "archived": true, "link_id": "t3_5ymzk", "retrieved_on": 1427426053, "id": "c02a0t0", "author_flair_text": null, "distinguished": null, "edited": true, "name": "t1_c02a0t0", "parent_id": "t1_c02a0bs", "body": "  for real.  And what about if you wanted more than one exit condition?  of course you could use an if statement with a break inside the loop... or you could just add it to the for statement.\r\n\r\nHonestly, where's the problem in defining what the loop does in the first line. Seems pretty logical to me.\r\n\r\nMuch like a while loop or do while loop, except for's give you that chance to automatically adjust a variable in that defining line.\r\n\r\n\r\nAnd how about those (quite common) cases where you just don't have a list object to call a block on in the first place? ", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 16, "author": "dlsspy", "created_utc": "1192772673", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "masklinn", "created_utc": "1192788724", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "dlsspy", "created_utc": "1192815190", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "masklinn", "created_utc": "1192815895", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "dlsspy", "created_utc": "1192821935", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192823781", "ups": 1, "gilded": 0, "link_id": "t3_5ymzk", "retrieved_on": 1427426000, "score": 1, "body": "&gt; I'd be as confused seeing someone use a reduction when they really want a filter or map\n\nOh yes, so would I, I already have trouble when people use reduction when they want a reduction so it could only get worse. I was just being a smartass, really.", "author": "masklinn", "archived": true, "distinguished": null, "edited": false, "id": "c02a4vn", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02a4vn", "parent_id": "t1_c02a4og", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 1, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ymzk", "retrieved_on": 1427426003, "body": "I agree with that.  However choosing the right abstraction is really the key to this whole discussion.\n\nI'd be as confused seeing someone use a reduction when they really want a filter or map or something as I am when I see someone write a for loop in terms of a while loop (which I used to see a lot).", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02a4og", "parent_id": "t1_c02a3y8", "id": "c02a4og", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02a3y8", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 3, "link_id": "t3_5ymzk", "retrieved_on": 1427426012, "id": "c02a3y8", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02a3vs", "body": "&gt; you can also make a specialized map or filter that will perform better (as in the google collect example).\n\nYeah but that's an implementation detail.", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 2, "controversiality": 0, "archived": true, "link_id": "t3_5ymzk", "retrieved_on": 1427426013, "id": "c02a3vs", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02a3vs", "parent_id": "t1_c02a1od", "body": "*almost*\n\nYou can write a map or filter in terms of a reduction, but you can also make a specialized map or filter that will perform better (as in the google collect example).", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 3, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ymzk", "retrieved_on": 1427426042, "body": " &gt; A large number of such loops I've seen are really trying to do one of three things:\n\nOr one of one things since filtering and mapping are special cases of reduction. ", "archived": true, "distinguished": null, "edited": true, "name": "t1_c02a1od", "parent_id": "t1_c02a0vv", "id": "c02a1od", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 16, "name": "t1_c02a0vv", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ymzk", "retrieved_on": 1427426053, "score_hidden": false, "body": "I don't think you can honestly say you only have one such line in your code.  A large number of such loops I've seen are really trying to do one of three things:\n\n* mapping (transformation)\n* filtering\n* reduction\n\nEach has associated overhead.  In the mapping case, you need a collection to store the result.  Well, except one day, you figure out that you can reduce the overhead of such transformations by using lazily evaluating wrapper collections (a la google collect).  Now look through all of your mapping loops to figure out which ones can benefit from this optimization.\n\nFiltering is similar, but you are conditionally adding members to the collection, so you are doing the same sort of loop thing with an additional branch.  It can benefit from the same optimization as above, though.\n\nReduction is more complicated and not necessarily natural in many languages.  Now getting this right means you can come up with really cool reusable reductions.  I did this with a java project at work that consolidated a lot of code and fixed several bugs by making a few simple reduction functions that turned out to be needed in quite a few places.\n\n\nWhat I've found in real cases is that complexity can be traded for testability in a lot of cases.\n\nA guy at work had a function that did some various setup and then did some loops in a loop to try to match some info against an LDAP server.  Testing that code was nearly impossible, but I had him restate it as a filter and it became trivial.  There were three test cases he had to run against his filter with a mock LDAP interface and he could be confident that his code would do the right thing in all situations.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02a0bs", "id": "c02a0vv", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": -3, "name": "t1_c02a0bs", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ymzk", "retrieved_on": 1427426059, "score_hidden": false, "body": "WTF! It's one line of code. I agree, \"foreach\" is nicer, but please...", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5ymzk", "id": "c02a0bs", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -4, "author": "username223", "created_utc": "1192766950", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 12, "author": "dlsspy", "created_utc": "1192771591", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "neilc", "created_utc": "1192772215", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 8, "author": "dlsspy", "created_utc": "1192773245", "children": [{"controversiality": 0, "retrieved_on": 1427426035, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02a25o", "gilded": 0, "link_id": "t3_5ymzk", "downs": 0, "score": 1, "score_hidden": false, "id": "c02a25o", "author": "username223", "created_utc": "1192798435", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c02a0wz", "body": "Each reduction increases the hylomorphic complexity of the function.  So?", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 8, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ymzk", "retrieved_on": 1427426053, "body": "Each for loop increases the cyclomatic complexity of your function by definition.\n\nHe didn't want a loop he wanted a reduction (specifically a summation).  His language made him express that as a for loop.  While it's not terribly common, people do get the loops wrong.\n\nIf you have an abstraction that allows you to say something closer to what you mean, it can be optimized better, and it can be harder to get wrong.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02a0wz", "parent_id": "t1_c02a0v4", "id": "c02a0wz", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 5, "author": "grauenwolf", "created_utc": "1192813380", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "masklinn", "created_utc": "1192824222", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192831710", "ups": 2, "gilded": 0, "link_id": "t3_5ymzk", "retrieved_on": 1427425988, "score": 2, "body": "That's stupid. \r\n\r\nBy that argument most languages shouldn't bother considering closures and map/reduce as they do just fine without them.\r\n\r\nOur toolboxes should be growing with time, not simply trading one imperfect tool for another.", "id": "c02a5uq", "author": "grauenwolf", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02a5uq", "parent_id": "t1_c02a4y0", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 0, "name": "t1_c02a4y0", "controversiality": 0, "archived": true, "link_id": "t3_5ymzk", "retrieved_on": 1427425999, "score_hidden": false, "id": "c02a4y0", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02a3ps", "body": "&gt; I'm not saying we should throw away the for-loop, but it shouldn't be the default either.\n\nMost modern languages (and many older languages) do just fine without the original for loop (the c-style one where you do everything manually). So I'm pretty sure we can get rid of it period, for all but the most low-level languages.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02a3ps", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 5, "link_id": "t3_5ymzk", "retrieved_on": 1427426016, "id": "c02a3ps", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02a0v4", "body": "I'm looking over my code right now, and for every complex for loop I have about 6 with a single-line body.\r\n\r\nComplexity should be reserved for complex things. I'm not saying we should throw away the for-loop, but it shouldn't be the default either.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 2, "controversiality": 0, "archived": true, "link_id": "t3_5ymzk", "retrieved_on": 1427426053, "id": "c02a0v4", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02a0v4", "parent_id": "t1_c02a0tl", "body": "... sure, but the article was using a toy example, which is the reason why the loop body was so trivial. The loop counter is a totally standard idiom --  it is perhaps slightly verbose, but it hardly qualifies as \"complex\".", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 12, "controversiality": 0, "archived": true, "link_id": "t3_5ymzk", "retrieved_on": 1427426053, "id": "c02a0tl", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02a0tl", "parent_id": "t1_c02a0j8", "body": "That's not quite fair.  It was relative complexity, and I do think it's a valid point.\n\nRelatively, the thing he wanted to do with each element was a lot more simple than the thing itself.  I mean, it's just a collection fold.  If I were writing the same thing in ocaml, it'd look like this:\n\n    List.fold_left (+) 0 element", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 24, "author": "revence27", "created_utc": "1192772681", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c02a258", "gilded": 0, "link_id": "t3_5ymzk", "retrieved_on": 1427426036, "score": -2, "score_hidden": false, "body": "When confronted with this article, you can either (1) read it and respond, or (2) use it as a jumping-off point to the same tired harangue about macros/HOFs/DRY that I've only read hundreds of times on reddit.  Unfortunately you chose (2).  Will your next move be \"macros are go(o)d,\" \"drydrydry\", or \"omg haskell catamorphisms\"?", "author": "username223", "created_utc": "1192798297", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": -2, "parent_id": "t1_c02a0vx", "id": "c02a258", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02a0vx", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 24, "link_id": "t3_5ymzk", "retrieved_on": 1427426053, "id": "c02a0vx", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02a0j8", "body": "No. The problem is repetition. For loops roll off my hands like water off a waterfall, when I have to write them. I am literally expanding a macro, whenever I write a for loop.\n\nThat is bad, because programming shouldn't be a typing challenge, but a logical challenge. I am doing a function's work when I start typing out a line that barely changes _except for the arguments_, see.\n\nAnd the fold function doesn't have to incur any runtime costs. Hell, it should be inlined wherever it occurs.\nNobody has a problem with for loops. I have a problem with repetition.", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 7, "author": "[deleted]", "created_utc": "1192782899", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192789222", "ups": -2, "gilded": 0, "link_id": "t3_5ymzk", "retrieved_on": 1427426041, "score": -2, "score_hidden": false, "id": "c02a1p1", "author": "Rhoomba", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02a1p1", "parent_id": "t1_c02a1fq", "body": "The original post is not about higher order abstraction. It is about a minor syntactic difference.", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "archived": true, "ups": -1, "gilded": 0, "link_id": "t3_5ymzk", "retrieved_on": 1427426036, "score": -1, "body": "Note what Rhoomba says: the author gets wood for\n\n    array.each { |x| ... }\n\nwhich is basically just some weird Ruby syntactic shuffling.  And I'd say the \"amount\" is many gallons, or liters (or cubic meters?) less than what you find \"quite disheartening\", certainly much less than the amount of people who mindlessly parrot Lisp/Haskell/Erlang (or even Factor!) propaganda.", "author": "username223", "created_utc": "1192797774", "distinguished": null, "edited": false, "id": "c02a23t", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02a23t", "parent_id": "t1_c02a1fq", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 7, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ymzk", "retrieved_on": 1427426047, "body": "...and if you're underwhelmed by it?\n\nThe amount of people on this thread who don't understand the purpose of a higher-order abstraction is quite disheartening.\n\nToo bad if it was a non-trivial example.\n\n*sigh*", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02a1fq", "parent_id": "t1_c02a0j8", "id": "c02a1fq", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02a0j8", "score_hidden": false, "controversiality": 0, "archived": true, "ups": -4, "link_id": "t3_5ymzk", "retrieved_on": 1427426057, "id": "c02a0j8", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5ymzk", "body": "If you're overwhelmed by the complexity of a loop counter, you're in the wrong field.", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 7, "author": "[deleted]", "created_utc": "1192772835", "children": [{"controversiality": 0, "retrieved_on": 1427426051, "subreddit_id": "t5_2fwo", "created_utc": "1192773794", "ups": 23, "gilded": 0, "link_id": "t3_5ymzk", "downs": 0, "score": 23, "body": "&gt; stringArray.each(fun s =&gt; println(s));\n\nI don't know what that language is, but I'd guess that any language that would support that kind of construct would also allow this:\n\n    stringArray.each(println);\n\nThe loop spells out *how* you're asking the computer to solve a problem that's in your head.  It's not just obviously the right abstraction for anything that you may need to do more than once.", "author": "dlsspy", "archived": true, "distinguished": null, "edited": false, "id": "c02a0y7", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02a0y7", "parent_id": "t1_c02a0w5", "score_hidden": false, "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "masklinn", "created_utc": "1192786232", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "DRMacIver", "created_utc": "1192796690", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "masklinn", "created_utc": "1192803624", "children": [{"controversiality": 0, "retrieved_on": 1427426023, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02a33b", "gilded": 0, "link_id": "t3_5ymzk", "downs": 0, "score": 1, "score_hidden": false, "body": "Sure. I was making an observation rather than trying to refute your point.", "author": "DRMacIver", "created_utc": "1192807783", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c02a2ks", "id": "c02a33b", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 2, "name": "t1_c02a2ks", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ymzk", "retrieved_on": 1427426030, "score_hidden": false, "body": "I said \"nearly\" though. For example, Erlang doesn't allow you to directly reference to a regular function, you have to make it into a fun (`fun foo/1` instead of just `foo`) and in ruby if you want to use a method as a block/proc you have to convert it (e.g. if you have a `foo` method/function defined through `def` you write `[1,2,3].each &amp;method(:foo)`)", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02a21l", "id": "c02a2ks", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 2, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ymzk", "retrieved_on": 1427426037, "body": "Humorously, Java 7 closures probably won't.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02a21l", "parent_id": "t1_c02a1kh", "id": "c02a21l", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 0, "author": "[deleted]", "created_utc": "1192806003", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "masklinn", "created_utc": "1192807357", "children": [{"controversiality": 0, "retrieved_on": 1427426020, "subreddit_id": "t5_2fwo", "created_utc": "1192810064", "ups": 1, "gilded": 0, "link_id": "t3_5ymzk", "downs": 0, "score": 1, "id": "c02a3bz", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "body": "Of course.  Or you use Python, and simply add an indented line (just like in Haskell, by the way).", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02a3bz", "parent_id": "t1_c02a316", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": 1, "score_hidden": false, "controversiality": 0, "archived": true, "link_id": "t3_5ymzk", "retrieved_on": 1427426025, "id": "c02a316", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02a316", "parent_id": "t1_c02a2v9", "body": "&gt; In that case you can either simply write another line into the loop body\n\nWrong, in the way you wrote it you also need to add the brace or you get yourself a wonderful bug.\n\n&gt; or you need to create a closure, which is slightly more inconvenient and less readable, IMHO\n\nLess readable than just sending the function? Of course, there are 2 lines and a level of indirection. Less readable than the for loop? I strongly disagree.", "author_flair_css_class": null}], "subreddit": "programming", "ups": 0, "name": "t1_c02a2v9", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ymzk", "retrieved_on": 1427426027, "score_hidden": false, "body": "You might need more than just println.  In that case you can either simply write another line into the loop body, or you need to create a closure, which is slightly more inconvenient and less readable, IMHO.  You may of course disagree, but that's my stance (and it seems to be Mr. van Rossum's choice, too).", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02a1kh", "id": "c02a2v9", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02a1kh", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 3, "link_id": "t3_5ymzk", "retrieved_on": 1427426043, "body": "&gt; If you think a counting for-loop is too complex in Java, then fucking write the non-counting for-loop, such as:\n\nAnd then, you also need the index (on top of the element), but since you're using java you're fucked.\n\n&gt;     stringArray.each(fun s =&gt; println(s));\n\nWhy would you write that when nearly every language out there would allow you to write `stringArray.each(println)` to get exactly the same result?", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02a0w5", "id": "c02a1kh", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 7, "author": "masklinn", "created_utc": "1192789523", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -2, "author": "[deleted]", "created_utc": "1192805908", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "masklinn", "created_utc": "1192807594", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -1, "author": "[deleted]", "created_utc": "1192810254", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "masklinn", "created_utc": "1192812094", "children": [{"controversiality": 0, "retrieved_on": 1427426017, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02a3lv", "gilded": 0, "link_id": "t3_5ymzk", "downs": 0, "score": 1, "score_hidden": false, "id": "c02a3lv", "author": "[deleted]", "created_utc": "1192812434", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c02a3ke", "body": "[deleted]", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "[deleted]", "created_utc": "1192812434", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192815978", "ups": 1, "gilded": 0, "link_id": "t3_5ymzk", "retrieved_on": 1427426012, "score": 1, "score_hidden": false, "id": "c02a3yh", "author": "masklinn", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02a3yh", "parent_id": "t1_c02a3lw", "body": "&gt; In C dialects I usually call a function and then define it later a bit further down.\n\nYeah but that's because C functions are not nested, as in say PHP all functions are global, and they get \"created\" before you have a chance to access it so the problem is moot.", "author_flair_css_class": null}], "subreddit": "programming", "ups": 1, "name": "t1_c02a3lw", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ymzk", "retrieved_on": 1427426017, "score_hidden": false, "body": "Right, never thought about currying, but probably because Scheme doesn't have auto-currying.\n\nHaskell's where is awesome, too, but it a language with sexp-structured syntax I think it wouldn't really fit due to its infix-style syntax.\n\nProbably we need something where declaring functions or variables can be done anytime and doesn't need a surrounding let .. in .. end or LOCALS or LET.  In C dialects I usually call a function and then define it later a bit further down.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02a3ke", "id": "c02a3lw", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02a3ke", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 2, "link_id": "t3_5ymzk", "retrieved_on": 1427426017, "id": "c02a3ke", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02a3cp", "body": " &gt; And by the way, IIRC in Scheme the for-each's function parameters are reversed, so you have to specify the function first, which is really inane.\n\nI'm not sure why they did it for scheme, but it comes in *real* handy for partial application such as when you have naturally curried function (as in haskell).\n\nAlso, it's not really a problem when you have a language that supports post-facto definitions, such as Haskell's `where` block.", "author_flair_css_class": null}], "subreddit": "programming", "ups": -1, "name": "t1_c02a3cp", "controversiality": 0, "archived": true, "link_id": "t3_5ymzk", "retrieved_on": 1427426020, "score_hidden": false, "id": "c02a3cp", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02a32c", "body": "That's right, in block-structured languages you can indent the function, so it looks almost like the block, but in Lisp or ML that's not the case:\n\n    (for-each stringArray\n      (lambda (s)\n        (do-this s)\n        (do-that s)))\n\nwhile\n\n    (dolist (s stringList)\n      (do-this s)\n      (do-that s))\n\nOk, still not that bad, but you quickly end up with indentation spaghetti (IMHO), likewise in ML.\n\nAnd by the way, IIRC in Scheme the for-each's function parameters are *reversed*, so you have to specify the function first, which is really inane.", "author_flair_css_class": null}], "subreddit": "programming", "ups": 2, "name": "t1_c02a32c", "controversiality": 0, "archived": true, "link_id": "t3_5ymzk", "retrieved_on": 1427426025, "score_hidden": false, "id": "c02a32c", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02a2uv", "body": "&gt; It's different if you say \"with elements in loop do 'something'\", or if you say \"over this loop, do with element 'something'\"\n\nI'm not sure i understood what you said. But no.\n\n&gt; while looping constructs automatically bind the variable for you\n\nIt doesn't, the binding is included in the looping statement which is very different, and size of that binding is pretty much the same as in a closure:\n\n    for(String s: stringArray) {\n        doSomething(s)\n        doSomethingElse(s)\n    }\n\nversus\n\n    stringArray.each do |String s|\n        doSomething(s)\n        doSomethingElse(s)\n    end\n\n", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": -2, "score_hidden": false, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ymzk", "retrieved_on": 1427426027, "body": "It's different if you say \"with elements in loop do 'something'\", or if you say \"over this loop, do with element 'something'\".  You have to create a new function with a new parameter, while looping constructs *automatically* bind the variable for you, so you don't have to write ugly blocks/functions/lambdas.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02a2uv", "parent_id": "t1_c02a1pl", "id": "c02a2uv", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 7, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ymzk", "retrieved_on": 1427426041, "body": "&gt; the loop spells out just what you're going to do.\n\nAnd HOF iterators don't? I think you lost me there.\n\nI mean, let's take a regular loop:\n\n    for(String s: stringArray)\n\nwhat does it say about what you're going to do? Nothing at all, you could be performing an action, mapping, filtering, whatever\n\n    stringArray.each\n\nthat already tells me something: this is going to perform an action (side-effectful usually, since I don't care about the return value), and it's very different than if I had\n\n    stringArray.map\n\nwhich would perform a (usually side-effect less) transformation over each element of the list or\n\n    stringArray.filter\n\nwhich would only select some of the list's elements.\n\nOk, so from the start whatever the case you're in, HOF iterators tell you more than a for-loop *before you even reached the loop body*.\n\nNow let's check the loop body\n\n    println(s);\n\nversus\n\n    println\n\nyeess, I can see how the loop *spells out just what you're going to do* much better than the HOF iterator... (or not, sorry)", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02a1pl", "parent_id": "t1_c02a0w5", "id": "c02a1pl", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "BraveSirRobin", "created_utc": "1192798656", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c02a3vr", "gilded": 0, "link_id": "t3_5ymzk", "retrieved_on": 1427426013, "score": 4, "score_hidden": false, "id": "c02a3vr", "author": "omninull", "created_utc": "1192815152", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 4, "parent_id": "t1_c02a264", "body": "Except for the fact that he mentions iterators:\n&gt;concept of an iterator, which was great, but then we had to live with this for years in Java:\n\n    for (Iterator it = orders.iterator(); it.hasNext(); )  {\n       Order order = (Order)it.next();\n       \u2026\n    }\n\nWhich suffers from the same problem he has with for loops, it has a lot of code that's just there for bookkeeping.\n \n", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02a264", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 0, "link_id": "t3_5ymzk", "retrieved_on": 1427426035, "id": "c02a264", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02a0w5", "body": "Agreed, I came in this comments page just to make sure someone was pointing out that glaring mistake. He also mentions the apache collections libraries...I guess he's never heard of java.util.Iterator. ", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "julesjacobs", "created_utc": "1192805240", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02a3vy", "gilded": 0, "link_id": "t3_5ymzk", "retrieved_on": 1427426013, "score": 3, "score_hidden": false, "body": "[deleted]", "author": "[deleted]", "created_utc": "1192815222", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 3, "parent_id": "t1_c02a2rn", "id": "c02a3vy", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02a2rn", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 1, "link_id": "t3_5ymzk", "retrieved_on": 1427426029, "body": "    puts stringArray\r\n\r\n:)", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02a0w5", "id": "c02a2rn", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427426018, "subreddit_id": "t5_2fwo", "created_utc": "1192811262", "name": "t1_c02a3h1", "gilded": 0, "link_id": "t3_5ymzk", "downs": 0, "score": 3, "score_hidden": false, "body": "Come back after solving the n-queens problem (for any natural number n in general).", "author": "ccshan", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 3, "parent_id": "t1_c02a0w5", "id": "c02a3h1", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427426016, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02a3nf", "gilded": 0, "link_id": "t3_5ymzk", "downs": 0, "score": 2, "score_hidden": false, "body": "While I agree with you on the topic of complex loops, the vast majority of the loops I write are the simple kind that really would benefit from the dot-notation.", "author": "grauenwolf", "created_utc": "1192812861", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 2, "parent_id": "t1_c02a0w5", "id": "c02a3nf", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192816915", "name": "t1_c02a42c", "gilded": 0, "link_id": "t3_5ymzk", "retrieved_on": 1427426011, "score": 9, "score_hidden": false, "body": "Complexity means even *more* reason to avoid the *for loop*.\r\n\r\nFor simple examples, they're quite similar.  However, the functional equivalents (particularly involving map, or a good list comprehension) can *compose*.\r\n\r\nTake a loop where you need the first or last to be treated differently - requiring a flag to be set outside of the for loop (or numerical iteration) - abstract the problem out in a function like *intersperse*.\r\n\r\nThe complexity that piles up inside or around a for loop can be broken down into cleaner steps.\r\n\r\n", "author": "SuperGrade", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 9, "parent_id": "t1_c02a0w5", "id": "c02a42c", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "martoo", "created_utc": "1192821139", "children": [{"controversiality": 0, "retrieved_on": 1427425860, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02afnq", "gilded": 0, "link_id": "t3_5ymzk", "downs": 0, "score": 1, "score_hidden": false, "id": "c02afnq", "author": "[deleted]", "created_utc": "1192997333", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c02a4ku", "body": "Ruby's syntax makes the each a lot nicer. :-)", "author_flair_css_class": null}], "subreddit": "programming", "ups": 3, "name": "t1_c02a4ku", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ymzk", "retrieved_on": 1427426004, "score_hidden": false, "body": "&gt; No, I'm joking. As soon as that function has multiple lines, you're much better off with something like the for-loop (or Lisp's DOLIST) than with something like blocks, closures, or Scheme's FOR-EACH, simply because the loop spells out just what you're going to do.\n\nCan you spell that out?  It's hard to imagine that a multi-line Ruby-style *each* is worse in all cases than an equivalent *for*. ", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02a0w5", "id": "c02a4ku", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 7, "name": "t1_c02a0w5", "controversiality": 0, "archived": true, "link_id": "t3_5ymzk", "retrieved_on": 1427426053, "score_hidden": false, "id": "c02a0w5", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5ymzk", "body": "Please.  There is a *reason* I stopped reading their RSS feed after a while.  Most articles on Beautiful Code suck, like this one.\n\nIf you think a counting for-loop is too complex in Java, then *fucking write the non-counting for-loop*, such as:\n\n    for (String s : stringArray)\n        println(s);\n\nOh yes, it's *so much more readable* to write that instead as:\n\n    stringArray.each(fun s =&gt; println(s));\n\nNo, I'm joking.  As soon as that function has multiple lines, you're *much better off* with something like the for-loop (or Lisp's DOLIST) than with something like blocks, closures, or Scheme's FOR-EACH, simply because the loop spells out just what you're going to do.", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 5, "author": "earthboundkid", "created_utc": "1192774605", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 9, "author": "mgsloan", "created_utc": "1192777984", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "earthboundkid", "created_utc": "1192830219", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192846908", "ups": 3, "gilded": 0, "link_id": "t3_5ymzk", "retrieved_on": 1427425973, "score": 3, "score_hidden": false, "id": "c02a6zi", "author": "mgsloan", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02a6zi", "parent_id": "t1_c02a5ps", "body": "Well, the haskell philosophy definitely argues for having several diverse ways of doing something, so you can pick and choose as is appropriate.\n\nIt is all opinion really, balancing the benefits of a single uber-method and the ability to choose the most appropriate method out of several.\n", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 1, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ymzk", "retrieved_on": 1427425989, "body": "Yes, but don't a lot of functional-ish languages have crappy loop structures? For example, it's my understanding that Common Lisp has great map, filter, etc., but there are a couple different, incompatible ways to write for-loops, and you the programmer have to figure out which of them is the best for what you're doing, instead of having a single tool that can cover all the cases simply. ", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02a5ps", "parent_id": "t1_c02a16l", "id": "c02a5ps", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 9, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ymzk", "retrieved_on": 1427426048, "body": "Or any other language with comprehensions, for that matter:\n\nhttp://en.wikipedia.org/wiki/List_comprehension", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02a16l", "parent_id": "t1_c02a0zr", "id": "c02a16l", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 10, "author": "rkts", "created_utc": "1192782241", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -9, "author": "Rhoomba", "created_utc": "1192788650", "children": [{"controversiality": 0, "retrieved_on": 1427426013, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02a3wh", "gilded": 0, "link_id": "t3_5ymzk", "downs": 0, "score": 2, "score_hidden": false, "id": "c02a3wh", "author": "morner", "created_utc": "1192815360", "distinguished": null, "edited": true, "author_flair_text": null, "subreddit": "programming", "ups": 2, "parent_id": "t1_c02a1o9", "body": "I especially like the way you neglected to provide evidence for your position; that shows just how strong your convictions are, and gives me **faith** in what you say. Bravo, sir.", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "ketralnis", "created_utc": "1192833982", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 0, "author": "Slipgrid", "created_utc": "1193000359", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "ketralnis", "created_utc": "1193008130", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "Slipgrid", "created_utc": "1193016047", "children": [{"controversiality": 0, "retrieved_on": 1427425831, "subreddit_id": "t5_2fwo", "created_utc": "1193025394", "ups": 1, "gilded": 0, "link_id": "t3_5ymzk", "downs": 0, "score": 1, "id": "c02ahwk", "author": "ketralnis", "archived": true, "distinguished": null, "edited": false, "body": "Well, that \"different syntax\" is all the article is talking about. It just says that the for(start,cond,stmt) syntax is outdated and not as explicit as the syntactic-sugar version.", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02ahwk", "parent_id": "t1_c02ah74", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02ah74", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5ymzk", "retrieved_on": 1427425841, "id": "c02ah74", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02agj7", "body": "Yes it does.  It does the same thing in a different syntax.  But, don't kid yourself, it has for loops.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02agj7", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5ymzk", "retrieved_on": 1427425849, "id": "c02agj7", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02afw7", "body": "Erlang doesn't have loops, and it seems to do all of those things just fine.", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02afw7", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 0, "link_id": "t3_5ymzk", "retrieved_on": 1427425858, "id": "c02afw7", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02a62r", "body": "You can't process data without looping it.  Rhoomba is correct.  It's utter bullshit.  You need loops to write complex algos.  Want examples?  Any sort alog.  Any search alog.  Any shortest path algo.  Almost every alog that does anything requires a loop.  The fact that this guy got modded up so high, should warn you from taking advice from the comments on this site.", "author_flair_css_class": null}], "subreddit": "programming", "ups": 1, "name": "t1_c02a62r", "controversiality": 0, "archived": true, "link_id": "t3_5ymzk", "retrieved_on": 1427425986, "score_hidden": false, "id": "c02a62r", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02a1o9", "body": "...anything else? Like why, or when, or under what circumstances, or for whom?", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02a1o9", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": -9, "link_id": "t3_5ymzk", "retrieved_on": 1427426042, "body": "Utter bullshit. ", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02a1ee", "id": "c02a1o9", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192830376", "name": "t1_c02a5qe", "gilded": 0, "link_id": "t3_5ymzk", "retrieved_on": 1427425989, "score": 1, "score_hidden": false, "body": "What about loops with breaks? Or loops where you need to retain data from one pass to another (and you don't feel like adding an otherwise pointless data passing parameter to your functions)? You of course can do these things map-style, but I think it's simpler to just for-each loop them.", "author": "earthboundkid", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c02a1ee", "id": "c02a5qe", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 10, "controversiality": 0, "archived": true, "link_id": "t3_5ymzk", "retrieved_on": 1427426047, "id": "c02a1ee", "author_flair_text": null, "distinguished": null, "edited": true, "name": "t1_c02a1ee", "parent_id": "t1_c02a0zr", "body": "Problem: loops are bad at expressing complicated algorithms.  If it's simple enough to be expressed as a loop, it's usually simple enough to be a higher-order function.", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 7, "author": "masklinn", "created_utc": "1192786347", "children": [{"controversiality": 0, "retrieved_on": 1427425990, "subreddit_id": "t5_2fwo", "created_utc": "1192830036", "ups": 1, "gilded": 0, "link_id": "t3_5ymzk", "downs": 0, "score": 1, "body": "You could do that if you wanted to in Python. On the other hand, if you're not going to use the function again, you may as well just use a loop instead, so that you don't incur the minor speed penalty you get from launching a function in Python and (less importantly) you don't have to think up a function name, since in Python multi-statement functions can't be anonymous.", "author": "earthboundkid", "archived": true, "distinguished": null, "edited": false, "id": "c02a5p0", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02a5p0", "parent_id": "t1_c02a1kp", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 7, "score_hidden": false, "controversiality": 0, "archived": true, "link_id": "t3_5ymzk", "retrieved_on": 1427426043, "id": "c02a1kp", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02a1kp", "parent_id": "t1_c02a0zr", "body": "&gt; if it's simple, make it a comprehension. If it's complicated, make it a loop.\n\nOr extract the complexity in a local function and *still make it a comprehension* (or a map/filter/reduce)", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427426042, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02a1oc", "gilded": 0, "link_id": "t3_5ymzk", "downs": 0, "score": -6, "score_hidden": false, "id": "c02a1oc", "author": "Rhoomba", "created_utc": "1192788710", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": -6, "parent_id": "t1_c02a0zr", "body": "List comprehensions suck. For nested loops they are written in the wrong order.", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "kg2", "created_utc": "1192950348", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "earthboundkid", "created_utc": "1193005641", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "kg2", "created_utc": "1193010139", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 1, "gilded": 0, "link_id": "t3_5ymzk", "retrieved_on": 1427425833, "score": 1, "body": "&gt;To be fair, I didn't think (i=0;i&lt;n;i++) was so bad, until I found myself in a language where I didn't need to do that. :-)\n\nIndeed. I just think the amount of extra typing is just barely within the tolerable range.\n\n&gt;add a print statement in there to check my work, and then remove it when I'm convinced it's right. \n\nIn fairness, Python 3000 will change print into a  function, in part to keep people from having to hassle with changing print statements into write functions later in a development cycle. \n\nUsing interactive Python 2.5 day-to-day, I tend to write `print '\\n'.join(`_comprehension goes here_`)`.\n\n&gt;For your cross-product problem\n\nMy example wasn't meant to be specifically a cross product problem, since the one list (`l`) contained other lists (`i`) inside of it. If you have a separate x and y you want to combine, you can always use `zip` (or `izip` for pre-Py3k) to go through two lists simultaneously, but I don't think that will work for cross producting. (It's been a long time since I took linear algebra.)  ", "author": "earthboundkid", "created_utc": "1193023760", "distinguished": null, "edited": true, "id": "c02ahs1", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02ahs1", "parent_id": "t1_c02agpa", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02agpa", "ups": 1, "controversiality": 0, "archived": true, "link_id": "t3_5ymzk", "retrieved_on": 1427425847, "score_hidden": false, "id": "c02agpa", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02agbv", "body": " To be fair, I didn't think (i=0;i&lt;n;i++) was so bad, until I found myself in a language where I didn't need to do that.  :-)\n\nI find it's *really* handy to be able to take a \"list comprehension\":\n\n    (loop for x in L collect (f x))\n\nand add a print statement in there to check my work, and then remove it when I'm convinced it's right.  Python fails at this.\n\nFor your cross-product problem, I found it helpful to define a function cross(seq_a, seq_b) and then use\n\n    for i,j in cross(X,Y):\n\nThis scales down, too: you can say\n\n    [(i,j) for i,j in cross(X,Y)]\n\nso it looks pretty much the same either place.\n\nI don't think itertools has this.  Guido would probably want you to be \"explicit\" here, and just nest the loops.   ", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02agbv", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 1, "link_id": "t3_5ymzk", "retrieved_on": 1427425852, "body": "Interesting point. I don't think changing a comprehension to a for loop is so bad, since you generally just have to move the expression at the start of the comprehension down and throw in a couple colons for the loops, but I can see how it might be annoying. One thing I would like would be if you could stack for loop statements the way that you can stack for loop comprehensions:\n\n    nl = [exp(j) for i in l for j in i]\n\nvs.\n\n    for i in l for j in i:\n        nl += exp(j)\n\ninstead of:\n\n    for i in l: \n        for j in i:\n            nl += exp(j)\n", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02ad82", "id": "c02agbv", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 3, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ymzk", "retrieved_on": 1427425892, "body": "That always struck me as one of Python's warts.  Code always starts out small, so I'd frequently start with a list comprehension.  Then you go to add something, and you have to rewrite the sucker using the *other* looping syntax.\n\n(And this in a language that prides itself on having One Way to do things.  Heh.)\n\nPut another way: it feels much more natural to program with language features that scale well.\n\nOr maybe all the Python geeks have editor macros that convert between for-loops and list comprehensions when they press F4, and I'm just out of it.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02ad82", "parent_id": "t1_c02a0zr", "id": "c02ad82", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 5, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ymzk", "retrieved_on": 1427426051, "body": "The joy of Python: if it's simple, make it a comprehension. If it's complicated, make it a loop. ", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02a0zr", "parent_id": "t3_5ymzk", "id": "c02a0zr", "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427426042, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02a1o6", "gilded": 0, "link_id": "t3_5ymzk", "downs": 0, "score": 3, "score_hidden": false, "body": "      orders.each { | order | ... }\n\nor \n\n    for (Order order : orders) {...}\n\nZOMG!! The difference! There are real advantages to languages such as Ruby and Python. Don't waste our time with trivial crap like this. \n\nEdit: map, fold etc. are useful. But that is nothing to do with this idiots point.", "author": "Rhoomba", "created_utc": "1192788602", "distinguished": null, "edited": true, "author_flair_text": null, "subreddit": "programming", "ups": 3, "parent_id": "t3_5ymzk", "id": "c02a1o6", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 5, "author": "Philluminati", "created_utc": "1192794365", "children": [{"controversiality": 0, "retrieved_on": 1427426016, "subreddit_id": "t5_2fwo", "archived": true, "ups": 3, "gilded": 0, "link_id": "t3_5ymzk", "downs": 0, "score": 3, "id": "c02a3p3", "author": "grauenwolf", "created_utc": "1192813183", "distinguished": null, "edited": true, "body": "In VB 9 and type inference, that becomes\r\n\r\n    for each subtotal in elements \r\n        total += subtotal\r\n    next\r\n\r\nor with LINQ:\r\n\r\n        Dim total = Aggregate subtotal In elements Into Sum(subtotal)\r\n\r\nor with dot-notation and extension methods\r\n\r\n        Dim total = elements.Sum\r\n ", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02a3p3", "parent_id": "t1_c02a1ws", "score_hidden": false, "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 5, "author": "masklinn", "created_utc": "1192824077", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 7, "author": "ubernostrum", "created_utc": "1192834408", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02a846", "gilded": 0, "link_id": "t3_5ymzk", "retrieved_on": 1427425958, "score": 1, "score_hidden": false, "id": "c02a846", "author": "masklinn", "created_utc": "1192863165", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c02a63q", "body": "mmm should I have put a smiley in my post to show it was a tongue-in-cheek comment?", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 7, "score_hidden": false, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ymzk", "retrieved_on": 1427425984, "body": "Behold, the power of... well, lots of languages!\n\n    total = sum(elements)\n\n", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02a63q", "parent_id": "t1_c02a4x6", "id": "c02a63q", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 5, "controversiality": 0, "archived": true, "link_id": "t3_5ymzk", "retrieved_on": 1427426000, "id": "c02a4x6", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02a4x6", "parent_id": "t1_c02a1ws", "body": "Behold, the power of Haskell!\n\n    let total = sum elements", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "goalieca", "created_utc": "1192832177", "children": [{"controversiality": 0, "retrieved_on": 1427425906, "subreddit_id": "t5_2fwo", "created_utc": "1192933669", "ups": 1, "gilded": 0, "link_id": "t3_5ymzk", "downs": 0, "score": 1, "id": "c02ac65", "author": "SamReidHughes", "archived": true, "distinguished": null, "edited": true, "body": " Bah, both \"sum elements\" and \"foldr (+) 0 elements\" are disgusting.  Use \"foldl' (+) 0 elements\" or pray to the false gods of compiler magic.", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02ac65", "parent_id": "t1_c02a5wj", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 2, "name": "t1_c02a5wj", "controversiality": 0, "archived": true, "link_id": "t3_5ymzk", "retrieved_on": 1427425987, "score_hidden": false, "id": "c02a5wj", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02a1ws", "body": "c++ std::accumulate(elements.begin(), elements.end(),0);\n\nor for a c-array\n\nstd::accumulate(elements, elements + length,0);\n\nNot quite haskell which is simply\n\"sum elements\" or more complicated as \"foldr (+) 0 elements\"", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02a1ws", "ups": 5, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ymzk", "retrieved_on": 1427426039, "score_hidden": false, "body": "\"for each\" in VB.NET is sooo much better than the for loop. I seem write a few every week.\n\ndim total as Int32 = 0\n\nfor each subtotal as Int32 in elements\n  total += subtotal", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5ymzk", "id": "c02a1ws", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192797270", "ups": 1, "gilded": 0, "link_id": "t3_5ymzk", "retrieved_on": 1427426036, "score": 1, "id": "c02a22u", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "body": "[deleted]", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02a22u", "parent_id": "t3_5ymzk", "score_hidden": false, "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192797425", "ups": 3, "gilded": 0, "link_id": "t3_5ymzk", "retrieved_on": 1427426036, "score": 3, "score_hidden": false, "body": "I really remember being sick to the teeth of writing for loops in C++.  Tedious and error prone when you even have a little bit of nesting.\n\nIt really did feel like drudgery:\n http://psychicorigami.com/2007/07/31/termination-condition/", "author": "lilspikey", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02a231", "parent_id": "t3_5ymzk", "id": "c02a231", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -3, "author": "Slipgrid", "created_utc": "1192803393", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 11, "author": "nuclear_eclipse", "created_utc": "1192805730", "children": [{"controversiality": 0, "retrieved_on": 1427425999, "subreddit_id": "t5_2fwo", "created_utc": "1192824509", "ups": 1, "gilded": 0, "link_id": "t3_5ymzk", "downs": 0, "score": 1, "body": "I agree with \n\n&gt; The point is not that you need to loop through your data to process it, but that you shouldn't teed to worry about setting that up, or how it works.\n\nbut I agree a bit less with\n\n&gt; The language should be smart/organized enough that you can simply tell it to apply a block of code to each item in a collection, and then the language will automatically know how to use iterators/closures/etc to apply that block of code to each element.\n\nInternal (using blocks) versus external (using foreaches) iteration really is a matter of taste/desire. Python has been using external iterators (and list comprehensions) for years and I like it, even though I have no problem with using internal iteration in haskell, erlang or ruby.\n\nThe only iteration that *sucks* is the explicit one (c-style, where you have to do everything manually).\n\nAlso, while Java's foreach syntax is a progress over old-style iteration, it's lacking in so many area it's not really funny. Simple (hell, trivial): when iterating through a collection, try getting the index of the current element (not in the collection, in the iteration).\n\nIt's not possible, you have to create and maintain a counter by hand...", "author": "masklinn", "archived": true, "distinguished": null, "edited": true, "id": "c02a4zf", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02a4zf", "parent_id": "t1_c02a2u2", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425967, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02a7j0", "gilded": 0, "link_id": "t3_5ymzk", "downs": 0, "score": 0, "score_hidden": false, "id": "c02a7j0", "author": "Slipgrid", "created_utc": "1192853888", "distinguished": null, "edited": true, "author_flair_text": null, "subreddit": "programming", "ups": 0, "parent_id": "t1_c02a2u2", "body": "Isn't easy enough to write your own class to do this?  Call me a purist, I'm still not sure it should be built into c or c++.\n\nEdit: also thanks for your earlier reply", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425877, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02aee2", "gilded": 0, "link_id": "t3_5ymzk", "downs": 0, "score": -1, "score_hidden": false, "body": "&gt;The language should be smart/organized enough that you can simply tell it to apply a block of code to each item in a collection\n\nDo you know why c and c++ were created.  They exist to give you maximum control over the system.  The for loop is no more complex than it needs to be; but, you need access to every part of it.  If you want to go code VB, then that's fine, but there is a reason for every part of the for loop, and if you don't use them, then perhaps you are not using the language to its fullest extent.\n\n&gt;they spend more time telling the computer what to do\n\nThat's programming.  You tell the computer what to do.  Again, if you want the programming language to guess at what you should do, then go write VB or something similar.  But, if you want the power to explicitly tell the computer what to do, and you don't want to guess at what the computer is going to do, and you don't want to die of frustration because the programming language won't allow you to do what you need to, then use c or c++.  The for loop in c and c++ is everything it needs to be: nothing more and nothing less.", "author": "Slipgrid", "created_utc": "1192980465", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": -1, "parent_id": "t1_c02a2u2", "id": "c02aee2", "author_flair_css_class": null}], "subreddit": "programming", "ups": 11, "name": "t1_c02a2u2", "controversiality": 0, "archived": true, "link_id": "t3_5ymzk", "retrieved_on": 1427426027, "score_hidden": false, "id": "c02a2u2", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02a2k1", "body": "The point is not that you need to loop through your data to process it, but that you shouldn't teed to worry about setting that up, or how it works.  \n\nThe language should be smart/organized  enough that you can simply *tell* it to apply a block of code to each item in a collection, and then the language will automatically know how to use iterators/closures/etc to apply that block of code to each element.  \n\nTo the programmer, they spend more time telling the computer *what* to do, rather than *how* to do each individual task.", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02adrn", "gilded": 0, "link_id": "t3_5ymzk", "retrieved_on": 1427425886, "score": 1, "id": "c02adrn", "author": "malcontent", "created_utc": "1192965478", "distinguished": null, "edited": false, "body": "Man you were punished for writing what any sane person would say.\n\nIt's the year 2007 and we are arguing about the for loop for chirstsakes. The computer science is dominated by navel gazers and the ones most prone to gazing at their navels hang out on programming.reddit.com\n\nIt's a fucking for loop. Let's move on shall we.", "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c02a2k1", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02a2k1", "score_hidden": false, "controversiality": 0, "archived": true, "ups": -3, "link_id": "t3_5ymzk", "retrieved_on": 1427426030, "id": "c02a2k1", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5ymzk", "body": "I don't get it.  I mean, you don't ever have to write for loops in C++.  You could write any *for* loop as a *do* or a *while* loop, not that you would want to do that.  Anyway, just seems like an odd thing to complain about.  To process data, you have to loop through it.", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192803819", "name": "t1_c02a2ln", "gilded": 0, "link_id": "t3_5ymzk", "retrieved_on": 1427426030, "score": 1, "score_hidden": false, "body": "[deleted]", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t3_5ymzk", "id": "c02a2ln", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "c_dugan", "created_utc": "1192805300", "children": [{"controversiality": 0, "retrieved_on": 1427426020, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02a3ch", "gilded": 0, "link_id": "t3_5ymzk", "downs": 0, "score": 2, "score_hidden": false, "id": "c02a3ch", "author": "sblinn", "created_utc": "1192810197", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 2, "parent_id": "t1_c02a2rv", "body": "&gt; stringArray.reverseEach(...)\n\nYour other examples might be more interesting, but surely this would simply be:\n\n    stringArray.reverse().each(...)", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 1, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ymzk", "retrieved_on": 1427426027, "body": "Here's hoping the next version of C/C++/Java/etc. supports the each statement, as well as: stringArray.reverseEach(...), stringArray.everyOtherEach(...), and everyone's favorite stringArray.reverseEveryHundrethEach(...)?", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02a2rv", "parent_id": "t3_5ymzk", "id": "c02a2rv", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "Kolibri", "created_utc": "1192820148", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "martoo", "created_utc": "1192821029", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "Kolibri", "created_utc": "1192821170", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1192821391", "name": "t1_c02a4m3", "gilded": 0, "link_id": "t3_5ymzk", "retrieved_on": 1427426004, "score": 2, "score_hidden": false, "id": "c02a4m3", "author": "martoo", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 2, "parent_id": "t1_c02a4l2", "body": "I just don't see *each* as heavy.", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "phil_g", "created_utc": "1192826698", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02a5av", "gilded": 0, "link_id": "t3_5ymzk", "retrieved_on": 1427425995, "score": 1, "score_hidden": false, "body": "If you use the IDE to generate your for loops, they will always be laid out similarly, but I see your point.", "author": "Kolibri", "created_utc": "1192826802", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c02a5aa", "id": "c02a5av", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02a5aa", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5ymzk", "retrieved_on": 1427425995, "id": "c02a5aa", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02a4l2", "body": "For one thing, code is generally written once and read many times; that for loop is really easy to write, but everyone who looks at the code afterwards has to work though the parameters of the for loop, trying to extract the salient details.  It's not usually hard, but it adds a bit more work to reading and understanding the code.\n\nAnd not everything is necessarily syntactic sugar.  Sure, 'for elt in element-list' is pretty sugary (but more readable than 'for i from 0 to (length(element-list) - 1): &lt;something with element-list[i]&gt;', but 'element-list.each { |elt| ... }' or 'map (\\elt -&gt; ...) element-list' is significantly different.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02a4l2", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 0, "link_id": "t3_5ymzk", "retrieved_on": 1427426004, "body": "I don't think that hiding it under a heavy layer of syntactic sugar is necessarily any better.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02a4kg", "id": "c02a4l2", "author_flair_css_class": null}], "subreddit": "programming", "ups": 2, "name": "t1_c02a4kg", "controversiality": 0, "archived": true, "link_id": "t3_5ymzk", "retrieved_on": 1427426004, "score_hidden": false, "id": "c02a4kg", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02a4h7", "body": "That's fair, but why should you have to?", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02a4h7", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 0, "link_id": "t3_5ymzk", "retrieved_on": 1427426006, "id": "c02a4h7", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t3_5ymzk", "body": "Most good IDEs are capable of creating a for loop iterating over a number, collection, array, etc. \r\n\r\nWhile one could argue that it's only hiding the issue, the fact of the matter is I can write a for loop iterating over a collection in 3 seconds.", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 9, "author": "bitwize", "created_utc": "1192830987", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "martoo", "created_utc": "1192834250", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 4, "author": "notfancy", "created_utc": "1192837029", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 4, "author": "[deleted]", "created_utc": "1192838580", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "notfancy", "created_utc": "1192839498", "children": [{"controversiality": 0, "retrieved_on": 1427425979, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02a6k5", "gilded": 0, "link_id": "t3_5ymzk", "downs": 0, "score": 2, "score_hidden": false, "id": "c02a6k5", "author": "[deleted]", "created_utc": "1192840635", "distinguished": null, "edited": true, "author_flair_text": null, "subreddit": "programming", "ups": 2, "parent_id": "t1_c02a6h0", "body": " I wasn't referring to you specifically. I just think in many instances we see very simple programming language concepts being buried underneath impenetrable category theory. It reeks of elitism. Go to #haskell and you'll see everybody talking about co-algebra this or monoidal category that but nobody really knows what they're talking about. ", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c02a7g8", "gilded": 0, "link_id": "t3_5ymzk", "retrieved_on": 1427425967, "score": 5, "score_hidden": false, "body": "Come on notfancy, you secretly wish ocaml had type classes and purity, I can tell ;)", "author": "dons", "created_utc": "1192853061", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 5, "parent_id": "t1_c02a6h0", "id": "c02a7g8", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "name": "t1_c02a6h0", "controversiality": 0, "archived": true, "ups": 2, "link_id": "t3_5ymzk", "retrieved_on": 1427425980, "id": "c02a6h0", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02a6e7", "body": " I, as a dyed-in-the-wool OCaml'er, resent being called \"Haskell people\" `;-)`. You're right, I stand corrected. ", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192897155", "ups": 1, "gilded": 0, "link_id": "t3_5ymzk", "retrieved_on": 1427425938, "score": 1, "body": "Short answer: \"Yes.  Yes they do -- that's why Haskell exists.\"", "author": "username223", "archived": true, "distinguished": null, "edited": false, "id": "c02a9q3", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02a9q3", "parent_id": "t1_c02a6e7", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02a6e7", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 4, "link_id": "t3_5ymzk", "retrieved_on": 1427425981, "id": "c02a6e7", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02a6al", "body": "Holy buzzwords there batman. A morphism is just a function which preserves some structure of the objects involved (eg, a linear transformation of vector spaces).\n\nSometimes I wonder if Haskell people like to casually drop category theory terms into conversation just to appear smart.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 4, "controversiality": 0, "archived": true, "link_id": "t3_5ymzk", "retrieved_on": 1427425982, "id": "c02a6al", "author_flair_text": null, "distinguished": null, "edited": true, "name": "t1_c02a6al", "parent_id": "t1_c02a63b", "body": " [Here you go](http://citeseer.ist.psu.edu/meijer91functional.html).\n\nA somewhat pedantic note. Morphisms\\* are actually more general than \"generic operations on a collection\"; they generalize to algebras and co-algebras, or to min-fixpoints and max-fixpoints of functors, depending on your (categorial) perspective. The \"scrap your boilerplate\" series of papers deal with the theory and practice of this.\n\n*Edit:* Slava is right, I was sloppy. I meant, in context, {cata,epi,hylo,para}-morphisms.", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02a63b", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5ymzk", "retrieved_on": 1427425984, "id": "c02a63b", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02a5sc", "body": "Can't find a link for that.  Do you have one?", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02a5sc", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 9, "link_id": "t3_5ymzk", "retrieved_on": 1427425988, "id": "c02a5sc", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5ymzk", "body": "There was a paper by Erik Meijer which discussed the vast majority of loops in terms of four main types: anamorphisms, catamorphisms, paramorphisms, and hylomorphisms.\n\nThese are really cool -- neatly abstracting the concept of \"a loop\" or, better yet, \"an operation over a collection of items\". This allows a sufficiently smart compiler (heh) to select an implementation strategy to suit the circumstances. for(int i=0;i&lt;length;i++) is low level. It's like assembly language. If you have say, an SIMD processor that can handle chunks of the loop in one swift stroke; or perhaps one of those NVIDIA Tesla things, a conventional for-loop no longer applies. To optimize, compilers will have to pick apart the loop and recognize that certain optimizations are applicable.\n\nHence the sufficiently smart compiler for a language which implements looping constructs at a high level of abstraction can be dumber than a sufficiently smart compiler for a language which uses for(;;). :)", "author_flair_css_class": null}
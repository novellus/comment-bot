{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -12, "author": "[deleted]", "created_utc": "1193208581", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02azsj", "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425600, "score": 14, "body": "If I want to code in a language that \"is all I need\", I'll use Assembler directly, TYVM :)\n\nSometimes I want something a little more high-level though. D gives me the expressive power of higher languages without the pain that is C++'s syntax and the speed hit that is scripting languages (and that's why I wuvs it).\n\n --feep", "author": "FeepingCreature", "created_utc": "1193213254", "distinguished": null, "edited": false, "id": "c02azsj", "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 14, "parent_id": "t1_c02azm4", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425596, "subreddit_id": "t5_2fwo", "created_utc": "1193219418", "name": "t1_c02b01w", "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 2, "score_hidden": false, "id": "c02b01w", "author": "baxissimo", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 2, "parent_id": "t1_c02azm4", "body": "If you're happy with C then by all means stick with it.  I would if I could stand it.  Being able to link with just about anything is quite a virtue.", "author_flair_css_class": null}], "subreddit": "programming", "ups": -12, "name": "t1_c02azm4", "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425602, "score_hidden": false, "id": "c02azm4", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5yznx", "body": "[deleted]", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -6, "author": "Inverter", "created_utc": "1193209960", "children": [{"controversiality": 0, "retrieved_on": 1427425595, "subreddit_id": "t5_2fwo", "created_utc": "1193220607", "ups": 3, "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 3, "id": "c02b03x", "author": "Mr_Smartypants", "archived": true, "distinguished": null, "edited": false, "body": "C is for [*Creative* Anachronists](http://en.wikipedia.org/wiki/Society_for_Creative_Anachronism)\n\nwe just never get invited.  Some day.", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02b03x", "parent_id": "t1_c02azo5", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": -6, "name": "t1_c02azo5", "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425601, "score_hidden": false, "id": "c02azo5", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5yznx", "body": "C is for \"anachronists\"\nC++ is for masochists\nMost other imperative languages are for wimps ;-)\n", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 9, "author": "dmpk2k", "created_utc": "1193210178", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 28, "author": "WalterBright", "created_utc": "1193211043", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "kahirsch", "created_utc": "1193227585", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "MrRadar", "created_utc": "1193240662", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "dmpk2k", "created_utc": "1193245199", "children": [{"controversiality": 0, "retrieved_on": 1427425566, "subreddit_id": "t5_2fwo", "created_utc": "1193246623", "ups": 2, "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 2, "body": "AFAIK, the GC uses pools of 16, 32, 64, 128, 256, 512, 1024 and 2048-byte blocks, and for allocations &lt;=2048 bytes in size it uses the best available block. Larger objects are allocated in 4k-sized pages. Thus, the GC knows the size of every allocated object - which is actually available to user code via a function in the GC interface, std.gc.capacity(void*).", "author": "CyberShadow", "archived": true, "distinguished": null, "edited": false, "id": "c02b2ez", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02b2ez", "parent_id": "t1_c02b28e", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425539, "subreddit_id": "t5_2fwo", "archived": true, "ups": 3, "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 3, "body": "The gc jargon is \"interior pointers\", and it's straightforward to mark a memory block as used if there are any pointers into it.", "author": "WalterBright", "created_utc": "1193261613", "distinguished": null, "edited": false, "id": "c02b4gz", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02b4gz", "parent_id": "t1_c02b28e", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02b28e", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5yznx", "retrieved_on": 1427425568, "id": "c02b28e", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02b1pv", "body": "That doesn't answer his question. The question was about pointers _into_ objects, not _out of_.", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02b1pv", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5yznx", "retrieved_on": 1427425575, "id": "c02b1pv", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02b0ep", "body": "Basically the garbage collector scans through all the data in objects and arrays for pointers.  In versions of the standard library that shipped with compiles before 1.001 it would treat ALL array data as having potential to hold pointers, even if it wasn't a pointer type (e.g. float[] arrays would be treated as containing pointers).  After numerous complaints about multi-minute collection passes and memory leaks for programs the operated on large (&gt;100 meg) amounts of data stored in arrays this was fixed (now it only scans pointer, reference, and void type arrays).", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02b0ep", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 3, "link_id": "t3_5yznx", "retrieved_on": 1427425592, "body": "If I could ask an unrelated question--\n\nHow does D keep objects alive on the heap in the case where there are pointers only to the interior of objects/arrays?  I've searched for an explanation and only found one post where you say something like \"it doesn't cause much overhead the way I manage memory\".\n\nThe only efficient way I could think of is for pages to only hold objects of all the same size, but I'm wondering if there's something cleverer.  I haven't been able to find any discussion of this question more generally, either.\n", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02azpt", "id": "c02b0ep", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02azpt", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 28, "link_id": "t3_5yznx", "retrieved_on": 1427425601, "id": "c02azpt", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02azoh", "body": "Struct instances can be allocated on the stack, the heap, or as static data. The idea is that structs are designed to represent value types, and classes represent polymorphic reference types.\r\n\r\nIn some circumstances, class objects can be allocated on the stack (as detailed in the link), but this is an optimization that the implementation is allowed to perform.", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02azoh", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 9, "link_id": "t3_5yznx", "retrieved_on": 1427425601, "id": "c02azoh", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5yznx", "body": "&gt; In D, objects are always allocated on the heap.\n\nNot always: http://www.digitalmars.com/d/memory.html#stackclass\n", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 14, "author": "clintonforbes", "created_utc": "1193210268", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "dmpk2k", "created_utc": "1193211265", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 26, "author": "Taladar", "created_utc": "1193217665", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193218714", "ups": 7, "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425597, "score": 7, "score_hidden": false, "id": "c02b00q", "author": "baxissimo", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02b00q", "parent_id": "t1_c02azz4", "body": "Try googling for \"d programming something something\" instead of just \"d something something\".  Works pretty darn reliably.", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193220842", "ups": 38, "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425595, "score": 38, "score_hidden": false, "body": "True. Googling for \"D\" is useless. But I encourage everyone writing about D to use the phrase \"D programming language\" somewhere in the page, and this turns out to be surprisingly effective for Google.", "author": "WalterBright", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02b046", "parent_id": "t1_c02azz4", "id": "c02b046", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 5, "author": "cunningjames", "created_utc": "1193228270", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02b2n8", "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425563, "score": 5, "body": "Nice gets my vote, with Clean being a contender.", "author": "zem", "created_utc": "1193248057", "distinguished": null, "edited": false, "id": "c02b2n8", "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 5, "parent_id": "t1_c02b0g4", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "archived": true, "ups": 2, "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425529, "score": 2, "body": "Mine is the krautrock band called Can...", "author": "halu", "created_utc": "1193269911", "distinguished": null, "edited": false, "id": "c02b59n", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02b59n", "parent_id": "t1_c02b0g4", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02b0g4", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 5, "link_id": "t3_5yznx", "retrieved_on": 1427425591, "body": "  My favorite example of this is [Io](http://www.iolanguage.com/about/). At least when I google \"D\" the first few links concern the D programming language. And Io has that nice, confusing similarity to i/o ...  ", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02azz4", "id": "c02b0g4", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425591, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02b0ju", "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 6, "score_hidden": false, "id": "c02b0ju", "author": "toyboat", "created_utc": "1193229792", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 6, "parent_id": "t1_c02azz4", "body": "I've had the same trouble with [\"R\"](http://www.r-project.org)", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02azz4", "ups": 26, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425597, "score_hidden": false, "body": "Personally I think everyone creating something useful and naming it in a way that makes it hard to find in google makes it a lot less useful than it could be. I don't care if your name is weird as long as it is the only or one of a very low number of meanings for that word.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02azq5", "id": "c02azz4", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "CyberShadow", "created_utc": "1193219278", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c02b1ge", "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425578, "score": 1, "score_hidden": false, "body": "inurl: is insufficient. It's closer to  \"inurl:digitalmars.com/d/ -archives\"\n\nIt's a trivial annoyance, but it's still annoying I have to do that with every query.", "author": "dmpk2k", "created_utc": "1193238284", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c02b01n", "id": "c02b1ge", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 1, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425596, "body": "A copy of the documentation (in HTML) is distributed with the compiler. Also, you could use inurl: to filter out NG posts.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02b01n", "parent_id": "t1_c02azq5", "id": "c02b01n", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 2, "name": "t1_c02azq5", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425600, "score_hidden": false, "body": "The documentation isn't bad in my opinion; my main gripe is having to filter out all the newsgroup spam from Google results.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02azon", "id": "c02azq5", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193226559", "name": "t1_c02b0cu", "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425592, "score": 5, "score_hidden": false, "id": "c02b0cu", "author": "brendankohler", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 5, "parent_id": "t1_c02azon", "body": "I have to agree somewhat. I built a relational database engine in D and it was rough going. Theoretically, none of it should be hard, but I did find several early bugs, documentation was non-existent, and the differences between D structs and C structs really got me.", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 4, "author": "fartron", "created_utc": "1193235541", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 0, "author": "lothair", "created_utc": "1193241720", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "fmota", "created_utc": "1193243110", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": 0, "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425185, "score": 0, "body": "Death to Pikul! Death to eXistenz!", "id": "c02bqbh", "author": "manthrax", "created_utc": "1193533429", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02bqbh", "parent_id": "t1_c02b202", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02b202", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 2, "link_id": "t3_5yznx", "retrieved_on": 1427425571, "id": "c02b202", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02b1tw", "body": " Is it still a non-sequitur if you point out that it's a non-sequitur, when you're replying to a non-sequitur?\n\nMy point is, if person A says \"foo\", person C says \"spam\", and person D says \"etc\", these are all non-sequiturs.\n\nBut if person D says \"etc. Look, I can 'spam' to 'foo', too.\", then clearly what person D says is relevant to the discussion of \"spam\" and should not be considered a non-sequitur, so it contradicts itself.\n\nEDIT: Person B must've died, or something. ", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425568, "subreddit_id": "t5_2fwo", "archived": true, "ups": 3, "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 3, "id": "c02b26v", "author": "fartron", "created_utc": "1193244792", "distinguished": null, "edited": false, "body": "I was speaking to the usability of the language by referencing a real-world example of its use.    I do enjoy non-sequiturs though.", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02b26v", "parent_id": "t1_c02b1tw", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": 0, "name": "t1_c02b1tw", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425573, "score_hidden": false, "body": "I also heard D is an often used letter.\n\nThere, i can do non-sequiturs, too!", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02b14e", "id": "c02b1tw", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 4, "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425582, "id": "c02b14e", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02b14e", "parent_id": "t1_c02azon", "body": "Indie gaming icon [Kenta Cho](http://www.asahi-net.or.jp/~cs8k-cyu/index_e.html) uses D to make his games.", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425556, "subreddit_id": "t5_2fwo", "created_utc": "1193251643", "name": "t1_c02b34o", "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 7, "score_hidden": false, "body": "Yes I have built something in D, as well as many others: see www.dsource.org .\n\nI don't believe the docs are crap. The language docs may be very technical, but I've been able to find everything I need with the D docs. If you don't find something, you can always ask the D newsgroup, which is very active and has a .learn group to help people out. \n\nThe only way I've ever gotten a segfault in D is if I forgot to 'new' a class. I suppose if you use raw pointers in D, you will get segfaults, but D for the most part eliminates the need to use raw pointers.\n\nI think a better argument against D is that there are not a lot of libraries for it. ", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 7, "parent_id": "t1_c02azon", "id": "c02b34o", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 14, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425601, "body": "Ever tried to build something in D?  I tried my best to love it, and in theory it is great.  But in practice the documentation is crap and building even simple programs using the 'stable' compiler is segfault city.  I think it will be a great language to use - in about 3 years.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02azon", "parent_id": "t3_5yznx", "id": "c02azon", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "[deleted]", "created_utc": "1193210423", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 35, "author": "WalterBright", "created_utc": "1193210831", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 7, "author": "LaurieCheers", "created_utc": "1193219395", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193219587", "ups": 2, "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425596, "score": 2, "id": "c02b026", "author": "baxissimo", "archived": true, "distinguished": null, "edited": false, "body": "Yes it does.", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02b026", "parent_id": "t1_c02b01u", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425596, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02b030", "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 3, "score_hidden": false, "id": "c02b030", "author": "CyberShadow", "created_utc": "1193220010", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 3, "parent_id": "t1_c02b01u", "body": "Yes, and I believe D now also issues a warning if you override without using it. It's still optional, though.", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 7, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425596, "body": "Speaking of serious C++ bugs - does D also support C#'s 'override' keyword?\r\n\r\nI find it really irritating when my function overrides silently fail because the base function's signature has changed slightly...", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02b01u", "parent_id": "t1_c02azpg", "id": "c02b01u", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c02b3ck", "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425553, "score": 1, "score_hidden": false, "id": "c02b3ck", "author": "[deleted]", "created_utc": "1193253095", "distinguished": null, "edited": true, "archived": true, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c02azpg", "body": "[deleted]", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 35, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425601, "body": "The compiler doesn't have to be that smart. If a method is marked as 'final', or is in a class marked 'final', it is called virtually by any base classes, but in the most derived class it is called directly. Also, private and package functions are not virtual, but also cannot be overridden and are not accessible outside of the class/module/package they are defined in.\r\n\r\nIf the compiler looks at the whole program, which is possible in many circumstances, it can determine if a class can be automatically made 'final' (i.e. when there are no classes that derive from it) and then its member functions can be called directly.\r\n\r\nThe big win, though, is that a non-virtual member function cannot be overridden with a virtual one, which is nearly always a serious bug in C++ code. ", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02azpg", "parent_id": "t1_c02azov", "id": "c02azpg", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 10, "author": "LaurieCheers", "created_utc": "1193219149", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 12, "author": "[deleted]", "created_utc": "1193219574", "children": [{"controversiality": 0, "retrieved_on": 1427425596, "subreddit_id": "t5_2fwo", "archived": true, "ups": 2, "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 2, "id": "c02b02v", "author": "LaurieCheers", "created_utc": "1193219977", "distinguished": null, "edited": false, "body": "Ah, ok. That makes more sense.", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02b02v", "parent_id": "t1_c02b025", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02b025", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 12, "link_id": "t3_5yznx", "retrieved_on": 1427425596, "body": "[deleted]", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02b01h", "id": "c02b025", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 8, "author": "baxissimo", "created_utc": "1193219975", "children": [{"controversiality": 0, "retrieved_on": 1427425552, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02b3g9", "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 2, "score_hidden": false, "id": "c02b3g9", "author": "teval", "created_utc": "1193253906", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 2, "parent_id": "t1_c02b02u", "body": "Because of course the speed of all compilers between two programming languages is easily comparable.\n\nYou've seen what optimizations gcc does versus what optimizations the digital mars compiler performs?", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 8, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425596, "body": "One of the things I love most about D is how friggin fast compiles are.  Even a pile of files loaded to the teeth with nothing but templates compiles in a jiffy.  With my C++ compilers the equivalent stuff takes ages.  After setting up some hideous platform-specific garbage for creating precompiled headers it's a bit better with C++, but still slower than D.\n\nFrom what I understand the D module system has something to do with that speed.  That and the crazy fast linker implemented in assembly.\n", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02b02u", "parent_id": "t1_c02b01h", "id": "c02b02u", "author_flair_css_class": null}], "subreddit": "programming", "ups": 10, "name": "t1_c02b01h", "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425596, "score_hidden": false, "id": "c02b01h", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02azov", "body": "Then tell us, great guru - what is the true purpose of header files?\r\n\r\nBecause to me, they look like a hack introduced to reduce code duplication when programs moved from one .c file to many.\r\n\r\n(That is, they reduce code duplication compared to having to prototype every necessary function at the start of every .c file.)", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "archived": true, "ups": 9, "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425594, "score": 9, "body": "That's pretty much directly contrary to the implication of the article.\n\nThe mythical \"sufficiently smart compiler\" is one that does tricky jobs such as parallelising code **without hints from the programmer**.  However, the required information can be mandated by **the language**, and the smart compiler isn't needed.\n\nThe article gets across reasonably well that various language-design decisions were made to take away ambiguity that might fool the compiler.", "author": "[deleted]", "created_utc": "1193223111", "distinguished": null, "edited": false, "id": "c02b07f", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02b07f", "parent_id": "t1_c02azov", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "name": "t1_c02azov", "controversiality": 0, "archived": true, "ups": 2, "link_id": "t3_5yznx", "retrieved_on": 1427425601, "id": "c02azov", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t3_5yznx", "body": "[deleted]", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c02azpc", "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425601, "score": 1, "body": "[deleted]", "author": "[deleted]", "created_utc": "1193210743", "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t3_5yznx", "score_hidden": false, "id": "c02azpc"}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 44, "author": "nglynn", "created_utc": "1193213202", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 22, "author": "baxissimo", "created_utc": "1193219226", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "archived": true, "ups": 10, "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425596, "score": 10, "body": "Don't get me wrong, I agree with you, but the issue is that C++ is everywhere, and the standardisation process is necessarily slow. As you say there are branches of g++ which support some of these new features, I doubt many people use these but I suppose it's important to balance the term \"dead and broken\" (applied to what is arguably the most successful computer language of all time) with some reality checks on features which are in the works.", "author": "nglynn", "created_utc": "1193219750", "distinguished": null, "edited": false, "id": "c02b02f", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02b02f", "parent_id": "t1_c02b01l", "score_hidden": false, "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 5, "author": "viller", "created_utc": "1193228196", "children": [{"controversiality": 0, "retrieved_on": 1427425578, "subreddit_id": "t5_2fwo", "created_utc": "1193238583", "ups": 7, "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 7, "body": "There are two branches. \n\n2.0 is WIP. 1.0 is only receiving bug-fixes.", "author": "dmpk2k", "archived": true, "distinguished": null, "edited": false, "id": "c02b1ha", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02b1ha", "parent_id": "t1_c02b0g0", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02b0g0", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 5, "link_id": "t3_5yznx", "retrieved_on": 1427425591, "id": "c02b0g0", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02b01l", "body": "Yeah it's in D today but D is still kinda WIP. I'd still use D though.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 22, "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425596, "id": "c02b01l", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02b01l", "parent_id": "t1_c02azsi", "body": "I'll be really happy when those features are present in my C++ compiler.  If the standard really does get ratified by 2009, then we're talking maybe another year or two before it's actually implemented?\n\nBut it's all in D today.   \n\n(To be fair, yes, some of them are in g++ branches today too.  Is anybody actually writing code with these?)", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425584, "subreddit_id": "t5_2fwo", "archived": true, "ups": -1, "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": -1, "id": "c02b10u", "author": "mshade", "created_utc": "1193234712", "distinguished": null, "edited": false, "body": "Who's kidding us, D is just C## anyway.", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02b10u", "parent_id": "t1_c02azsi", "score_hidden": false, "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "jmail69", "created_utc": "1193236844", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193237134", "ups": 5, "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425580, "score": 5, "score_hidden": false, "body": "I'm not sure about windows in particular but you can get an overview of experimental C++0x g++ support [here](http://gcc.gnu.org/gcc-4.3/cxx0x_status.html).", "author": "nglynn", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02b1be", "parent_id": "t1_c02b19y", "id": "c02b1be", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425577, "subreddit_id": "t5_2fwo", "created_utc": "1193239918", "name": "t1_c02b1mh", "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 1, "score_hidden": false, "body": " Yes. In my experience, I first heard of D from [ABA Games](http://www.asahi-net.or.jp/~cs8k-cyu/index_e.html), who used it for multiple OpenGL games written for Windows exclusively. ", "author": "dustmop", "archived": true, "distinguished": null, "edited": true, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c02b19y", "id": "c02b1mh", "author_flair_css_class": null}], "subreddit": "programming", "ups": 2, "name": "t1_c02b19y", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425580, "score_hidden": false, "body": "Is this available for windows development?", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02azsi", "id": "c02b19y", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "ringm", "created_utc": "1193245065", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "nglynn", "created_utc": "1193245220", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 4, "author": "baxissimo", "created_utc": "1193249930", "children": [{"controversiality": 0, "retrieved_on": 1427425552, "subreddit_id": "t5_2fwo", "created_utc": "1193253792", "ups": 2, "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 2, "id": "c02b3fm", "author": "teval", "archived": true, "distinguished": null, "edited": false, "body": "I would suggest you look at the actual mailings of the working group. GC is listed under:\n\n\"These topics are in final review, with the intention to incorporate each one in the next standard.\"", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02b3fm", "parent_id": "t1_c02b2w5", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02b2w5", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 4, "link_id": "t3_5yznx", "retrieved_on": 1427425559, "id": "c02b2w5", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02b28j", "body": "He said it in this talk:\nhttp://csclub.uwaterloo.ca/media/C++0x%20-%20An%20Overview.html\n\nSituation may have changed since then, but there he was saying GC was very unlikely to make it in.", "author_flair_css_class": null}], "subreddit": "programming", "ups": 2, "name": "t1_c02b28j", "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425568, "score_hidden": false, "id": "c02b28j", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02b27v", "body": "When? Any docs I've read said it'd be an optional feature.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02b27v", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 3, "link_id": "t3_5yznx", "retrieved_on": 1427425568, "id": "c02b27v", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02azsi", "body": "Stroustrup said garbage collection most probably will not be included in C++0x.", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "[deleted]", "created_utc": "1193252099", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c02b5ik", "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425525, "score": 0, "score_hidden": false, "id": "c02b5ik", "author": "TheSOB88", "created_utc": "1193272701", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 0, "parent_id": "t1_c02b374", "body": "What the hell? 36 characters? It looks smaller to me: foreach is longer than for.", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02b374", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5yznx", "retrieved_on": 1427425555, "id": "c02b374", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02azsi", "body": "Even then, the D version is still superior, as the C++ version makes you type an extra 36 characters and is still ugly. \n\nThis may not be important in a small applications, but in a large scale application, every character counts.\n", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02b378", "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425555, "score": 2, "score_hidden": false, "id": "c02b378", "author": "xcbsmith", "created_utc": "1193252102", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 2, "parent_id": "t1_c02azsi", "body": "Actually, the super simple way to do this with existing C++ is:\n\nstd::for_each(myvec.begin(), myvec.bend(), do_something_with_element());\n\nIf you use boost::lambda you don't even need to define the funciton elsewhere.", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425438, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02b6r3", "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 3, "score_hidden": false, "body": "Seems like D is the winner, unless C++ 0x standard **took out** a lot of previously possible ways to shoot yourself in the foot.\n\nSince what you describe are additions, C++ still sucks monkey balls.\n\nD doesn't have the legacy garbage.  That's something that C++ cannot add in any future standard.\n\nAnd D's foreach is still way more beautiful.\n", "author": "[deleted]", "created_utc": "1193286720", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 3, "parent_id": "t1_c02azsi", "id": "c02b6r3", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 44, "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425600, "id": "c02azsi", "author_flair_text": null, "distinguished": null, "edited": true, "name": "t1_c02azsi", "parent_id": "t3_5yznx", "body": "  While I do like D it is worth noting that some of the advantages this article touts are present in the C++0x standard. For example:\n\n&gt;[C++ iteration is ugly], Dynamic arrays are built into D, so that you can get the same functionality with very clean syntax.\n\n    int[] int_list;\n    // initialization\n    foreach (i; int_list)\n    {\n      // do something with i\n    }\n\n&gt;Walter Bright, like Guido in Python, and Larry in Perl, realized that most programmers use dynamic arrays all the time, and so made it part of the language. The syntax is so clean that it is, dare I say it, almost pythonic.\n\nThis is coming to C++ as:\n\n    int my_array[5] = {1, 2, 3, 4, 5};\n    for(int &amp;x : my_array)\n    {\n      x *= 2;\n    }\n[C++0x Ranged For Loops](http://en.wikipedia.org/wiki/C++0x#Ranged-Based_For_Loop)\n\n&gt; In D, the \u201cauto\u201d keyword gives you this same advantage. \n\nThe new c++ auto keyword should also make it easier to iterate over structures by avoiding ugly type signatures. So for example this:\n\n    for (vector&lt;int&gt;::const_iterator itr = myvec.begin(); itr != myvec.end(); ++itr)\n\nbecomes this:\n\n    for (auto itr = myvec.begin(); itr != myvec.end(); ++itr)\n    \n&gt; Optional Garbage collection\n\nAlso present in C++0x.\n\nEdit: Markdown   ", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 0, "author": "millstone", "created_utc": "1193216353", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193219304", "name": "t1_c02b01p", "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425596, "score": 27, "score_hidden": false, "id": "c02b01p", "author": "baxissimo", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 27, "parent_id": "t1_c02azwx", "body": "Oh damn!  You've found D's weakness!  It's not obfuscated-code-proof!", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 15, "author": "CyberShadow", "created_utc": "1193219519", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 28, "author": "millstone", "created_utc": "1193224108", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 15, "author": "Lutger", "created_utc": "1193228234", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "stcredzero", "created_utc": "1193239348", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "Lutger", "created_utc": "1193239927", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c02b1np", "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425575, "score": 5, "score_hidden": false, "id": "c02b1np", "author": "stcredzero", "created_utc": "1193240235", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 5, "parent_id": "t1_c02b1mj", "body": "I'll agree with you that in C++ all of these are uglier.  But in other languages like Lisp and Smalltalk, they are pretty. (At least to me).  But then, I think both C++ and D are examples of going in a misguided direction.  ", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 3, "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425577, "id": "c02b1mj", "author_flair_text": null, "distinguished": null, "edited": true, "name": "t1_c02b1mj", "parent_id": "t1_c02b1k1", "body": " Again, compare arrays and associative arrays, as well as string handling in C++ and D. In C++ this is done with std::vector, iterators, std::map and whatnot. In D, it's builtin and the result is better. \r\n\r\nIt's not that just everything is shoved into the language, only the very generic parts that benefit from it. Closures indeed are an example. Java can fake them with inner classes, and for some purposes boost::bind, boost::function and boost::lambda will help. But the result is not exactly pretty, nor efficient. D has delegates.  ", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "bonefry", "created_utc": "1193240330", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193241896", "ups": 1, "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425573, "score": 1, "body": "The *right* way to stick OO into a library is with Lisp.  ", "author": "stcredzero", "author_flair_text": null, "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02b1ue", "parent_id": "t1_c02b1oa", "score_hidden": false, "id": "c02b1ue"}], "subreddit": "programming", "score_hidden": false, "ups": 2, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425575, "body": "Sure, lets stick object-oriented programming in libraries. It's syntactic sugar anyway. Real men use plain old C, see GTK+ for a reference ;)", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02b1oa", "parent_id": "t1_c02b1k1", "id": "c02b1oa", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 1, "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425574, "score": 1, "id": "c02b1sn", "author": "[deleted]", "created_utc": "1193241453", "distinguished": null, "edited": true, "body": "[deleted]", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02b1sn", "parent_id": "t1_c02b1k1", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02b1k1", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 3, "link_id": "t3_5yznx", "retrieved_on": 1427425577, "id": "c02b1k1", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02b0g2", "body": "You got that the wrong way around.  Taking features out of libraries and shoving them in the language syntax is a step backwards.  Taking features out of the language syntax and putting them into the library gives you a more powerful, more easily understood language.  \n\nClosures are an excellent example of this.  They allow you to roll your own control structures.  Features go from the syntax to the library, and in doing so, make the language more powerful.", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425575, "subreddit_id": "t5_2fwo", "created_utc": "1193240295", "name": "t1_c02b1o3", "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 9, "score_hidden": false, "body": "&gt; Of course D is complex, it is a tool to write complex applications\n\nComplexity of the problem domain doesn't have much to do with the complexity of the tool used to solve it.\n\nAny language I use had better be simple, so I can understand what it is doing. If the problem is complicated, _I don't need the language adding to the confusion_. What's needed are simple and orthogonal constructs, not a million and one hyper-specialized tools that only people like Alexandrescu understand all the interactions of.\n\nIn fact millstone has hit square on the head what caused me to start looking elsewhere. Adding features will always be cheered on by someone, and each individual one seems useful at the time, but what about the end result? D passed my pain threshold sometime just before 1.0 was released...", "author": "dmpk2k", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 9, "parent_id": "t1_c02b0g2", "id": "c02b1o3", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 15, "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425591, "id": "c02b0g2", "author_flair_text": null, "distinguished": null, "edited": true, "name": "t1_c02b0g2", "parent_id": "t1_c02b08t", "body": "A large number of keywords or the possibility of writing obfuscated code does not mean that a language is complex in a negative way. Of course D is complex, it is a tool to write complex applications. However, it avoids a lot of unneccesary complexity that C++ does have. \r\n\r\nOne indication of this is how hard it is to write a decent parser for C++. After many years only commercial vendors and some big open source projects have achieved this. Now look at D, which is a very large language and still quite young, it already has several nice parsers available.\r\n\r\nD is large yes, and complex too, but not complicated. One of the reasons is that numerous features often implemented in libraries (in c-family languages) is implemented in the core language. This actually reduces complexity, just look at array handling.\r\n\r\nEDIT: the major feature left out is of course the C preprocessor. Others are the inline keyword, global operator overloading and overloading of the comma operator, C source compatibility, forward declarations and in general, a lot of undefined behavor.", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 6, "author": "eegreg", "created_utc": "1193236644", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "dmpk2k", "created_utc": "1193240604", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "[deleted]", "created_utc": "1193250135", "children": [{"controversiality": 0, "retrieved_on": 1427425557, "subreddit_id": "t5_2fwo", "created_utc": "1193251520", "ups": 2, "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 2, "body": "&gt; Where it is simpler, that is where it is lacking D features and less powerful.\n\nNot necessarily. The object system is simpler yet more interesting.\n\nBeing a superset of C is a mixed blessing. It brings problems but there's also no barrier to reusing C code. Something like htod is a barrier, even if fairly low.\n\nI'd prefer something like ObjD, but that isn't going to happen. It's unfortunate D follows C++'s mold.", "author": "dmpk2k", "archived": true, "distinguished": null, "edited": false, "id": "c02b33v", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02b33v", "parent_id": "t1_c02b2xh", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02b2xh", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 2, "link_id": "t3_5yznx", "retrieved_on": 1427425559, "id": "c02b2xh", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02b1pk", "body": "[deleted]", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02b1pk", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425575, "id": "c02b1pk", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02b191", "body": "What about Objective-C? Not much more complicated than C, and arguably more powerful than D. ", "author_flair_css_class": null}], "subreddit": "programming", "ups": 6, "name": "t1_c02b191", "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425581, "score_hidden": false, "id": "c02b191", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02b08t", "body": "fundamentally D is built as a better C/C++, and accomplishes this.  You can't have a non-complex and featureful language in this paradigm.  It is definitely more simple than C++, and definitely more powerful than C.\nThe only way towards greater simplicity is to move to a different programming paradigm (functional) or build abstractions that will reduce the run-time performance.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 28, "score_hidden": false, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425594, "body": "   My example was lighthearted.  If you want some stronger examples of why I think D fails to address the complexity of C++, here you go:\n\n* C99 has 37 keywords.  C++ has 70.  But D has 99 - and that's not even counting some psuedokeywords like \"opPostInc\" or \"mangleof.\"\n* I can't find a list of all of D's operators, but from what I can tell, it has substantially more than C++.  For example, what do you think the !&lt;&gt;= operator does?\n\nConsider this code, in turn, as C, C++, or D.\n\n    int i = 1, j = 1;\n    someFunction(i, j++);\n\nWhat can we say about the values of i and j after the call to someFunction()?\n\n*  In C, we can say for certain that i is 1, and j is 2.\n*  In C++, well, i may have been passed by reference, so its value is unknown.  But j is known to be 2.\n*  In D, we can't say anything about i and j.  Either or both may have any value.\n\nAnonymous classes.  Slices.  Variadic templates.  Class invariants.  Type properties and atttributes.  Three different flavors of const.  The list goes on and on.  This language isn't as complex as C++ - it's far, far more complex.  Multiple inheritance is the only major feature I can think of that's been left out (but please point out others).\n\nAnd this has real consequences.  C++ provides a stark example: it splintered into disjoint sublanguages, such as template-land.  And this article _proves_ that this is already happening in D.  The author thinks he is writing in a language without stack allocation or nonvirtual functions - and he'll stumble as soon as he encounters the final keyword or the scope storage class.\n\nI will leave you with a koan.  This is valid D:\n\n    real foo = void;\n\n   ", "archived": true, "distinguished": null, "edited": true, "name": "t1_c02b08t", "parent_id": "t1_c02b022", "id": "c02b08t", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02b022", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 15, "link_id": "t3_5yznx", "retrieved_on": 1427425596, "body": "Hmm. So, by your definition, the \"complexity\" of a language is the worst-readable code you can come up with that still compiles in that language, regardless of whether it would ever be encountered in real life?", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02azwx", "id": "c02b022", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02azwx", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425598, "id": "c02azwx", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t3_5yznx", "body": "  &gt; That is, the author of D, Walter Bright, is willing to say no to features that leads to cleaner and prettier code.\n\nMua ha ha.  See if you can figure out what the following is in this \"simpler C/C++ replacement:\"\n\n    0x1__2eB_3.4p72AELi\n\nDid you guess \"imaginary real?\"  No?  What's that - \"Imaginary real\" is a contradiction, you say?\n\nOh, I'm just getting started...but suffice to say, this language fails to address the largest problem in C++, which is its complexity.  ", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -9, "author": "null_vector", "created_utc": "1193216598", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c02b04h", "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425595, "score": 24, "score_hidden": false, "id": "c02b04h", "author": "WalterBright", "created_utc": "1193221156", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 24, "parent_id": "t1_c02azxh", "body": "Because it's much faster to learn something new by comparing it with something one already knows, and then one just has to learn the differences.", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193245584", "ups": 2, "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425567, "score": 2, "id": "c02b2a1", "author": "dmpk2k", "archived": true, "distinguished": null, "edited": true, "body": " &gt; They're all great languages.\n\nHuh. If C++ isn't a terrible language (and C skates quite close in some areas), then what _is_? ", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02b2a1", "parent_id": "t1_c02azxh", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": -9, "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425598, "id": "c02azxh", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02azxh", "parent_id": "t3_5yznx", "body": "Why compare C++ and D or even C?\n\nThey're completely different languages with different ways of solving problems.  They're all great languages.  The problem is one someone tries to program in X like they did in Y.", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -4, "author": "drawkbox", "created_utc": "1193218228", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 5, "author": "LaurieCheers", "created_utc": "1193218704", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193220261", "name": "t1_c02b03f", "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425596, "score": 8, "score_hidden": false, "id": "c02b03f", "author": "CyberShadow", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 8, "parent_id": "t1_c02b00p", "body": "C, very well (D has all of C's standard types, and supports common calling conventions). C++ - somewhat, if we're talking about direct linking. D 2.0 now has an extern(C++) attribute, which mangles the name according to the more popular mangling schemes (they haven't been standardised). AFAIK it's compatible with DMC, MSVC and GCC.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 5, "score_hidden": false, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425597, "body": "Sad but true. How well can D interoperate with C or C++ code?", "archived": true, "distinguished": null, "edited": true, "name": "t1_c02b00p", "parent_id": "t1_c02b003", "id": "c02b00p", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425596, "subreddit_id": "t5_2fwo", "archived": true, "ups": 9, "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 9, "id": "c02b011", "author": "baxissimo", "created_utc": "1193218958", "distinguished": null, "edited": false, "body": "Yeh, C++ is definitely not going away.   But I look at it this way:  it's at least as easy if not easier to call legacy C code from D than it is from most scripting languages.\n\nSo if you were thinking about doing something in a scripting language and worried that the scripting language might not be up to the task performance-wise, D is an excellent choice.  \n\nBecause of the ability to call C libs you're no more shut out from the outside world than you would be using the scripting language.\n", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02b011", "parent_id": "t1_c02b003", "score_hidden": false, "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "CyberShadow", "created_utc": "1193219197", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -4, "author": "drawkbox", "created_utc": "1193219409", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "derkaas", "created_utc": "1193229972", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -4, "author": "drawkbox", "created_utc": "1193230388", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -2, "author": "derkaas", "created_utc": "1193232792", "children": [{"controversiality": 0, "retrieved_on": 1427425583, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02b118", "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 4, "score_hidden": false, "id": "c02b118", "author": "drawkbox", "created_utc": "1193234810", "distinguished": null, "edited": true, "author_flair_text": null, "subreddit": "programming", "ups": 4, "parent_id": "t1_c02b0s9", "body": "I am pretty sure you are wrong.  Judging by what all the documentation and Sun themselves say.  Hotspot, Sun's JVM is written in C++.\n\nEDIT: I love when people downmod facts.  Gives me hope.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": -2, "name": "t1_c02b0s9", "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425587, "score_hidden": false, "id": "c02b0s9", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02b0l5", "body": "I'm pretty sure Sun's Java VM is written in C.\n\nAnd let's not forget that with JIT, much of the Java bytecode (at least the \"hot spots\") is compiled into native code.", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "georgefrick", "created_utc": "1193233147", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "drawkbox", "created_utc": "1193234667", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "derkaas", "created_utc": "1193325546", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "drawkbox", "created_utc": "1193376307", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "derkaas", "created_utc": "1193403360", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 0, "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425262, "score": 0, "id": "c02bkfr", "author": "drawkbox", "created_utc": "1193435784", "distinguished": null, "edited": false, "body": "You *can* but now I see you just have a hate for C++.  You really should learn it, it is hard yes but if you try you can do it.\n\nBeing blind to a mammoth like C++ is just silly.\n\nAnd, nearly all in use and market friendly JVMs are ALL C++.  Anything not is usually a tech demo or experiment.\n\n&gt;JUICE is a J2ME experimental Java Virtual Machine written in C.", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02bkfr", "parent_id": "t1_c02bggd", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 2, "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425313, "id": "c02bggd", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02bggd", "parent_id": "t1_c02bf2m", "body": "Java is _not_ a wrapper for C++.\n\nFirst of all, not all Java VMs are written in C++. There are [many VM implementations](http://en.wikipedia.org/wiki/List_of_Java_virtual_machines), and at least [one I picked at random is written in C](http://en.wikipedia.org/wiki/Juice_%28JVM%29)\n\nAlso, many VMs compile some of the bytecode to native machine code (see [JIT](http://en.wikipedia.org/wiki/Just-in-time_compilation)), at which point there is certainly no \"wrapper\" C++ procedures being called at all.\n\nThere has even been [talk of creating a processor that could execute Java bytecode directly](http://electronicdesign.com/Articles/Index.cfm?ArticleID=4841).\n\nDo system calls require hitting some procedure written in C++? Possibly, but that depends on the operating system, not on Java.\n\nFurther, there is no reason to suspect that every Java compiler out there is written in C++.\n\nThus, I can use Java without ever using anything written in C++.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02bf2m", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425330, "body": "Yes Java is a wrapper C++ not the other way around did you read my note clearly?\n\nWould you prefer then that C++ is the layer below that runs Java, that terminology?  I think I clarified I was using \"wrapper\" as a means to explain not a concrete wrapper to a console app or some API.   I meant that Java is a wrapper to C++ in that is facilitates simplifications such as GC, native calling, pointer handling etc. \n\nLike I said \"Java being a wrapper for C++ is really a generational layer (Java Virtual Machine) but it is still a wrapper for accessing C++ calls in the virtual machine that translate again in C++ to OS calls in many cases\" \n\nWhat runs the Java Virtual machine? And would you consider a virtual machine a wrapper of os logic?\n", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02b9ex", "id": "c02bf2m", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02b9ex", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 2, "link_id": "t3_5yznx", "retrieved_on": 1427425405, "id": "c02b9ex", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02b10l", "body": "You're right. It's written in C++. But I think his point (and my other point) is that HotSpot compiles hot spots (fathom that) into *native* instructions, which are in no way \"wrapped\" by C++.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 0, "name": "t1_c02b10l", "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425584, "score_hidden": false, "id": "c02b10l", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02b0tq", "body": " Read anything? At all?\n\n&gt;The HotSpot Java Virtual Machine is written in C++ [3]. As stated in HotSpot web page, the code contains approximately 250,000 lines of code. \n\nhttp://en.wikipedia.org/wiki/HotSpot\nhotspot is the Sun JVM, yes written in C++.  Same since 99. ", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 2, "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425581, "score": 2, "id": "c02b16r", "author": "newton_dave", "created_utc": "1193236164", "distinguished": null, "edited": false, "body": "And the VM is written in...?", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02b16r", "parent_id": "t1_c02b0tq", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 1, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425586, "body": "Read about the virtual machine since 99?", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02b0tq", "parent_id": "t1_c02b0l5", "id": "c02b0tq", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": -4, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425589, "body": "  Ready?  Java runs on a virtual machine built with C++, like .NET runs on a framework built with C++.  This is a middle layer built on C++. This generation of frameworks (5th gen) nearly ALL web frameworks and desktop apps are built with C++.  Even the PHP bits for Windows have a C++ isapi filter. Even the very browser you might be using is built with C++ (gasp!). \n\nGranted Java being a wrapper for C++ is really a generational layer (Java Virtual Machine) but it is still a wrapper for accessing C++ calls in the virtual machine that translate again in C++ to OS calls in many cases.\n", "archived": true, "distinguished": null, "edited": true, "name": "t1_c02b0l5", "parent_id": "t1_c02b0kb", "id": "c02b0l5", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02b0kb", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 3, "link_id": "t3_5yznx", "retrieved_on": 1427425591, "body": "How is Java a \"wrapper for C++?\"", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02b01v", "id": "c02b0kb", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": -4, "score_hidden": false, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425596, "body": "That is pretty useful and wrappers help. But Frameworks such as .NET and Java are also wrappers for C++.  I think that C++ is so powerful but it is also extremely large the domain knowledge you need to be an effective C++ programmer.  D definitely helps but there is an additional layer there, and with additional layers that equals slow down.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02b01v", "parent_id": "t1_c02b01k", "id": "c02b01v", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 1, "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425596, "id": "c02b01k", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02b01k", "parent_id": "t1_c02b003", "body": "Well, D now has the (limited) ability to link to C++ code directly, so it may not be as big a problem as it seems. There are programs that can automatically create D wrappers for C++ code as well.", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 10, "author": "sigzero", "created_utc": "1193225656", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -1, "author": "cunningjames", "created_utc": "1193228073", "children": [{"controversiality": 0, "retrieved_on": 1427425589, "subreddit_id": "t5_2fwo", "archived": true, "ups": 0, "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 0, "id": "c02b0lm", "author": "drawkbox", "created_utc": "1193230568", "distinguished": null, "edited": true, "body": "PHP, Ruby, Python (C) Java, .NET (C++), php extras for windows (isapi filter - C++).\n\nBut you can just focus on web frameworks and diregard all the other systems that are based on it or C.", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02b0lm", "parent_id": "t1_c02b0fp", "score_hidden": false, "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -2, "author": "qwe1234", "created_utc": "1193232790", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "[deleted]", "created_utc": "1193234459", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -1, "author": "sbrown123", "created_utc": "1193236332", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "qwe1234", "created_utc": "1193237386", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "sbrown123", "created_utc": "1193243931", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "qwe1234", "created_utc": "1193244672", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193245796", "name": "t1_c02b2ax", "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425567, "score": 3, "score_hidden": false, "body": "Don't worry, qwe. As long as we have people like you around to do the _serious_ work, the rest of us can live in harmony.\n\nSomeone has to write the C++. I'm sure glad it's not me.", "author": "dmpk2k", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 3, "parent_id": "t1_c02b269", "id": "c02b2ax", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02b269", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 1, "link_id": "t3_5yznx", "retrieved_on": 1427425569, "body": "huh?\n\nwhat does that have to do with my point?\n\nyou have very serious problems if that's what passes for reading comprehension and writing for you.\n", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02b23f", "id": "c02b269", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 0, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425570, "body": "Sure, but I didn't feel in necessary to point out the other problems in your comment (ie PHP, Python, and Ruby are actually written in C).", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02b23f", "parent_id": "t1_c02b1cw", "id": "c02b23f", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02b1cw", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425579, "body": "did you read beyond the second word of my message?\n", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02b17p", "id": "c02b1cw", "author_flair_css_class": null}], "subreddit": "programming", "ups": -1, "name": "t1_c02b17p", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425581, "score_hidden": false, "body": "Because Google isn't the internet.", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02b0zo", "id": "c02b17p", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -3, "author": "qwe1234", "created_utc": "1193237461", "children": [{"controversiality": 0, "retrieved_on": 1427425530, "subreddit_id": "t5_2fwo", "created_utc": "1193268419", "ups": 0, "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 0, "id": "c02b54p", "author": "noamsml", "archived": true, "distinguished": null, "edited": false, "body": "Stop talking about yourself.", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02b54p", "parent_id": "t1_c02b1d9", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": -3, "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425579, "id": "c02b1d9", "author_flair_text": null, "distinguished": null, "edited": true, "name": "t1_c02b1d9", "parent_id": "t1_c02b0zo", "body": "  people think they are entitled to wear their ignorance and stupidity like a badge of honor.\n\nin reality, they're assholes who, for the most part, are wastes of oxygen and a drain on the environment.\n  ", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 7, "author": "brendankohler", "created_utc": "1193237981", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "[deleted]", "created_utc": "1193301175", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193315012", "name": "t1_c02b86j", "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425420, "score": 1, "score_hidden": false, "body": "I did misread him...however a large chunk of google *is* written in python, such as video/youtube, groups and code. Also, all the support code for the search engine core is python.", "author": "brendankohler", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c02b7k0", "id": "c02b86j", "author_flair_css_class": null}], "subreddit": "programming", "ups": 2, "score_hidden": false, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425428, "body": "[deleted]", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02b7k0", "parent_id": "t1_c02b1f9", "id": "c02b7k0", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 7, "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425578, "id": "c02b1f9", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02b1f9", "parent_id": "t1_c02b0zo", "body": "Because python and ruby aren't written in C++ (try C), for one.\n\nAlso, much of google is written in python...so yeah, the entire post is pretty much inaccurate.", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c02b4a3", "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425541, "score": 1, "score_hidden": false, "body": "C++ haters...", "author": "drawkbox", "created_utc": "1193259994", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c02b0zo", "id": "c02b4a3", "author_flair_css_class": null}], "subreddit": "programming", "ups": 2, "name": "t1_c02b0zo", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425584, "score_hidden": false, "body": "[deleted]", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02b0s7", "id": "c02b0zo", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "noamsml", "created_utc": "1193268377", "children": [{"controversiality": 0, "retrieved_on": 1427425518, "subreddit_id": "t5_2fwo", "created_utc": "1193278696", "name": "t1_c02b63m", "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 4, "score_hidden": false, "id": "c02b63m", "author": "floodyberry", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 4, "parent_id": "t1_c02b54l", "body": "Isn't MapReduce written in C++?", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425434, "subreddit_id": "t5_2fwo", "created_utc": "1193292373", "ups": 1, "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 1, "body": "what??\n\nhow clueless.\n", "id": "c02b73e", "author": "qwe1234", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "name": "t1_c02b73e", "parent_id": "t1_c02b54l", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02b54l", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425530, "body": "... You're pulling stuff out of your ass, aren't you?\n\n1. The google search engine is written in Python. The first piece of code to be written in C++ for google is the AdWords engine.\n\n2. Python is written in C. I think Ruby is too, but I'm not sure.\n\n3. Python and Ruby aren't \"thin layers of cruft\". They both implement full-fledged virtual machines and byte-compile code to the virtual machine.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02b0s7", "id": "c02b54l", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02b0s7", "score_hidden": false, "controversiality": 0, "archived": true, "ups": -2, "link_id": "t3_5yznx", "retrieved_on": 1427425587, "id": "c02b0s7", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02b0fp", "body": "google and similar services are written in c++.\n\nphp, python and ruby are just a thin layer of cruft on top of the iceberg of c++ code that does the actual indexing, crawling, broadcasting, analyzing and advertising of the internet.\n", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425581, "subreddit_id": "t5_2fwo", "archived": true, "ups": 6, "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 6, "body": " &gt;Is Java written in C++?\n\nYes, at least Sun's version.  But if I wrote a site using Java I wouldn't count it in the C++ category since Java could be written in D.", "author": "sbrown123", "created_utc": "1193236472", "distinguished": null, "edited": true, "id": "c02b185", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02b185", "parent_id": "t1_c02b0fp", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": -1, "name": "t1_c02b0fp", "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425591, "score_hidden": false, "id": "c02b0fp", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02b0b3", "body": "I'm really not sure what was meant by that. PHP, Python, and Ruby are all written in C. Surely that takes care of most web important web frameworks.\n\nIs Java written in C++?", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02b0b3", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 10, "link_id": "t3_5yznx", "retrieved_on": 1427425594, "id": "c02b0b3", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02b003", "body": "C++ drives nearly all web frameworks? Really?", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425577, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02b1n7", "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 4, "score_hidden": false, "id": "c02b1n7", "author": "[deleted]", "created_utc": "1193240139", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 4, "parent_id": "t1_c02b003", "body": "*It is like a sticky bomb, for at least another 10-20 years until it goes into hiding like an invisible hand as assembly has done as an ominous lower layer to the masses.*\n\nIn a C++ dominated world programming is like landscape architecture in Afghanistan. ", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193252695", "ups": 1, "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425554, "score": 1, "body": "True, and then D can slowly takes it's place. ", "id": "c02b3aw", "author": "[deleted]", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02b3aw", "parent_id": "t1_c02b003", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": -4, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425597, "body": "Except that C++ still drives nearly all web frameworks (C drives some) as a base, all game development kits that perform (DirectX, OpenGL), operating systems (some C *nix), desktop apps that perform nearly all C++ etc.\n\nPeople want to kill C++ but it runs everything you are building as a base.  Most products in developer products or frameworks today run ON TOP of a C++ framework or engine.   \n\nIt is like a sticky bomb, for at least another 10-20 years until it goes into hiding  like an invisible hand as assembly has done as an ominous lower layer to the masses.", "archived": true, "distinguished": null, "edited": true, "name": "t1_c02b003", "parent_id": "t3_5yznx", "id": "c02b003", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 6, "author": "Vystril", "created_utc": "1193218953", "children": [{"controversiality": 0, "retrieved_on": 1427425596, "subreddit_id": "t5_2fwo", "created_utc": "1193219164", "ups": 4, "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 4, "body": "Free standing functions?", "author": "TrueTom", "archived": true, "distinguished": null, "edited": false, "id": "c02b01i", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02b01i", "parent_id": "t1_c02b00z", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425596, "subreddit_id": "t5_2fwo", "created_utc": "1193219500", "ups": 4, "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 4, "body": "Pointers?\nStack allocated data?", "author": "baxissimo", "archived": true, "distinguished": null, "edited": false, "id": "c02b020", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02b020", "parent_id": "t1_c02b00z", "score_hidden": false, "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 131, "author": "WalterBright", "created_utc": "1193220504", "children": [{"controversiality": 0, "retrieved_on": 1427425595, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02b058", "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 26, "score_hidden": false, "body": "oh SNAP!\r\n", "author": "manthrax", "created_utc": "1193221856", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 26, "parent_id": "t1_c02b03t", "id": "c02b058", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193222556", "name": "t1_c02b06f", "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425595, "score": 66, "score_hidden": false, "body": "n.B: You're also unlikely to find Gosling answering stupid questions about Java on reddit.", "author": "[deleted]", "archived": true, "distinguished": null, "edited": true, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 66, "parent_id": "t1_c02b03t", "id": "c02b06f", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425594, "subreddit_id": "t5_2fwo", "created_utc": "1193222975", "name": "t1_c02b076", "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 91, "score_hidden": false, "id": "c02b076", "author": "mooli", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 91, "parent_id": "t1_c02b03t", "body": "But apart from that, what have the Romans ever done for us?", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193225808", "ups": 3, "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425594, "score": 3, "body": "Your turn, Vystril...", "id": "c02b0bg", "author": "Reporter", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02b0bg", "parent_id": "t1_c02b03t", "score_hidden": false, "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -6, "author": "mikepurvis", "created_utc": "1193226918", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 10, "author": "newton_dave", "created_utc": "1193228025", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "mikepurvis", "created_utc": "1193229224", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 5, "author": "newton_dave", "created_utc": "1193229329", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193229424", "ups": 6, "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425591, "score": 6, "score_hidden": false, "id": "c02b0j0", "author": "mikepurvis", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02b0j0", "parent_id": "t1_c02b0ip", "body": "Big ass-letters aren't always bad... sometimes they draw my attention to things that are \"juicy\", for example.", "author_flair_css_class": null}], "subreddit": "programming", "ups": 5, "name": "t1_c02b0ip", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425591, "score_hidden": false, "body": "I ignore big-ass letters too; I assume they're trying to sell me something.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02b0ie", "id": "c02b0ip", "author_flair_css_class": null}], "subreddit": "programming", "ups": 1, "name": "t1_c02b0ie", "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425591, "score_hidden": false, "id": "c02b0ie", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02b0fm", "body": "Ouch, you caught me out. I was meaning to address the debate about C++0x vs. D, rather than Java vs. D.\n\nI think the reason I assume that any extension to C++ needs to retain headers is for compatibility with runtime linking schemes. But presumably that's not the case here, and D is better for it.", "author_flair_css_class": null}], "subreddit": "programming", "ups": 10, "name": "t1_c02b0fm", "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425591, "score_hidden": false, "id": "c02b0fm", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02b0do", "body": "I guess you didn't read TFA:\n\n&gt; No more header files, or not repeating yourself twice all the time\n\nIt's even in big-ass letters.", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": -6, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425592, "body": "Am I still going to get to spend time writing header files of reduntant declarations, wrapped in include guards?\n\nI appreciate the effort from these guys, but I kind of feel like C++ (especially with STL/boost) hits a sweet spot between dynamic and static, and if you want any farther toward dynamic, you're better off just going all the way to Python.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02b0do", "parent_id": "t1_c02b03t", "id": "c02b0do", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425591, "subreddit_id": "t5_2fwo", "created_utc": "1193227968", "ups": 36, "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 36, "body": "Oh yeah? How would YOU know?\n\nOh, wait.", "author": "newton_dave", "archived": true, "distinguished": null, "edited": false, "id": "c02b0fi", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02b0fi", "parent_id": "t1_c02b03t", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425591, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02b0hm", "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": -7, "score_hidden": false, "id": "c02b0hm", "author": "MarshallBanana", "created_utc": "1193228859", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": -7, "parent_id": "t1_c02b03t", "body": "&gt; UCS-2\n\nwhat", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": -2, "author": "martoo", "created_utc": "1193229633", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 1, "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425587, "score": 1, "id": "c02b0r3", "author": "[deleted]", "created_utc": "1193232407", "distinguished": null, "edited": false, "body": "[deleted]", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02b0r3", "parent_id": "t1_c02b0jf", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02b0jf", "score_hidden": false, "controversiality": 0, "archived": true, "ups": -2, "link_id": "t3_5yznx", "retrieved_on": 1427425591, "id": "c02b0jf", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02b03t", "body": "&gt; link compatibility with C and C++, delegates, function literals, template metaprogramming, compile time function evaluation, pointers, free functions, data compatibility with C and C++, array slices, native compilation, inline assembler, string mixins, function templates, scope guards, RAII, compile time introspection, POD structs, nested functions, builtin associative arrays, complex and imaginary floating point types, greater than 64 bit floating point precision, UTF-8, UTF-16 and UCS-2 Unicode support, type tuples, expression tuples, variadic templates, resizable arrays, stack based arrays, const and invariant type modifiers, conditional compilation\n\nOkay, all of that could be simpler than C++, but it can't be simpler than any other language.", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "derkaas", "created_utc": "1193232432", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 9, "author": "newton_dave", "created_utc": "1193236066", "children": [{"controversiality": 0, "retrieved_on": 1427425569, "subreddit_id": "t5_2fwo", "created_utc": "1193244483", "ups": 4, "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 4, "body": "I guess it's a matter of opinion, but there are definite advantages to implementing those features with objects instead of as language features. The most significant advantage is that with objects, the behavior can easily be modified/extended. It also keeps the language itself pretty simple.\n\nBut you're right, the syntax is usually not as terse. I think this would matter most with the math operations (high-precision and/or complex floating points). Using a List or a HashMap is hardly cumbersome.\n\nI miss pointers the most :-/", "author": "derkaas", "archived": true, "distinguished": null, "edited": false, "id": "c02b25c", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02b25c", "parent_id": "t1_c02b16h", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 9, "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425582, "id": "c02b16h", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02b16h", "parent_id": "t1_c02b0r6", "body": "But many of those require extra, explicit work in Java, and use explicit object methods rather than standard operators, no?", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425579, "subreddit_id": "t5_2fwo", "created_utc": "1193237847", "ups": -1, "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": -1, "body": "How DARE you question the mighty D!!! I mean, how was the parent poster to know in his almighty all-knowingness that Java had resizable arrays? \n\nLanguage shootouts always descend to feature matrixes. But the fact is that the power of a language depends on more factors than whether the associative arrays are built-in or not. In fact...for most tasks, the SQL or ORM libraries available for a language are 100 times more important than whether it has feature x or not.", "author": "mynameishere", "archived": true, "distinguished": null, "edited": false, "id": "c02b1ep", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02b1ep", "parent_id": "t1_c02b0r6", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193250661", "ups": 9, "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425558, "score": 9, "score_hidden": false, "body": "     &gt; arbitrary floating point precision (see BigDecimal)\n\nPresumably D's support of 80-bit floats means that it uses the x86 FPU's native 80-bit \"double extended precision\" format.  This is very different than writing a bignum library; it lets you use the _hardware_, in a way that few languages have exposed.", "author": "pl0nk", "archived": true, "distinguished": null, "edited": true, "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02b2zw", "parent_id": "t1_c02b0r6", "id": "c02b2zw", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "archived": true, "ups": 5, "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425546, "score": 5, "id": "c02b3yc", "author": "[deleted]", "created_utc": "1193257495", "distinguished": null, "edited": false, "body": "&gt; * stack-based arrays (see Stack)\n\nI think you've got this backwards. The Java stdlib `Stack` class is an array-based implementation of a simple stack data structure, while I take a \"stack-based array\" to mean a stack-*allocated* array, meaning a array variable that will be automatically freed at the end of its enclosing function scope.\n\nThe Java language *by design* severely limits the programmer's ability to control object lifecycle. This is, in fact, a Good Thing (tm) for the massive majority of programmers working in industry, since it protects them from a huge number of the usual memory leak and segfault issues that plague C/C++ code.\n\nOn the other hand, if you're trying to hand-tool some performance-critical code, and don't trust your JVM's garbage collection algorithm to do the right thing, you're pretty much SOL.", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02b3yc", "parent_id": "t1_c02b0r6", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 1, "name": "t1_c02b0r6", "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425587, "score_hidden": false, "id": "c02b0r6", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02b03t", "body": "I'll give you most of that, but not all. It's a little specious to exclude the entire API. Java supports at least:\n\n* POD structs (class w/ only public members, or a JavaBean)\n* associative arrays (see HashMap)\n* arbitrary floating point precision (see BigDecimal)\n* UTF-8, UTF-16 and UCS-2 Unicode support (see Charset)\n* resizable arrays (see ArrayList)\n* stack-based arrays (see Stack)\n* invariant type modifier (see final) ", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 13, "author": "bosco", "created_utc": "1193245752", "children": [{"controversiality": 0, "retrieved_on": 1427425543, "subreddit_id": "t5_2fwo", "archived": true, "ups": 1, "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 1, "body": "[deleted]", "author": "[deleted]", "created_utc": "1193259271", "distinguished": null, "edited": true, "id": "c02b46q", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02b46q", "parent_id": "t1_c02b2at", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425385, "subreddit_id": "t5_2fwo", "created_utc": "1193335939", "ups": 3, "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 3, "body": "Psst!  You forgot to mention that you want to have his baby!  ;-)", "author": "foonly", "archived": true, "distinguished": null, "edited": false, "id": "c02bawd", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02bawd", "parent_id": "t1_c02b2at", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02b2at", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 13, "link_id": "t3_5yznx", "retrieved_on": 1427425567, "id": "c02b2at", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02b03t", "body": "Hi Walter,\n\nI feel kind of embarrassed seeing the author of the programming language that I was writing about, respond to one of the postings on my post about the language. \n\nAnyways, thanks for all the fantastic work you've done!\n\np.s. you respond pretty fast on reddit. don't you have a language to fine-tune?\n\n", "author_flair_css_class": null}], "subreddit": "programming", "ups": 131, "name": "t1_c02b03t", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425595, "score_hidden": false, "body": "In no particular order:\r\n\r\nlink compatibility with C and C++,\r\ndelegates,\r\nfunction literals,\r\ntemplate metaprogramming,\r\ncompile time function evaluation,\r\npointers,\r\nfree functions,\r\ndata compatibility with C and C++,\r\narray slices,\r\nnative compilation,\r\ninline assembler,\r\nstring mixins,\r\nfunction templates,\r\nscope guards,\r\nRAII,\r\ncompile time introspection,\r\nPOD structs,\r\nnested functions,\r\nbuiltin associative arrays,\r\ncomplex and imaginary floating point types,\r\ngreater than 64 bit floating point precision,\r\nUTF-8, UTF-16 and UCS-2 Unicode support,\r\ntype tuples,\r\nexpression tuples,\r\nvariadic templates,\r\nresizable arrays,\r\nstack based arrays,\r\nconst and invariant type modifiers,\r\nconditional compilation\r\n ", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02b00z", "id": "c02b03t", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 6, "name": "t1_c02b00z", "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425596, "score_hidden": false, "id": "c02b00z", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5yznx", "body": "what does D offer over Java?  i'm certainly not seeing it.", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 4, "author": "[deleted]", "created_utc": "1193222610", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193226797", "ups": 13, "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425592, "score": 13, "score_hidden": false, "id": "c02b0de", "author": "Tommstein", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02b0de", "parent_id": "t1_c02b06i", "body": "It never became reasonable, but became popular with Java's pussifying of C++.", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 6, "author": "revence27", "created_utc": "1193236176", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "[deleted]", "created_utc": "1193237261", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "gwern", "created_utc": "1193238694", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 7, "author": "[deleted]", "created_utc": "1193241920", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -2, "author": "foonly", "created_utc": "1193335864", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 5, "author": "[deleted]", "created_utc": "1193336900", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -2, "author": "foonly", "created_utc": "1193352120", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 4, "author": "[deleted]", "created_utc": "1193355477", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -2, "author": "foonly", "created_utc": "1193385192", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 5, "author": "[deleted]", "created_utc": "1193399270", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -1, "author": "foonly", "created_utc": "1193417429", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "[deleted]", "created_utc": "1193419016", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -1, "author": "foonly", "created_utc": "1193421211", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "[deleted]", "created_utc": "1193424162", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 0, "author": "[deleted]", "created_utc": "1193424994", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 0, "author": "foonly", "created_utc": "1193428019", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 0, "author": "[deleted]", "created_utc": "1193436796", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 1, "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425258, "score": 1, "body": "It was a counter-troll. :-)", "author": "foonly", "created_utc": "1193438537", "distinguished": null, "edited": false, "id": "c02bkno", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02bkno", "parent_id": "t1_c02bkj3", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": 0, "score_hidden": false, "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425260, "id": "c02bkj3", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02bkj3", "parent_id": "t1_c02bjh3", "body": "Nice Troll.", "author_flair_css_class": null}], "subreddit": "programming", "ups": 0, "name": "t1_c02bjh3", "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425273, "score_hidden": false, "id": "c02bjh3", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bj1e", "body": "I accept your surrender.", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 0, "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425279, "id": "c02bj1e", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02bj1e", "parent_id": "t1_c02bixj", "body": "This is my last post on the matter; I'm not going to continue bickering with you on this issue.", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 0, "author": "foonly", "created_utc": "1193425210", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "[deleted]", "created_utc": "1193426479", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 0, "author": "foonly", "created_utc": "1193426976", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "[deleted]", "created_utc": "1193427907", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "foonly", "created_utc": "1193428292", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 0, "author": "[deleted]", "created_utc": "1193428685", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "foonly", "created_utc": "1193429847", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 0, "author": "[deleted]", "created_utc": "1193435741", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 0, "author": "foonly", "created_utc": "1193439462", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "[deleted]", "created_utc": "1193448491", "children": [{"controversiality": 0, "retrieved_on": 1427425188, "subreddit_id": "t5_2fwo", "created_utc": "1193529473", "ups": 1, "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 1, "body": "&gt; No, it doesn't. It just changes the error condition from one of unspecified behavior (writing arbitrary memory locations) to one of specified behavior (raising an IndexError exception, or outofrange, or whatever). Just because you can't write arbitrary data doesn't mean the error is prevented. It's just been given specific semantics. The error can still occur at runtime under your scheme, and whether it writes arbitrary memory locations or raises an IndexError, it's still an error condition at runtime that was not prevented by the type system at compile time.\n\nAh, but all we have to do is prove the program *correct*.  A program that blocks waiting on user input can never be guaranteed to *terminate*, so all you have to do is change the get-input-from-the-user functions from \"wait forever for input\" to \"wait forever for *valid* input\".  You might have to make certain declarations about the function by hand (just as you would for primitive functions that you have to take as axioms -- after heavily scrutinizing the source, of course), but the bulk of that could be shunted off to a standard library somewhere.\n\nThen you have a program that, if you accept the few necessarily postulated functions, can be proven typesafe *and* accept runtime user input.\n\n&gt; It's an engineering trade-off, however, whether the explicit programming necessary to support such a type system is worth the speed and security gained through it. In general, it's not, otherwise people would have been using such arrays in C++ for years, [...]\n\nYou lost me at if-it-were-worth-it,-people-would-be-doing-it-in-C++... ;-)\n\nIt certainly might not be worth doing in languages that explicitly require a lot of scaffolding, but you could have a mean type-inference system in a language with a more terse syntax.", "author": "foonly", "archived": true, "distinguished": null, "edited": false, "id": "c02bq1q", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02bq1q", "parent_id": "t1_c02bli6", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": 1, "score_hidden": false, "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425247, "id": "c02bli6", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02bli6", "parent_id": "t1_c02bkqm", "body": "&gt; There would still have to be runtime checks on user input.\n\nNot *on the array indexing operation*.  Note what I actually said.  The runtime check would be in an injection function, taking a number (received from the user) and returning a value of whatever index type was required to index an array of that particular size.\n\n&gt; Anywhere in the code after the run-time validated number gets returned, the compiler knows (at compile-time!) that the number will be a valid index into someArray, and run-time checks of the array-bounds themselves will be unnecessary.\n\nI'm not aware of dataflow analyses satisfactory to infer that on values without the scaffolding I described earlier.  If you are, please link to the papers, I would be very interested.\n\n&gt; As I mentioned, and I hope I have clarified this sufficiently here, inserting (at compile-time) checks on runtime user input, which validate/convert the input into a value of a known type, allows you to enforce type safety (even on runtime user input!) at compile time.\n\nNo, it doesn't.  It just changes the error condition from one of unspecified behavior (writing arbitrary memory locations) to one of specified behavior (raising an IndexError exception, or out_of_range, or whatever).  Just because you can't write arbitrary data doesn't mean the error is prevented.  It's just been given specific semantics.  The error can still occur at runtime under your scheme, and whether it writes arbitrary memory locations or raises an IndexError, it's still an error condition at runtime that was not prevented by the type system at compile time.\n\nLet me reiterate: what *you're* talking about is not type system which ensures at compile time that errors don't happen, it's a runtime system which gives those errors a specific, defined behavior.  That is *entirely* orthogonal to the type system.\n\nThe scheme I outlined earlier ensures *at compile time* that array indexing errors cannot occur *at all*.  Of course, programmers must explicitly inject the value received from the user into the index type, and handle the case (not an error!) when the value cannot be injected into the index type (that is, when it's out of range).  This would ensure that no IndexError or any other out of bounds array index could *possibly* occur at runtime, without the compiler inserting any silent runtime checks at all.  It would be onerous, but it would be the work of a type system.\n\nType systems (the ones I've been talking about this whole time) prevent at compile time certain classes of errors, whether those errors would have unspecified behavior (e.g., in C) or specified behavior (e.g., in Python).  It's an engineering trade-off, however, whether the explicit programming necessary to support such a type system is worth the speed and security gained through it.  In general, it's not, otherwise people would have been using such arrays in C++ for years, since templates have all the expressivity necessary to implement such a system (well, that, and C++ doesn't have the necessary parametric Maybe/option type to support the injection/projection functions)", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02bkqm", "ups": 0, "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425257, "score_hidden": false, "id": "c02bkqm", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02bkfh", "body": " &gt; We're not talking about runtime-enforced type systems. We haven't ever been talking about runtime-enforced type systems.\n\n&gt; [...]\n\n&gt; And you obviously have no clue what I actually described when I described a way to ensure at compile time that no array would ever be passed an index outside its bounds at runtime. As in, code could that could possibly do such a thing would never compile. There would be no runtime checks on the array indexing operation at all.\n\nThere would still have to be runtime checks on user input.\n\ne.g., if I wanted to let the user choose an item from an array by inputing an index at runtime [contrived example, but it will do], and the type system knew that I was expecting as input a valid index into someArray, then it could insert run-time checks, at compile time, which would validate/convert the user's input into a valid integer within said range.  Anywhere in the code *after* the run-time validated number gets returned, the compiler knows (at compile-time!) that the number will be a valid index into someArray, and run-time checks of the array-bounds themselves will be unnecessary.\n\n&gt; Read the thread. It has always been about type system verification at compile time, never about runtime checks. Your bringing up of runtime checks, if it's even consistent with your previous posts (I'm not going to re-read them to verify) isn't at all what this discussion has been about; if you misunderstood that, I suggest a course in reading comprehension ;)\n\nAs I mentioned, and I hope I have clarified this sufficiently here, inserting (at compile-time) checks *on runtime user input*, which validate/convert the input into a value of a known type, allows you to enforce type safety (even on runtime user input!) *at compile time*.\n\n(It also has become clear that, although we disagree, you are sincere in your argumentation.  I withdraw my accusations of trollery. :-) \n\n[Edit:  reddit likes to italicize underscores :-/ ]", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 0, "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425262, "id": "c02bkfh", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02bkfh", "parent_id": "t1_c02bjpv", "body": "&gt; Some languages have type systems that operate entirely at runtime.\n\nWe're not talking about runtime-enforced type systems.  We haven't ever been talking about runtime-enforced type systems.  In one of my very first posts in this thread, in fact, the one you first replied to, I said, \"For languages like C, C++, and D, \"type safety\" is a compile time concept.\"  Runtime-enforced checks have **never** been in the scope of this discussion.\n\n&gt; And by inserting said checks, the compiler allows the program to accept an input value at runtime while still preventing the property in question from being violated.\n\nAnd though it would be possible to ensure *at compile time* that this property could never be violated by any runtime value, as I noted earlier, it would be far too onerous to be useful.\n\n&gt; Your idea of a type-system as containing no code that will be inserted at runtime would make it impossible to accept user input and maintain type-safty.\n\nCan I have some of what you're smoking?  Apart from the support necessary to handle runtime polymorphism/RTTI, C++ has no runtime concept of a type.  The only reason type tags are in the runtime implementations of languages like SML and OCaml is to support garbage collection.  Haskell's only runtime idea of types is indexes into a dictionary of methods for typeclasses.  One of the major *points* of verifying that a program doesn't violate the type system *at compile time* is to elide such runtime checks and inefficiencies.\n\n&gt; It's always a pleasure to waste the time of someone who first claims that despite my being right, such a system would not be practical, then turns around and claims that any REAL type system would not allow both compile-time type verification AND runtime user input.\n\nWhat you're here doesn't even make sense.  And you obviously have no *clue* what I actually described when I described a way to ensure *at compile time* that no array would ever be passed an index outside its bounds *at runtime*.  As in, code could that could *possibly* do such a thing would never compile.  There would be no runtime checks on the array indexing operation *at all*.\n\n&gt; in your desperation to be right, you've contorted and wriggled and changed your definitions and arguments as it suited you, and you STILL don't get it.\n\nRead the thread.  It has always been about type system verification *at compile time*, never about runtime checks.  Your bringing up of runtime checks, if it's even consistent with your previous posts (I'm not going to re-read them to verify) isn't at all what this discussion has been about; if you misunderstood that, I suggest a course in reading comprehension ;)\n\n&gt; And a compiler for a language with a better type system could guarantee this!\n\nNot even a dynamically typed language like Python has a type system that concerns itself with the bounds of arrays.  A list is a list no matter the size.  That Python inserts bound-checks on list indexing is **entirely orthogonal** to the type system.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02bjpv", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425270, "body": "&gt;&gt; You could have a very lightweight syntax like x:int(0,7), or x:indexof(somearray), and the compiler could then insert the appropriate range checks.\n\n&gt; If it's inserting range checks, it's not a function of the type system. If it's inserting range checks, the checks are occurring at RUNTIME, not COMPILE-TIME.\n\nAs you mentioned, a type system is math, not the mechanics of a particular compiler.  Some languages have type systems that operate entirely at runtime.\n\n&gt;&gt; Some of these will be checks at runtime, but they can be inserted automatically at compile-time, thereby preventing the possibility of a buffer-overflow attack at compile time.\n\n&gt; You seem to have no idea whatsoever what it means for a type system to prevent errors at compile time. It doesn't mean that the compiler inserts checks to verify runtime (value-based) properties, it means that that type system rejects all programs for which the property can be violated.\n\nAnd by inserting said checks, the compiler allows the program to accept an input value *at runtime* while still preventing the property in question from being violated.  What is *not* a function of the type system is what to do next after receinving said bad input, but a programmer might, for instance, display an error message, ask again for a valid input, and then when one has been acquired, send the program on its merry way.\n\n&gt; Adding runtime bounds checking is not a type system facility or matter.\n\nYour idea of a type-system as containing *no code* that will be inserted at runtime would make it impossible to accept user input and maintain type-safty.\n\n&gt; Apparently you've been having this whole conversation without having the first clue what a type system actually is and what we were actually talking about. Thanks for wasting my time.\n\nIt's always a pleasure to waste the time of someone who first claims that despite my being *right*, such a system would not be *practical*, then turns around and claims that any REAL type system would not allow both compile-time type verification AND runtime user input.\n\nI have argued the same damn point throughout this entire thread, and in your desperation to be right, you've contorted and wriggled and changed your definitions and arguments as it suited you, and you STILL don't get it.\n\n*[edit: redacted accusation of trolling]*\n\n&gt; Furthermore, the C programming language is plenty sufficient for implementing bounds-checked arrays and strings which cannot have buffer overflows at runtime.\n\nAnd a compiler for a language with a better type system could guarantee this!", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02bjke", "id": "c02bjpv", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 0, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425272, "body": "&gt; You could have a very lightweight syntax like x:int(0,7), or x:indexof(somearray), and the compiler could then insert the appropriate range checks.\n\nIf it's inserting range checks, it's **not a function of the type system**.  If it's inserting range checks, the checks are occurring at **RUNTIME**, not **COMPILE-TIME**.\n\n&gt; Some of these will be checks at runtime, but they can be inserted automatically at compile-time, thereby preventing the possibility of a buffer-overflow attack at compile time.\n\nYou seem to have no idea whatsoever what it means for a type system to prevent errors at compile time.  It doesn't mean that the compiler inserts checks to verify runtime (value-based) properties, it means that that *type system* rejects all programs for which the property can be violated.\n\nAdding runtime bounds checking is not a type system facility or matter.  Apparently you've been having this whole conversation without having the first clue what a type system actually is and what we were actually talking about.  Thanks for wasting my time.\n\nFurthermore, the C programming language is plenty sufficient for implementing bounds-checked arrays and strings which cannot have buffer overflows at runtime.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02bjke", "parent_id": "t1_c02bjiq", "id": "c02bjke", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 0, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425273, "body": "&gt; There is no existing typesystem which could prevent buffer overflows at compile time without requiring an inordinate degree of inconvenient programmer overhead to use. Hindley-Milner, for instance, can encode sized arrays in the type system, but to actually use such sizes in a way that prevented buffer overflows at compile time would require multiple arduous and syntactically heavyweight injection/projection function calls (remember, not only must the arrays be sized, but the indexes must as well).\n\nThe type system does not dictate the syntax.  You could have a very lightweight syntax like \nx:int(0,7), or x:index_of(some_array), and the compiler could then insert the appropriate range checks.  *Some* of these will be checks at runtime, but they can be inserted automatically at compile-time, thereby preventing the possibility of a buffer-overflow attack *at compile time*.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02bjiq", "parent_id": "t1_c02bjgf", "id": "c02bjiq", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02bjgf", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5yznx", "retrieved_on": 1427425274, "id": "c02bjgf", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bjbi", "body": "&gt; Actually, you have pointed out how it is a flaw in the type system, as C's type system does NOT permit the creation of \"a genuine string type which could prevent misuse.\"\n\nThere is no existing typesystem which could prevent buffer overflows at compile time without requiring an inordinate degree of inconvenient programmer overhead to *use*.  Hindley-Milner, for instance, can encode sized arrays in the type system, but to actually use such sizes in a way that prevented buffer overflows at compile time would require multiple arduous and syntactically heavyweight injection/projection function calls (remember, not only must the arrays be sized, but the indexes must as well).  There's reason no one does this: the potential gain is *not worth* the effort.\n\nIf you disagree with that point, perhaps you can offer an alternative way to prevent programmers from programming buffer overflow errors without the high syntactical overhead.", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "name": "t1_c02bjbi", "controversiality": 0, "archived": true, "ups": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425275, "id": "c02bjbi", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bj98", "body": "&gt; There is no type string in C.\n\nNot as far as the compiler is concerned. The programmer, and the standard library, however, are a different story.\n\n&gt;&gt;    a buffer-overflow attack does exploit a flaw in C's type-system\n\n&gt; No, it doesn't. C's type system knows nothing about strings (and very little about sized arrays).\n\nYes it does:  C's type system knows nothing about strings (and very little about sized arrays).\n\n&gt; Your argument at this point amounts to a complaint that programmers have decided that, among the types provided by C's type system, they would use raw character arrays (with an additional semantic constraint not expressed in the type system) as their \"string\" type, rather than using a genuine string type which could prevent misuse. That's not a design flaw in the typesystem.\n\nActually, you have pointed out how it *is* a flaw in the type system, as C's type system does NOT permit the creation of \"a genuine string type which could prevent misuse.\"\n\nThus the possibility of a buffer-overflow attack is a direct consequence of C's (lack of?) type system.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 0, "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425276, "id": "c02bj98", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02bj98", "parent_id": "t1_c02bj2c", "body": "&gt; In the case of C strings, yes, it does. The ONLY difference between a C string and an array of bytes is what you do with it.\n\nYes, because *they're the same type*.\n\n&gt; The type string\n\n**There is no type string in C.**\n\n&gt; a buffer-overflow attack does exploit a flaw in C's type-system\n\nNo, it doesn't.  C's type system knows nothing about strings (and very little about sized arrays).  You talk about a \"string\" like it's something C's type system knows about.  It's not.  C doesn't deal with \"strings.\"  Your argument at this point amounts to a complaint that programmers have decided that, among the types provided by C's type system, they would use raw character arrays (with an additional semantic constraint not expressed in the type system) as their \"string\" type, rather than using a genuine string type which could prevent misuse.  **That's not a design flaw in the typesystem.**", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 0, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425279, "body": "&gt;&gt;&gt; No type system is designed to catch all possible errors in a Turing-complete language.\n\n&gt;&gt; I was talking about a specific class of errors\n\n&gt; You can't in general catch at compile time all possible errors in programs\n\nWhere the hell did I ever say \"all possible errors\"?  For the record, I *have* called out people who claimed that all possible errors *could* in fact be prevented by a robust type system, and I am *not*, and *have not* made such a claim myself.\n\n&gt; No, again, you're wrong. A type is a set of values and the permitted operations over that set of values. It has nothing do with \"assumptions regarding the diligence of the programmer.\"\n\nIn the case of C strings, yes, it does.  The ONLY difference between a C string and an array of bytes is what you do with it. The type *string* **does** refer to a set of values and the permitted operations over that set of values, and a buffer-overflow attack **does** exploit a flaw in C's type-system:  namely, that it relies on the *programmer* to maintain a C string within the set of values and permitted operations that keep it a C string and not just an array of bytes.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02bj2c", "parent_id": "t1_c02bixj", "id": "c02bj2c", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02bixj", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5yznx", "retrieved_on": 1427425280, "id": "c02bixj", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bijw", "body": "&gt; I was talking about a specific class of errors, namely, those that can be prevented by a reasonable type system.\n\n\"Reasonable\" is a matter of engineering trade-offs.  What you consider to be \"reasonable\" hoops to jump through may not be evaluated as \"reasonable\" by others.\n\n&gt; Then it follows that the design flaw is not in the type system itself, but in the program as a whole, when that program is written using a type system that is inadequate for the domain.\n\nYou don't seem to be understanding something.  **All type systems are inadequate for the domain of programms written in Turing-complete languages.**  You **can't** in general catch at compile time all possible errors in programs written in a Turing-complete language.  This isn't a design flaw, this is a **mathematical fact**, and it's unavoidable.\n\n&gt; But my point still stands: something like a buffer-overflow attack is a subversion of type safety, because the implicit concept of type-safety in C includes assumptions regarding the diligence of the programmer (checking array bounds, not assuming that an array of characters will be a null-terminated string, etc.).\n\nNo, again, you're wrong.  A *type* is a set of values and the permitted operations over that set of values.  It has nothing do with \"assumptions regarding the diligence of the programmer.\"  Furthermore, C types for arrays (in the majority of cases) *do not* include the bounds of such an array, and *cannot* include the bounds of such an array, since the bound depends on runtime values.  As such, it cannot be considered a design flaw in the type system that at compile time it cannot be determined whether a given array index is within bounds.\n\nAdditionally, modifying the type system so that arrays had a static size type would involve the definition of a vast number of other range-limited index types, injection functions, and projection functions such that a programmer's job *using* such arrays would be far more complicated.  It cannot be considered an design flaw in the type system that the designers of the C programming language chose to make the engineering trade-off that they would not saddle programmers with such complexity for so little gain.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": -1, "name": "t1_c02bijw", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425285, "score_hidden": false, "body": "&gt; No, the claim couldn't really be made that it's a design flaw in the type system. No type system is designed to catch all possible errors in a Turing-complete language.\n\nI was talking about a specific class of errors, namely, those that *can* be prevented by a reasonable type system.\n\n&gt; It's not a design flaw that a type system permits certain classes of errors any more than it's a design flaw that security systems depend on secret knowledge: it's a limitation imposed by the domain.\n\nThen it follows that the design flaw is not in the type system itself, but in the program as a whole, when that program is written using a type system that is inadequate for the domain.\n\nBut my point still stands: something like a buffer-overflow attack *is* a subversion of type safety, because the implicit concept of type-safety in C includes assumptions regarding the diligence of the programmer (checking array bounds, not assuming that an array of characters will be a null-terminated string, etc.).  Just because a type system isn't fully automated doesn't make it not-a-type-system.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02bi87", "id": "c02bijw", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "name": "t1_c02bi87", "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5yznx", "retrieved_on": 1427425290, "id": "c02bi87", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bi19", "body": "No, the claim couldn't really be made that it's a design flaw in the type system.  No type system is designed to catch *all* possible errors in a Turing-complete language.  No type *can be* designed to catch all such errors.  It's not a design flaw that a type system permits certain classes of errors any more than it's a design flaw that security systems depend on secret knowledge: it's a limitation imposed by the domain.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02bi19", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": -1, "link_id": "t3_5yznx", "retrieved_on": 1427425292, "body": "The claim could still be made that it's a *design* flaw in the typesystem.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02bg6f", "id": "c02bi19", "author_flair_css_class": null}], "subreddit": "programming", "ups": 5, "name": "t1_c02bg6f", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425319, "score_hidden": false, "body": "&gt; It's exploiting flaws in the type system.\n\nYou can't exploit a \"flaw\" when the typesystem **doesn't even claim to prevent such code**.  You may as well complain that your car can't drive across the ocean, or that your toaster can't make you hot cocoa.\n\nType systems can't prevent all possible errors in a turing-complete language.  If you could prevent all possible errors, you'd have solved the halting problem, and we know that to be impossible.  So it's not a flaw in the type system when errors that the type system doesn't claim to prevent can be caused: it's only a flaw when the type system claims to prevent a certain error but hackers can still cause it to happen.", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02bfk7", "id": "c02bg6f", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": -2, "score_hidden": false, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425324, "body": "&gt; Your entire argument there is non sequitur. I repeat: doing things the type system never purported to prevent is not subverting said type system.\n\nIt's exploiting flaws in the type system.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02bfk7", "parent_id": "t1_c02bde5", "id": "c02bfk7", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 4, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425352, "body": "Your entire argument there is *non sequitur*.  I repeat: doing things the type system never purported to prevent **is not** subverting said type system.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02bde5", "parent_id": "t1_c02bd45", "id": "c02bde5", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": -2, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425356, "body": "&gt; Doing things the type system permits doesn't constitute subversion of the type system.\n\nNot necessarily.  The type systems in C and to a lesser extent, C++, require a certain amount of cooperation on the programmer's part (i.e. it's not entirely in the compiler; part of the type-system is in the programmer's mental model of the program).\n\nConsider also that you could implement a type system that you checked yourself and hand-compiled the results into assembly...", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02bd45", "parent_id": "t1_c02bb0j", "id": "c02bd45", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 5, "name": "t1_c02bb0j", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425383, "score_hidden": false, "body": "You can't exploit a feature a typesystem doesn't include, just like you can't subvert a government that doesn't exist.\n\nNow, if the typesystem purported to prevent buffer overflows at compile time (which would require predeclaring the size of all arrays or dependent types) and a hacker managed to cause a buffer overflow at runtime, that would be subversion of the type system.\n\nDoing things the type system permits doesn't constitute subversion of the type system.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02baw3", "id": "c02bb0j", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": -2, "name": "t1_c02baw3", "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425385, "score_hidden": false, "id": "c02baw3", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02b1uk", "body": "&gt; \"type safety\" is a compile time concept--hackers don't subvert type safety at all\n\nWhat about the good ol' fashioned buffer-overflow attack?  That's an exploitation of type systems that don't include array bounds checking...", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 7, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425573, "body": "For languages like C, C++, and D, \"type safety\" is a compile time concept--hackers don't subvert type safety at all (well, maybe your anachronistic \"hackers\" do, but they do it at compile time, while programming, not breaking into systems)", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02b1uk", "parent_id": "t1_c02b1hm", "id": "c02b1uk", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02b1hm", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 2, "link_id": "t3_5yznx", "retrieved_on": 1427425578, "id": "c02b1hm", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02b1c0", "body": "Hey now, crackers find subverting type safety _quite_ useful! :)", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 2, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425580, "body": "Hence \"useful things.\"", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02b1c0", "parent_id": "t1_c02b16s", "id": "c02b1c0", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 6, "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425581, "id": "c02b16s", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02b16s", "parent_id": "t1_c02b06i", "body": "If those things include errors, then it is good.", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02b39x", "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425554, "score": 3, "score_hidden": false, "body": "True, the article could have been better written. D can, however, do many things C/C++/Java/C# can not do. See http://www.digitalmars.com/d/1.0/comparison.html .", "author": "[deleted]", "created_utc": "1193252496", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 3, "parent_id": "t1_c02b06i", "id": "c02b39x", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193270724", "ups": 7, "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425527, "score": 7, "body": "True functional languages have been doing this forever.", "author": "[deleted]", "author_flair_text": null, "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02b5ct", "parent_id": "t1_c02b06i", "score_hidden": false, "id": "c02b5ct"}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c02bfdn", "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425327, "score": 3, "body": "I guessing since assembly was replaced with FORTRAN.", "author": "grauenwolf", "created_utc": "1193381073", "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "ups": 3, "parent_id": "t1_c02b06i", "score_hidden": false, "id": "c02bfdn"}], "subreddit_id": "t5_2fwo", "ups": 4, "score_hidden": false, "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425595, "id": "c02b06i", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02b06i", "parent_id": "t3_5yznx", "body": "I'm curious when it became reasonable to laud a language for what useful things a programmer *can't* do with it.", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 10, "author": "bart2019", "created_utc": "1193224263", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 22, "author": "eegreg", "created_utc": "1193228294", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193259836", "ups": 6, "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425542, "score": 6, "score_hidden": false, "id": "c02b49a", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02b49a", "parent_id": "t1_c02b0g5", "body": "They should put a paragraph directly underneath that notice saying: \"In plain english: \" and then follow it with what you said.\n", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 22, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425591, "body": "That means if you e-mail them with source code or other information it is assumed you are sharing it.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02b0g5", "parent_id": "t1_c02b08z", "id": "c02b0g5", "author_flair_css_class": null}], "subreddit": "programming", "ups": 10, "name": "t1_c02b08z", "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425594, "score_hidden": false, "id": "c02b08z", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t3_5yznx", "body": "   I had a quick glance at the [home page of the language](http://www.digitalmars.com/d/), to see where I could get a compiler. I am seriously baffled by this notice at the bottom of that page:\n&gt;Note: all D users agree that by downloading and using D, or reading the D specs, they will explicitly identify any claims to intellectual property rights with a copyright or patent notice in any posted or emailed feedback sent to Digital Mars.\n\nWTF does that mean? Can anybody translate that into understandable English?  \n\nI *think* it means that if you find they step on your IP rights, you have to tell them by email. ", "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427425594, "subreddit_id": "t5_2fwo", "created_utc": "1193224502", "name": "t1_c02b09d", "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": -1, "score_hidden": false, "body": "Interesting. I might try it.", "author": "noamsml", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": -1, "parent_id": "t3_5yznx", "id": "c02b09d", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -1, "author": "Tommstein", "created_utc": "1193226687", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 8, "author": "eegreg", "created_utc": "1193228184", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -4, "author": "Tommstein", "created_utc": "1193228515", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 11, "author": "eegreg", "created_utc": "1193232576", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -12, "author": "Tommstein", "created_utc": "1193232820", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 9, "author": "kungtotte", "created_utc": "1193233386", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -9, "author": "Tommstein", "created_utc": "1193233995", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 17, "author": "eegreg", "created_utc": "1193235464", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -1, "author": "Tommstein", "created_utc": "1193236384", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 4, "author": "dmpk2k", "created_utc": "1193238815", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -1, "author": "Tommstein", "created_utc": "1193240501", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 6, "author": "krelian", "created_utc": "1193242825", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "Tommstein", "created_utc": "1193244073", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "dmpk2k", "created_utc": "1193244922", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "Tommstein", "created_utc": "1193245209", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "dmpk2k", "created_utc": "1193245936", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -1, "author": "Tommstein", "created_utc": "1193246280", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "dmpk2k", "created_utc": "1193246442", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -2, "author": "Tommstein", "created_utc": "1193246601", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1193246857", "name": "t1_c02b2fx", "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425565, "score": 1, "score_hidden": false, "body": "Help, help, I'm being oppressed!", "author": "dmpk2k", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c02b2eu", "id": "c02b2fx", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": -2, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425566, "body": "Better yet, why don't you either get the hell out of my thread or shut the hell up? Do you have no one else that will talk to your dumb ass?", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02b2eu", "parent_id": "t1_c02b2e3", "id": "c02b2eu", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 0, "name": "t1_c02b2e3", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425566, "score_hidden": false, "body": "Oh great. A \"no u\" moment.\n\nGo troll elsewhere.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02b2dg", "id": "c02b2e3", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02b2dg", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": -1, "link_id": "t3_5yznx", "retrieved_on": 1427425566, "body": "Excellent counterpoint. The irony of you talking about someone else's reading comprehension doesn't escape me....", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02b2br", "id": "c02b2dg", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 1, "name": "t1_c02b2br", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425567, "score_hidden": false, "body": "Your reading comprehension is broken. Go troll elsewhere.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02b28h", "id": "c02b2br", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 0, "name": "t1_c02b28h", "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425568, "score_hidden": false, "id": "c02b28h", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02b27b", "body": "I feel privileged to be talking to the guy that started the one-man Free Hardware Foundation (FHF).", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 2, "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425568, "id": "c02b27b", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02b27b", "parent_id": "t1_c02b23z", "body": "Better stop using that computer. The _hardware is closed_! zOMG!", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425566, "subreddit_id": "t5_2fwo", "created_utc": "1193246135", "name": "t1_c02b2ct", "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 2, "score_hidden": false, "body": "It's not your ideas, it's your attitude.\n\n&gt;I'm not interested in how he makes a living, I'm interested in the code.\n\nWell, you should be. This is perhaps the most important thing which determines if some piece of code is going to be opened or not when it concerns projects developed by one man. ", "author": "krelian", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 2, "parent_id": "t1_c02b23z", "id": "c02b2ct", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 1, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425569, "body": "So the problem with free software junkies is that they insist on free software? All righty then, moving along....\n\nI'm not interested in how he makes a living, I'm interested in the code. He doesn't have to open it, and people don't have to use it.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02b23z", "parent_id": "t1_c02b1yw", "id": "c02b23z", "author_flair_css_class": null}], "subreddit": "programming", "ups": 6, "name": "t1_c02b1yw", "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425571, "score_hidden": false, "id": "c02b1yw", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02b1pa", "body": "You my friend, are the reason why many free software junkies are considered arrogant mofo's.\n\nBesides, the guy's job is writing and selling compilers. Will you be the one putting food on his table if he opens the code? I don't think so. \n\n", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 7, "author": "FeepingCreature", "created_utc": "1193243466", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 0, "author": "Tommstein", "created_utc": "1193244221", "children": [{"controversiality": 0, "retrieved_on": 1427425568, "subreddit_id": "t5_2fwo", "created_utc": "1193244971", "ups": 4, "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 4, "body": "&gt; I also don't think you have a strong grasp of what \"secondhand stepchild\" means.\n\nNeither do you apparently.", "author": "dmpk2k", "archived": true, "distinguished": null, "edited": false, "id": "c02b27k", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02b27k", "parent_id": "t1_c02b24e", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 0, "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425569, "id": "c02b24e", "author_flair_text": null, "distinguished": null, "edited": true, "name": "t1_c02b24e", "parent_id": "t1_c02b21o", "body": " I don't want any deficiencies relative to the official version. I shouldn't have to put up with that, and I won't.\n\nI also don't think you have a strong grasp of what \"secondhand stepchild\" means.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02b21o", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 7, "link_id": "t3_5yznx", "retrieved_on": 1427425570, "id": "c02b21o", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02b1pa", "body": "http://dgcc.sourceforge.net/gdc/manual.html\n\nThe manual contains a list of differences. Basically, it's very minor stuff.\n\nActually, GDC's code quality is higher than DMD's in some benchmarks. So much for \"secondhand stepchild\".\n\n --feep", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "kungtotte", "created_utc": "1193246149", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193246471", "name": "t1_c02b2ea", "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425566, "score": 0, "score_hidden": false, "body": "Tell me, what is the relevance of that question? The C committee doesn't put out its own official compiler.", "author": "Tommstein", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 0, "parent_id": "t1_c02b2cu", "id": "c02b2ea", "author_flair_css_class": null}], "subreddit": "programming", "ups": 1, "name": "t1_c02b2cu", "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425566, "score_hidden": false, "id": "c02b2cu", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02b1pa", "body": "Tell me, how many C compilers are actually fully conformant with C99?", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": -1, "name": "t1_c02b1pa", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425575, "score_hidden": false, "body": "The problem is on the first line of GDC's front page: \"It supports a number of targets and *nearly* all features of Digital Mars D.\" I'm not going to use a secondhand stepchild compiler that doesn't implement the full language.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02b1hy", "id": "c02b1pa", "author_flair_css_class": null}], "subreddit": "programming", "ups": 4, "name": "t1_c02b1hy", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425577, "score_hidden": false, "body": "So what's the problem with using GDC then? The front-end is identical. The back-end isn't, but as long as it produced good binaries, I don't see the problem?", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02b17x", "id": "c02b1hy", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02b17x", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": -1, "link_id": "t3_5yznx", "retrieved_on": 1427425581, "body": "I missed nothing. The ISO C committee doesn't put out a closed official implementation. The people that make D do. It doesn't matter whether the D people also document the language; where their compiler and their documentation differ, no one is going to give a shit what their documentation says, and I'm not going to write my own god damn D compiler as you so helpfully suggest.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02b145", "id": "c02b17x", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 17, "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425582, "id": "c02b145", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02b145", "parent_id": "t1_c02b0y2", "body": "You missed the point.  The C language is a specification.  So is the D language.  There are non-open implementations of the C language, just as there is a non-open implementation of the D language.  Moreover,  for a language with an available specification it is impossible to have an official implementation, just some implementations that conform better to the language specification.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": -9, "score_hidden": false, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425585, "body": "Do illuminate us on this non-open official implementation of C or C++.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02b0y2", "parent_id": "t1_c02b0uu", "id": "c02b0y2", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 9, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425586, "body": "So you don't use C or C++ either?", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02b0uu", "parent_id": "t1_c02b0sd", "id": "c02b0uu", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02b0sd", "score_hidden": false, "controversiality": 0, "archived": true, "ups": -12, "link_id": "t3_5yznx", "retrieved_on": 1427425587, "id": "c02b0sd", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02b0rk", "body": "&gt;There is no official implementation.\n\nApparently you're talking about some other language then.\n\n&gt;The D language is well specified.\n\nThat's nice.\n\n&gt;Use gdc or write your own compiler.\n\nNo.", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02b0rk", "ups": 11, "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425587, "score_hidden": false, "id": "c02b0rk", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02b0gp", "body": " There is no official implementation.  The D language is well specified.  Use gdc or write your own compiler. ", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02b0gp", "ups": -4, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425591, "score_hidden": false, "body": "Backend of the only official implementation.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02b0fx", "id": "c02b0gp", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 8, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425591, "body": "you can compile with gdc (gcc).  The libraries are all open source.  What source code are you looking for?", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02b0fx", "parent_id": "t1_c02b0d6", "id": "c02b0fx", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": -2, "author": "newton_dave", "created_utc": "1193228188", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -8, "author": "Tommstein", "created_utc": "1193228587", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 4, "author": "newton_dave", "created_utc": "1193228933", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -5, "author": "Tommstein", "created_utc": "1193229165", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1193229265", "name": "t1_c02b0ik", "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425591, "score": -1, "score_hidden": false, "id": "c02b0ik", "author": "newton_dave", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": -1, "parent_id": "t1_c02b0i8", "body": "That's like six days, harsh!", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02b0i8", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": -5, "link_id": "t3_5yznx", "retrieved_on": 1427425591, "body": "Yes, that one went right over my sleep-deprived head. Chalk it up to a paper I have been writing almost nonstop since like Sunday or Monday.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02b0hs", "id": "c02b0i8", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 4, "name": "t1_c02b0hs", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425591, "score_hidden": false, "body": "See, that was the joke.\n\nNow I'll be depressed for the rest of the day.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02b0gx", "id": "c02b0hs", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02b0gx", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": -8, "link_id": "t3_5yznx", "retrieved_on": 1427425591, "body": "That's only significant if you're a bigger retard than Bush.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02b0fz", "id": "c02b0gx", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": -2, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425591, "body": "Dude, \\*I\\* got in to Mensa (or rather I was gotten in to it as a surprise).\n\nBuy your D books now.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02b0fz", "parent_id": "t1_c02b0d6", "id": "c02b0fz", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "CyberShadow", "created_utc": "1193238575", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -4, "author": "Tommstein", "created_utc": "1193240761", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "millerlogic", "created_utc": "1193276958", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "Tommstein", "created_utc": "1193278787", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "millerlogic", "created_utc": "1193279696", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "author_flair_text": null, "name": "t1_c02b6is", "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425441, "score": 0, "score_hidden": false, "id": "c02b6is", "author": "Tommstein", "created_utc": "1193283505", "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "ups": 0, "parent_id": "t1_c02b672", "body": "You are correct, it was confusing trying to find out what the current version was. I see where GDC says it is currently at D version 1.020, but I don't know enough about D to know for myself whether the missing features are from 1.020 or 2.x. GDC documenting this would be nice, but documentation doesn't seem to be their strong suit.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02b672", "ups": 2, "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425517, "score_hidden": false, "id": "c02b672", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02b63y", "body": "That would be the experimental branch. Get the stable release branch at 1.x, which GDC supports. The 2.x stuff is a moving target. The official site may not be too informing in this regard, but it is known among D users, who have also been asking for this aspect of the site to be improved.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02b63y", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425518, "body": "The latest version of D seems to be 2.006, not 1.0. I also don't know how a feature can be \"not technically D\" if it's in the official compiler.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02b5xx", "id": "c02b63y", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02b5xx", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5yznx", "retrieved_on": 1427425520, "id": "c02b5xx", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02b1q9", "body": "GDC supports all of D 1.0 and more. GDC is completely open. What more do you want? The features it lacks aren't even technically D, they're experimental features for consideration. GDC is a *great* compiler, if GCC (and D) is your type of thing.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": -4, "name": "t1_c02b1q9", "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425574, "score_hidden": false, "id": "c02b1q9", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02b1h8", "body": "I don't care why the backend can't be opened, I care that it's not open. Where there's a will there's a way. I also don't care whether the frontend is available for inspection or printing as toilet paper: the backend is still closed. The problem with GDC is stated on the first line of their front page: \"It supports a number of targets and *nearly* all features of Digital Mars D.\" I'm not going to use a secondhand stepchild compiler that doesn't implement the full language.\n\nJava had one of the biggest corporations in the computer world hyping the hell out of it for years, not to mention \"innovative\" abilities. D does not.", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 4, "author": "[deleted]", "created_utc": "1193261309", "children": [{"controversiality": 0, "retrieved_on": 1427425527, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02b5f3", "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": -1, "score_hidden": false, "id": "c02b5f3", "author": "Tommstein", "created_utc": "1193271473", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": -1, "parent_id": "t1_c02b4ff", "body": "Ding ding ding, we have a winner.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 4, "name": "t1_c02b4ff", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425539, "score_hidden": false, "body": "It sounds to me like somebody at DM is hoping for the free software community to adopt D, write their own missing parts, and then license the \"real\" backend when they want \"the real thing\" for commercial software.\n\nI don't blame DM. They've worked hard, and want to be compensated. Maybe D is great, but unless it's free software, most folks just aren't really interested.\n\nIt would be great to see a hairy, optimized, free (as in libre) D compiler become a standard part of every GNU/Linux distro. Maybe DM will come around one day. Until then, though, there are many free alternatives.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02b1h8", "id": "c02b4ff", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 3, "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425578, "id": "c02b1h8", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02b1h8", "parent_id": "t1_c02b0d6", "body": "The Digital Mars implementation's back-end cannot be open-sourced because it's licensed. And you don't need the back-end source anyway. If the specs are unclear on something, the front-end source is more than enough to see how does the compiler understand your D code. If you want to experiment, add your features, etc. - use GDC, which is fully open-source. \r\n\r\nJava being closed-source for so many years sure didn't stop it from becoming so widely used. ", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 7, "author": "[deleted]", "created_utc": "1193252263", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193270975", "name": "t1_c02b5dm", "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425527, "score": 1, "score_hidden": false, "body": "Read the rest of the thread.", "author": "Tommstein", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c02b38d", "id": "c02b5dm", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 7, "name": "t1_c02b38d", "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425555, "score_hidden": false, "id": "c02b38d", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02b0d6", "body": "The compiler front end is open source. The GCC backend is open source. When you combine the two, you have a D compiler that is completely open source. See GDC http://dgcc.sourceforge.net/ , the GNU D compiler.", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02b0d6", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": -1, "link_id": "t3_5yznx", "retrieved_on": 1427425592, "body": "I will not look any further at D until all its source code is completely open. A language whose main implementation is neither open nor what Microsoft is shoving down people's throats this week has about as much chance of becoming widely used as George W. Bush has of getting into Mensa.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5yznx", "id": "c02b0d6", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -12, "author": "turkourjurbs", "created_utc": "1193230616", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 5, "author": "newton_dave", "created_utc": "1193236405", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 5, "author": "OMouse", "created_utc": "1193245367", "children": [{"controversiality": 0, "retrieved_on": 1427425567, "subreddit_id": "t5_2fwo", "archived": true, "ups": 4, "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 4, "body": "I had that in there before I submitted the comment, but it doesn't actually suck, so it wouldn't have been as funny :/", "author": "newton_dave", "created_utc": "1193245723", "distinguished": null, "edited": false, "id": "c02b2ao", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02b2ao", "parent_id": "t1_c02b293", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02b293", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 5, "link_id": "t3_5yznx", "retrieved_on": 1427425568, "id": "c02b293", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02b17y", "body": "Or Lisp?", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "name": "t1_c02b17y", "controversiality": 0, "archived": true, "ups": 5, "link_id": "t3_5yznx", "retrieved_on": 1427425581, "id": "c02b17y", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02b0lv", "body": "Yeah, we shoulda stuck with COBOL and Fortran.", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425386, "subreddit_id": "t5_2fwo", "created_utc": "1193335339", "ups": 1, "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 1, "id": "c02bat3", "author": "foonly", "archived": true, "distinguished": null, "edited": false, "body": "&gt; The last thing wee need is yet ANOTHER programming language that's just a tiny bit better than what we've got.\n-------------------------------\n&gt;Now Microshaft is developing something called F#. Christ, gimme a break.\n\nCan you split your comment so I can upvote the first half and downvote the second?", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02bat3", "parent_id": "t1_c02b0lv", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": -12, "name": "t1_c02b0lv", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425589, "score_hidden": false, "body": "The last thing wee need is yet ANOTHER programming language that's just a tiny bit better than what we've got.  Now Microshaft is developing something called F#.  Christ, gimme a break.\r\n", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5yznx", "id": "c02b0lv", "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427425586, "subreddit_id": "t5_2fwo", "created_utc": "1193233458", "ups": 3, "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 3, "id": "c02b0v8", "author": "renegade", "archived": true, "distinguished": null, "edited": false, "body": "I don't see any advantages here you don't get with C#, and C# has the considerable advantage of having a huge and powerful classlib behind it, even on linux.", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02b0v8", "parent_id": "t3_5yznx", "score_hidden": false, "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427425585, "subreddit_id": "t5_2fwo", "created_utc": "1193233987", "ups": 2, "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 2, "id": "c02b0y1", "author": "sblinn", "archived": true, "distinguished": null, "edited": false, "body": "The C-like language that I have \"liked\" the most is Limbo:\n\nhttp://programming.reddit.com/info/1rsnf/comments?\n\nIt has its own issues and areas where refinement would be nice. \"One of these days I'm going to write a program in D, though...\"", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02b0y1", "parent_id": "t3_5yznx", "score_hidden": false, "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 9, "author": "biv", "created_utc": "1193235732", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 4, "author": "gwern", "created_utc": "1193238730", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c02b29c", "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425568, "score": 6, "score_hidden": false, "body": "Well, ya gotta appeal to C programmers *somehow* ;o)", "author": "wainstead", "created_utc": "1193245426", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 6, "parent_id": "t1_c02b1ht", "id": "c02b29c", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02b6ag", "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425515, "score": 6, "score_hidden": false, "body": "&gt; ...what?\r\n\r\n\"By which I mean, Walter Bright (the author of D) is willing to say 'no' to features -- which can lead to cleaner and prettier code.\"\r\n\r\nHowever you rephrase this, it is the case that *wtf every language designer everywhere says 'no' to features*.  Discrimination is how a language arises at all.", "author": "ayrnieu", "created_utc": "1193280782", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 6, "parent_id": "t1_c02b1ht", "id": "c02b6ag", "author_flair_css_class": null}], "subreddit": "programming", "ups": 4, "name": "t1_c02b1ht", "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425577, "score_hidden": false, "id": "c02b1ht", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02b15b", "body": "Or \"That is, the author of D, Walter Bright, is willing to say no to features that leads to cleaner and prettier code.\"\n\n...what?", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425572, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02b1vx", "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 37, "score_hidden": false, "id": "c02b1vx", "author": "krelian", "created_utc": "1193242300", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 37, "parent_id": "t1_c02b15b", "body": "Yeah, I read his article and thought it was interesting, informative and an overall fun read. But now after you've shown that pathetic excuse for a sentence, I realized that his article was pure crap.\n\nThanks!  ", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 0, "author": "chip33550336", "created_utc": "1193245928", "children": [{"controversiality": 0, "retrieved_on": 1427425416, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02b8jk", "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 1, "score_hidden": false, "body": "Do you also have issues going shopping because you need to check that the oven is off several times?", "author": "[deleted]", "created_utc": "1193318920", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c02b2bp", "id": "c02b8jk", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 0, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425567, "body": "I had trouble getting past that first sentence as well.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02b2bp", "parent_id": "t1_c02b15b", "id": "c02b2bp", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 7, "author": "bosco", "created_utc": "1193249197", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "author_flair_text": null, "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425153, "score": 1, "created_utc": "1193584406", "score_hidden": false, "id": "c02bsqi", "author": "biv", "archived": true, "distinguished": null, "edited": false, "body": "No need to apologize. I believe that if you have something important to say, then it's worth saying it clearly. It's not about \"wait[ing] for perfection,\" but instead about respecting your own thoughts and your audience enough to take a few extra minutes to make sure that you've not left a couple of clinkers in there that make no sense. \nTake care.", "subreddit": "programming", "ups": 1, "parent_id": "t1_c02b2sa", "name": "t1_c02bsqi", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02b2sa", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 7, "link_id": "t3_5yznx", "retrieved_on": 1427425561, "body": "sorry biv. i had put the post up, hoping to edit it later. there were plenty of typos, some I've fixed now. you know, with writing, i've found it's better to push forward with momentum than wait for perfection.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02b15b", "id": "c02b2sa", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02b35z", "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425556, "score": 10, "score_hidden": false, "body": "I found some of his wording to be poor, however there is some chance that english is not his first language.  There is certainly nothing wrong with his brain though.", "author": "flaxeater", "created_utc": "1193251859", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 10, "parent_id": "t1_c02b15b", "id": "c02b35z", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "Gotebe", "created_utc": "1193285423", "children": [{"controversiality": 0, "retrieved_on": 1427425386, "subreddit_id": "t5_2fwo", "author_flair_text": null, "name": "t1_c02base", "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 1, "score_hidden": false, "id": "c02base", "author": "foonly", "created_utc": "1193335218", "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "ups": 1, "parent_id": "t1_c02b6nn", "body": "&gt; It's quite varied, and I find that people who do \"everything\" are often shallow.\n\nThat Da Vinci may have been a renaissance man, but his code sucks! ;-)", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 0, "name": "t1_c02b6nn", "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425440, "score_hidden": false, "id": "c02b6nn", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02b15b", "body": "Second that. My point of contention was also all the stuff author lists as \"things he does\". It's quite varied, and I find that people who do \"everything\" are often shallow. So is the article.\n\nSorry for ad hominem. I swear I did it only because it supports my belief ;-)\n\n(edit: typo)", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 9, "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425582, "id": "c02b15b", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02b15b", "parent_id": "t3_5yznx", "body": "\"I\u2019ve finally a worth replacement for C++, which I\u2019ve used a lot in the last 10 years.\"\n\nLet's reward better-written articles, folks.", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "norkakn", "created_utc": "1193236193", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "CyberShadow", "created_utc": "1193237617", "children": [{"controversiality": 0, "retrieved_on": 1427425545, "subreddit_id": "t5_2fwo", "created_utc": "1193257991", "name": "t1_c02b40b", "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 1, "score_hidden": false, "id": "c02b40b", "author": "norkakn", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c02b1dz", "body": "Does demangling actually work?  Inside objects?\n\n(It didn't the last time I programmed D)", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02b1dz", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 3, "link_id": "t3_5yznx", "retrieved_on": 1427425579, "body": "DDBG for Windows, GDC (with optional demangling patches) for Linux. Some other debuggers like Zero-Bugs support D as well.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02b16x", "id": "c02b1dz", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02b16x", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 3, "link_id": "t3_5yznx", "retrieved_on": 1427425581, "body": "Got a working debugger yet?", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5yznx", "id": "c02b16x", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "Gotebe", "created_utc": "1193237394", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02b22p", "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425570, "score": 4, "score_hidden": false, "id": "c02b22p", "author": "fmota", "created_utc": "1193243726", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 4, "parent_id": "t1_c02b1cx", "body": "...did you use a mechanical translator, or did I forget to wear glasses today, or did you forget your fluency cap? I am honestly baffled.", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": -2, "author": "dmpk2k", "created_utc": "1193246263", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193250008", "ups": 2, "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425559, "score": 2, "body": "&gt;&gt; Second, liberal virtual is (rightfully) \n&gt;&gt; considered bad (e.g. Java vs. C#).\n\n&gt; Elaborate?\n\nAnders Hejlsberg argues it here:\nhttp://www.artima.com/intv/nonvirtual.html ", "author": "pl0nk", "archived": true, "distinguished": null, "edited": true, "id": "c02b2wr", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02b2wr", "parent_id": "t1_c02b2db", "score_hidden": false, "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "sjf", "created_utc": "1193253551", "children": [{"controversiality": 0, "retrieved_on": 1427425550, "subreddit_id": "t5_2fwo", "created_utc": "1193254972", "ups": 2, "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 2, "body": "How do you tell the difference of atoms in Lisp or words in Forth that came from a library?\n\nYou can't.\n\nIn C and derivatives the dividing line between language and library is very wide...", "author": "dmpk2k", "archived": true, "distinguished": null, "edited": false, "id": "c02b3lu", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02b3lu", "parent_id": "t1_c02b3ej", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02b3ej", "ups": 1, "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425553, "score_hidden": false, "id": "c02b3ej", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02b2db", "body": "2nd class citizens?\nWhat do you mean?\n\nThe STL or Boost have no disadvantages in usability because they are a library and builtins. Indeed, because they aren't I'm free to use different libraries to suit my needs.", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425440, "subreddit_id": "t5_2fwo", "created_utc": "1193284634", "ups": 1, "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 1, "id": "c02b6m0", "author": "Gotebe", "archived": true, "distinguished": null, "edited": false, "body": "Elaboration (sorry if being obvious): in Java, you specify nothing, you get virtual. Not so in C# or C++.\n\nWhy is virtual bad: experience shows that it's better to prefer composition over inheritance. If it was other way around, virtual would be more important. Also, when designing frameworks, virtual functions are points of extension, and it's often better to enforce correct behavior than let people shoot themselves in a foot. (IMO) experience shows that interfaces are more important than implementation inheritance, and only for interfaces should \"virtual\" be default. There may be other reasons.", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02b6m0", "parent_id": "t1_c02b2db", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": -2, "name": "t1_c02b2db", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425566, "score_hidden": false, "body": "&gt; Second, liberal virtual is (rightfully) considered bad (e.g. Java vs. C#).\n\nElaborate?\n\n&gt; Doing it in a library promotes \"choice by default\".\n\nChoice is not always a good thing, nor is C++ Lisp or Forth, so libraries are second-grade citizens.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02b1cx", "id": "c02b2db", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02b1cx", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5yznx", "retrieved_on": 1427425579, "id": "c02b1cx", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5yznx", "body": "As one of the comments on the original posting say: D is a compromise. No need to get that enthusiastic ;-)\n\nOn the \"no operator-&gt;\": a language without pointers, has that over a language with them, not only D over C++, fine. But, the real importance of that isn't big.\n\nOn \"all virtual\": first, not true. Second, liberal virtual is (rightfully) considered bad (e.g. Java vs. C#). And for the most part, it's not a performance issue.\n\nOn resizable arrays: neat, but... Is that all? Why not add other primitive containers to the language? Ahh, I see, because that actually better goes into a supporting library, and adding e.g. multi set does not mean changing a language. In other words, C++'s approach is scalable, D's isn't.\n\n\"auto\" is fine.\n\nStrings part is about the same as dynamic array: you make the language bigger to gain some convenience. Doing it in a library promotes \"choice by default\".\n\nOn \"object::method\": if you don't want to, you don't have to in C++ either, but doing it keeps class interface short (you *need* an editor with code folding to alleviate that). Also, you can split your C++ class in multiple files, too.", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "stcredzero", "created_utc": "1193238645", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 4, "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425570, "score": 4, "id": "c02b221", "author": "fmota", "created_utc": "1193243524", "distinguished": null, "edited": false, "body": "...and polymorphism is achieved through the same mechanism as inheritance, in C++. So why wouldn't it do so in D too?\n\n[PS: That's a rhetorical question.]", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02b221", "parent_id": "t1_c02b1hj", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 3, "name": "t1_c02b1hj", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425578, "score_hidden": false, "body": "\"...objects are objects after all because of inheritance...\" \n\nUh, no.  If you go by the GoF guys, the most important property of Objects is polymorphism.  There are some object systems that do without inheritance.  Almost all of them let you violate encapsulation in a variety of ways.  But you just can't do real OO without polymorphism.  Most all design patterns don't work at all without it.  Author is less than well informed about objects.  ", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5yznx", "id": "c02b1hj", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "taylon5", "created_utc": "1193244565", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 7, "author": "freeradical97", "created_utc": "1193269001", "children": [{"controversiality": 0, "retrieved_on": 1427425156, "subreddit_id": "t5_2fwo", "created_utc": "1193579399", "ups": 1, "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 1, "body": "I wished I worked for you.", "author": "[deleted]", "author_flair_text": null, "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit": "programming", "name": "t1_c02bsil", "parent_id": "t1_c02b566", "score_hidden": false, "id": "c02bsil"}], "subreddit_id": "t5_2fwo", "ups": 7, "name": "t1_c02b566", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425530, "score_hidden": false, "id": "c02b566", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02b25p", "body": "First of all, you sound like a goddamn headhunter.\n\nAnyway...\n\nYes, I suppose if you're only going to learn one programming language *EVER* in your entire life, then yes, D is probably a bad choice.\n\nI do C++ for a living, and make pretty fucking good money doing it. It is *undoubtedly* broken, in some very bad ways. And its future is almost certainly dead (at least one would hope so, for the sake of us all).\n\nI don't know much about D (yet), but the more I hear about it, the more I like. The only reason to use C++, of course, is that it's easier to find programmers who already know it. I hire C++ programmers all the time, and the most junior member of my team is making over $100k/yr. If I see a resume that has only C++/Java/whatever on it, and no fun languages -- the ones you might call useless -- it's almost certainly going out the window without so much as a phone screen. The advice you are giving, in your post above, sucks big time.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 0, "name": "t1_c02b25p", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425569, "score_hidden": false, "body": "If you want to use a language to improve productivity then a higher-level language like C#, Java, or Python is the way to go. If you want a C-style language, learn C or C++, not D.\n\nI'll admit I haven't used D, but from what I've read I **do** believe that it is cleaner and simpler than C++. I'm trying to be practical here though. Like drawkbox mentioned, tons and tons of existing code bases are based on C and C++. If you are going to get a job that requires a C-style language, most likely the employer will expect you be fluent in C++ or C, not D.\n\nGo to Monster.com or CareerBuilder.com and search for employers looking for D programmers. You'll get a bunch of results, but none of them are actually looking for D programmers (none that I could find at least). Do a search for C or C++ and you'll find many valid opportunities.\n\nAgreeing with drawkbox again, by the time D is given the amount of time needed to replace C++, most programmers will be beyond coding in these types of languages. The C/C++/D languages will seen as assembler is today. I mention this to encourage new programmers to devote their energy to learning one of the higher level languages I mentioned before, rather than D.\n\nI don't mean to be anti-D with my comments and I'm really focusing on D as applied to an up-and-coming programmer's career. I think the author of this article made a great choice using D over C++ and many other people would benefit from using D over C++. I'm posting because it bothers me that numerous people here said C++ is \"dead and broken.\" If you think C++ is dead and broken you may suffer, career-wise, because of it.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5yznx", "id": "c02b25p", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193247770", "ups": -1, "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425563, "score": -1, "body": "Snore.", "author": "deuteros", "author_flair_text": null, "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02b2la", "parent_id": "t3_5yznx", "score_hidden": false, "id": "c02b2la"}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 30, "author": "duus", "created_utc": "1193248235", "children": [{"controversiality": 0, "retrieved_on": 1427425550, "subreddit_id": "t5_2fwo", "created_utc": "1193255184", "name": "t1_c02b3mw", "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 11, "score_hidden": false, "body": "Or how about \"Why D cuts off the head off C++, stews it to gravy, fucks the eye sockets while sucking on the gravy, does an Aristocrats on the entire family of Algol based languages, while muttering to the voices in its head, whilst flailing its 14 genetically mutant ears in defiance of Kali, and ultimately explodes in a thermo-nuclear explosion?\"  ~ the author of the post.\n\n", "author": "bosco", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 11, "parent_id": "t1_c02b2o5", "id": "c02b3mw", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193327467", "ups": 8, "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425401, "score": 8, "score_hidden": false, "id": "c02b9on", "author": "[deleted]", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02b9on", "parent_id": "t1_c02b2o5", "body": "I think you're thinking of AristocratC.\n", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 30, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425562, "body": "I have an alternative suggestion for the headline: \"Why D cuts the head off C++, throws it on the ground, plucks out its eyeballs, fucks the eye sockets, and does the same to its entire family, while laughing manically and wailing.\"  I think the original was insufficiently ridiculous.  Thank you.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02b2o5", "parent_id": "t3_5yznx", "id": "c02b2o5", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193250362", "name": "t1_c02b2yf", "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425559, "score": -4, "score_hidden": false, "body": "D = compiled Java", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": -4, "parent_id": "t3_5yznx", "id": "c02b2yf", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 20, "author": "[deleted]", "created_utc": "1193251101", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 8, "author": "charlesesl", "created_utc": "1193274829", "children": [{"controversiality": 0, "retrieved_on": 1427425440, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02b6mv", "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 1, "score_hidden": false, "id": "c02b6mv", "author": "Gotebe", "created_utc": "1193285009", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c02b5q2", "body": "Did you actually want to say \"that looks like Object Pascal\"? Because if you did, I for one find it mighty funny!", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 8, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yznx", "retrieved_on": 1427425523, "body": "Error, expecting semicolon \";\" at end of line 7.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02b5q2", "parent_id": "t1_c02b31z", "id": "c02b5q2", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193320910", "ups": 3, "gilded": 0, "link_id": "t3_5yznx", "retrieved_on": 1427425412, "score": 3, "score_hidden": false, "body": "&gt; It is the only language where the user has the power to suggest changes and possibly see them in the compiler within a month.\r\n\r\nYou've mentioned some _very_ strong points, but the one above I think is a killer.\r\n\r\nC++ is in a quagmire.  You can't throw new stuff into the soup for two big reasons -- the language is already quite contrived so adding anything in a _beautiful_ way is hard.  Also, one has to let compiler vendors keep up with additions, so new stuff is deliberately held back.\r\n\r\nMost of all I'd like to see a much bigger standard library in C++.  You always have Boost, but I commonly get a feeling of using over-engineered stuff with that.\r\n\r\nAs for D, the future looks brighter every month it seems.  I just hope it will catch on and gain even more support other than from Digital Mars and GCC.\r\n   ", "author": "csl", "archived": true, "distinguished": null, "edited": true, "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02b8sr", "parent_id": "t1_c02b31z", "id": "c02b8sr", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02b31z", "ups": 20, "controversiality": 0, "archived": true, "link_id": "t3_5yznx", "retrieved_on": 1427425557, "score_hidden": false, "id": "c02b31z", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t3_5yznx", "body": " I like D because I am a technology perfectist, and no other /language/ comes close. Sure, C# may have a more powerful stdlib, but for systems programming tasks, you tend to roll your own when you need it anyway. \n\nMy favorite D features:\n\n1. Compiles to machine code\n\n2. Links directly to C code\n\n3. Modules: Guarantee project will have 1/2 as many files as the C++ equivalent, also replaces namespace. \n\n4. Built in dynamic arrays: You can't appreciate how great these are until you use them yourself in a project.\n\n5. Compile Speed: Fast compile speed leads to a fast turn around time for testing source code changes. 100 files in D compile in roughly a second. Yes it is that fast. \n\n6. It is the only language where the user has the power to suggest changes and possibly see them in the compiler within a month. \n\n7. The code is a lot more beautiful. After using D, C++ makes &amp;*my::eyes-&gt;sore(). \n\n\n  ", "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427425549, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02b3nw", "gilded": 0, "link_id": "t3_5yznx", "downs": 0, "score": 17, "score_hidden": false, "body": "I can't believe no one has mentioned this:\n\nIn D you can optionally do **lazy** evaluation.", "author": "xyphus", "created_utc": "1193255344", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 17, "parent_id": "t3_5yznx", "id": "c02b3nw", "author_flair_css_class": null}
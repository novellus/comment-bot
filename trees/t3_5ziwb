{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 6, "author": "hupp", "created_utc": "1193841756", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 2, "gilded": 0, "link_id": "t3_5ziwb", "retrieved_on": 1427424885, "score": 2, "id": "c02cdj0", "author": "TheManWithNoName", "created_utc": "1193844039", "distinguished": null, "edited": false, "body": "No kidding, and good for them.  You can't expect the best solution in one language to translate perfectly to be the best solution in another language, especially when they are as different as Ruby and Erlang. ", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02cdj0", "parent_id": "t1_c02cd9g", "score_hidden": false, "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "Rhoomba", "created_utc": "1193844433", "children": [{"controversiality": 0, "retrieved_on": 1427424845, "subreddit_id": "t5_2fwo", "author_flair_text": null, "name": "t1_c02cgmg", "gilded": 0, "link_id": "t3_5ziwb", "downs": 0, "score": 2, "score_hidden": false, "id": "c02cgmg", "author": "masklinn", "created_utc": "1193866895", "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "ups": 2, "parent_id": "t1_c02cdko", "body": "The code was attached to the mails to the Erlang-questions mailing list.\n\nHere are the files attached to the last mail I found from him in my mail client (October 28, 23:38 paris time)\n\nBeware, the code is quite long\n\n\n\t%% Author Anders Nygren\n\t%% Based on Steve Vinoski's wfbm4, see below.\n\t%% Changes: \n\t%% - Use tuple instead of dict to store shift values.\n\t%% - Do not bind variables when binary matching unless they will\n\t%% be used.\n\t%% - Removed the last binary bindings, thanks to Hynek Vychodil.\n\t%%\n\t%% wfbm4 -- search functions for Tim Bray's Wide Finder project\n\t%% Author: Steve Vinoski (http://steve.vinoski.net/), 21 October 2007.\n\t%% See &lt;http://steve.vinoski.net/blog/2007/10/21/faster-wf-still/&gt;.\n\t-module(wfbm4_ets1_1).\n\t-export([find/5, init/0]).\n\t-compile([native]).\n\t\n\t-define(STR, \"] \\\"GET /ongoing/When/\").\n\t-define(REVSTR, \"/nehW/gniogno/ TEG\\\" ]\").\n\t-define(STRLEN, 21).      %length(?STR)\n\t-define(DATELEN, 16).     %length(\"200x/2000/00/00/\")\n\t-define(MATCHHEADLEN, 5). %length(\"200x/\")\n\t\n\tset_shifts(_, Count, Tbl) when Count =:= ?STRLEN - 1 -&gt;\n\t\tTbl;\n\tset_shifts([H|T], Count, Tbl) -&gt;\n\t\tShift = ?STRLEN - Count - 1,\n\t\tset_shifts(T, Count+1, dict:store(H, Shift, Tbl)).\n\t\n\tset_defaults([], Tbl) -&gt;\n\t\tTbl;\n\tset_defaults([V|T], Tbl) -&gt;\n\t\tset_defaults(T, dict:store(V, ?STRLEN, Tbl)).\n\t\n\tinit() -&gt;\n\t\tD = set_shifts(?STR, 0, set_defaults(lists:seq(1, 255), dict:new())),\n\t\tlist_to_tuple([S||{_C,S} &lt;-lists:sort(dict:to_list(D))]).\n\t\n\tmatch_front(_, _, [], _, _) -&gt; \n\t\t{true, 0};\n\tmatch_front(Bin, N, [C1 | T], Comps, Tbl) -&gt;\n\t\t&lt;&lt;_:N/binary, C2:8, _/binary&gt;&gt; = Bin,\n\t\tcase C1 of\n\t\tC2 -&gt; match_front(Bin, N - 1, T, Comps + 1, Tbl);\n\t\t_ -&gt;\n\t\t\tcase element(C2, Tbl) of\n\t\t\t?STRLEN -&gt; {false, ?STRLEN};\n\t\t\tShift when Comps &gt;= Shift -&gt; {false, 1};\n\t\t\tShift -&gt; {false, Shift - Comps}\n\t\t\tend\n\t\tend.\n\t\n\tscan_key(B, N, S) when N &lt; S -&gt;\n\t\t&lt;&lt;_:N/binary, C, _/binary&gt;&gt; = B,\n\t\tcase C of\n\t\t$\\s -&gt; {ok, N};\n\t\t$. -&gt; {none, N};\n\t\t\t$\\n -&gt; {none, N};\n\t\t\t_ -&gt; scan_key(B, N + 1, S)\n\t\tend;\n\tscan_key(_, N, _) -&gt; {none, N}.\n\t\n\tfind(Bin, Tbl, Pid, AccTo, Tab) -&gt;\n\t\tfind(Bin, Tbl, Pid, AccTo, Tab, 0,\n\t\t size(Bin) - (?STRLEN) - (?DATELEN)),\n\t\tAccTo ! done.\n\t\n\tfind(Bin, Tbl, Pid, AccTo, Tab, N, S) when N &lt; S -&gt;\n\t\tcase match_front(Bin, N + (?STRLEN) - 1, ?REVSTR, 0, Tbl) of\n\t\t{false, Shift} -&gt; \n\t\t\tfind(Bin, Tbl, Pid, AccTo, Tab, N + Shift, S);\n\t\t{true, _} -&gt;\n\t\t\tN1 = N + (?STRLEN),\n\t\t\tN2 = N1 + 3,\n\t\t\tcase Bin of\n\t\t\t&lt;&lt;_:N2/binary, \"x/\", _:4/binary, $/, _:2/binary, $/,\n\t\t\t _:2/binary, $/, _/binary&gt;&gt; -&gt;\n\t\t\t\tcase scan_key(Bin, N1 + (?DATELEN),\n\t\t\t\t\t  S + (?STRLEN) + (?DATELEN))\n\t\t\t\tof\n\t\t\t\t{none, F} -&gt; find(Bin, Tbl, Pid, AccTo, Tab, F, S);\n\t\t\t\t{ok, F} -&gt;\n\t\t\t\t\tN3 = N1 + (?MATCHHEADLEN),\n\t\t\t\t\tL = F - N3,\n\t\t\t\t\t&lt;&lt;_:N3/binary, Match:L/binary, _/binary&gt;&gt; = Bin,\n\t\t\t\t\tcase catch ets:update_counter(Tab, Match, 1) of\n\t\t\t\t\t{'EXIT', _Rsn} -&gt; Pid ! Match;\n\t\t\t\t\t_ -&gt; ok\n\t\t\t\t\tend,\n\t%%%                      safe_add_key(Key, Tab),\n\t\t\t\t\tfind(Bin, Tbl, Pid, AccTo, Tab, F, S)\n\t\t\t\tend;\n\t\t\t_ -&gt; find(Bin, Tbl, Pid, AccTo, Tab, N1, S)\n\t\t\tend\n\t\tend;\n\t\n\tfind(_, _, _, _, _, _, _) -&gt; \n\t\tdone.\n\n\n\n\t%%% File    : wfinder.erl\n\t%%% Author  : Anders Nygren &lt;anders.nygren@gmail.com&gt;\n\t%%% Description : \n\t%%% Created : 24 Oct 2007 by Anders Nygren &lt;anders.nygren@gmail.com&gt;\n\t\n\t-module(wfinder1_1).\n\t-compile([native]).\n\t\n\t-export([start/2,start/3,\n\t\t main/1\n\t\t]).\n\t\n\t-export([file_reader/3,top_ten/1, split_and_find/3]).\n\t\n\t-define(BLOCKSIZE, 200000).\n\t\n\t-record(state, {eof=false, rcv, tid, tbl, max_w, ws=0, data=[]}).\n\t\n\tmain([File]) -&gt;\n\t\tstart(File, ?BLOCKSIZE, erlang:system_info(schedulers)*2),\n\t\thalt();\n\tmain([File, Blksize]) -&gt;\n\t\tstart(File, list_to_integer(Blksize),erlang:system_info(schedulers)*2),\n\t\thalt();\n\tmain([File, Blksize, MaxWs]) -&gt;\n\t\tstart(File, list_to_integer(Blksize), list_to_integer(MaxWs)),\n\t\thalt().\n\t\n\tstart(File, Blksize) -&gt;\n\t\tstart(File, Blksize, erlang:system_info(schedulers)*2).\n\t\n\tstart(File, Blksize, MaxWs) -&gt;\n\t\tprocess_flag(min_heap_size, 50000),\n\t\tMe = self(),\n\t\tstart_reader(Me, File, Blksize),\n\t\tTid = ets:new(wftab, [set,public]),\n\t\tRcv = start_receiver(Tid) ,\n\t\tTbl = wfbm4_ets1_1:init(),\n\t\tmain_loop(#state{rcv=Rcv, tid=Tid, tbl=Tbl, max_w=MaxWs}).\n\t%%    io:format(\"~p~n\",[statistics(garbage_collection)]).\n\t\n\tmain_loop(State) -&gt;\n\t\treceive\n\t\tMsg -&gt;\n\t%%\t    trace_msg(Msg, State),\n\t\t\tcase handle_msg(Msg, State) of\n\t\t\t{continue, NState} -&gt;\n\t\t\t\tmain_loop(NState);\n\t\t\tdone -&gt;\n\t\t\t\tdone\n\t\t\tend\n\t\tend.\n\t\n\t\n\thandle_msg({data, Bin}, \n\t\t   #state{max_w=MaxWs, ws=MaxWs, data=Bins} = State) -&gt;\n\t\t{continue, State#state{data=[Bin|Bins]}};\n\t\n\thandle_msg({data, Bin}, \n\t\t   #state{rcv=Rcv, tid=Tid, tbl=Tbl, ws=Ws, data=[]} = State) -&gt;\n\t\tstart_worker(Bin, Rcv, Tid, Tbl),\n\t\t{continue, State#state{ws=Ws+1}};\n\t\n\thandle_msg(eof, #state{rcv=Rcv, ws=0} = State) -&gt;\n\t\tRcv!{done, self()},\n\t\t{continue, State#state{eof=true}};\n\t\n\thandle_msg(eof, State) -&gt;\n\t\t{continue, State#state{eof=true}};\n\t\n\thandle_msg(done, #state{eof=true, rcv=Rcv, ws=1, data=[]} = State) -&gt;\n\t\tRcv!{done, self()},\n\t\t{continue, State#state{ws=0}};\n\t\n\thandle_msg(done, \n\t\t   #state{rcv=Rcv, tid=Tid, tbl=Tbl, ws=Ws, \n\t\t\t  data=[Bin|Bins]} = State) -&gt;\n\t\tstart_worker(Bin, Rcv, Tid, Tbl),\n\t\t{continue, State#state{ws=Ws, data=Bins}};\n\t\n\thandle_msg(done, #state{ws=Workers, data=[]} = State) -&gt;\n\t\t{continue, State#state{ws=Workers-1}};\n\t\n\thandle_msg({top_ten, L}, _State) -&gt;\n\t\tlists:foreach(fun({K,V}) -&gt; io:format(\"~p: ~s~n\", [V, K]) end, L),\n\t\tdone.\n\t\n\tstart_worker(Bin, Rcv, Tid, Tbl) -&gt;\n\t\tMe = self(),\n\t\tproc_lib:spawn_opt(fun() -&gt; \n\t\t\t\t\t   wfbm4_ets1_1:find(Bin, Tbl, Rcv, Me, Tid)\n\t\t\t\t   end,\n\t\t\t\t   [{min_heap_size, 8000}]).\n\t\n\t%%%==================================================================\n\t%%% file reader\n\t%%% Process to read and chunk the file. Sends the chunks to the\n\t%%% coordination process.\n\t%%%==================================================================\n\tstart_reader(Me, File, Blksize) -&gt;\n\t\tspawn(fun() -&gt; \n\t\t\t  file_reader(Me, File, Blksize)\n\t%%  \t\t  {T,_} = timer:tc(?MODULE,file_reader,[Me, File, Blksize]),\n\t%%  \t\t  io:format(\"read file ~p~n\",[T])\n\t\t  end).\n\t\n\tfile_reader(Coord, File, Blksize) -&gt;\n\t\tprocess_flag(min_heap_size, 8000),\n\t\t{ok, FD} = file:open(File, [read, raw, binary]),\n\t\t{ok, Bin} = file:read(FD, Blksize),\n\t\tscan_file(Coord, FD, Bin, Blksize),\n\t\tok = file:close(FD).\n\t\n\tscan_file(Coord, FD, Bin, Blksize) -&gt;\n\t\tscan_file(Coord, FD, Bin, Blksize, Blksize).\n\t\n\tscan_file(Coord, FD, Bin, Blksize, Offset) -&gt;\n\t\tNext = split_and_find(Coord, Bin, Blksize),\n\t%%     {T,Next} = timer:tc(?MODULE, split_and_find,[Coord, Bin, Blksize]),\n\t%%     io:format(\"~p~n\",[T]),\n\t\tOffset1 = Offset - (Blksize - Next),\n\t\tcase file:pread(FD, Offset1, Blksize) of\n\t\t{ok, Block} -&gt;\n\t\t\tscan_file(Coord, FD, Block, Blksize, Offset1+Blksize);\n\t\teof -&gt;\n\t\t\tCoord!eof\n\t\tend.\n\t\n\tsplit_and_find(Coord, Bin, Blksize) -&gt;\n\t\tSize = Blksize - 1,\n\t\tcase Bin of\n\t\t\t&lt;&lt;_:Size/binary, $\\n, _/binary&gt;&gt; -&gt;\n\t\t\t&lt;&lt;Front:Size/binary, _/binary&gt;&gt; = Bin,\n\t\t\tCoord!{data, Front},\n\t\t\tBlksize;\n\t\t\t_ -&gt;\n\t\t\t\tsplit_and_find(Coord, Bin, Size)\n\t\tend.\n\t\n\t%%%==================================================================\n\t%%% receive_matches\n\t%%% Process that receives matches from the workers.\n\t%%% This is only used the first time a specific match is found\n\t%%% inorder to avoid a race condition on the insertion of the\n\t%%% match in the ETS table.\n\t%%%==================================================================\n\tstart_receiver(Tid) -&gt;\n\t\tspawn_opt(fun() -&gt;\n\t\t\t\t  receive_matches(Tid) \n\t\t\t  end,\n\t\t\t  [{min_heap_size, 10000}]\n\t\t\t ).\n\t\n\treceive_matches(Tab) -&gt;\n\t\treceive\n\t\t{done, Pid} -&gt;\n\t\t\tPid!{top_ten, top_ten(Tab)};\n\t\t\tMatch -&gt; \n\t\t\tcase catch ets:update_counter(Tab, Match, 1) of\n\t\t\tN when is_integer(N) -&gt;\n\t\t\t\tok;\n\t\t\t_Error -&gt;\n\t\t\t\tets:insert(Tab, {Match, 1})\n\t\t\tend,\n\t\t\treceive_matches(Tab)\n\t\tend.\n\t\n\ttop_ten(Tab) -&gt;\n\t\tlists:reverse(ets:foldl(fun (M,Acc) when length(Acc) &lt;10 -&gt;\n\t\t\t\t\t\t[M|Acc];\n\t\t\t\t\t({_,X}=E, [{_,C}|Es]) when X&gt;C-&gt; \n\t\t\t\t\t\tlists:keysort(2, [E|Es]);\n\t\t\t\t\t(_E, Acc) -&gt;\n\t\t\t\t\t\tAcc\n\t\t\t\t\tend, [], Tab)).\n\t\n\t\n\t%%%==================================================================\n\t%%% Test\n\t%%%==================================================================\n\t\n\ttrace_msg({data, _Bin}, #state{ws=Ws, data=D}) -&gt;\n\t\tio:format(\"data ~p ~p~n\",[Ws, length(D)]);\n\ttrace_msg(done, #state{ws=Ws, data=D}) -&gt;\n\t\tio:format(\"done ~p ~p~n\",[Ws, length(D)]);\n\ttrace_msg(eof, #state{data=D}=State) -&gt;\n\t\tL = length(D),\n\t\tNS= State#state{data=L, tbl=none},\n\t\tio:format(\"eof ~p~n\",[NS]);\n\ttrace_msg({top_ten, L}, _State) -&gt;\n\t\tio:format(\"top_ten ~p~n\",[L]).\n", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02cdko", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 3, "link_id": "t3_5ziwb", "retrieved_on": 1427424883, "body": "Yeah, but what does the source look like? I couldn't find the source of that version.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02cd9g", "id": "c02cdko", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 6, "controversiality": 0, "archived": true, "link_id": "t3_5ziwb", "retrieved_on": 1427424887, "id": "c02cd9g", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02cd9g", "parent_id": "t3_5ziwb", "body": "That's a pretty amazing turnaround for Erlang, considering that the first iteration was two orders of magnitude slower than the Ruby version.  ", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 8, "author": "sblinn", "created_utc": "1193843024", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 5, "author": "sblinn", "created_utc": "1193843472", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 4, "author": "[deleted]", "created_utc": "1193852103", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "sblinn", "created_utc": "1193859966", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "author_flair_text": null, "name": "t1_c02cfve", "gilded": 0, "link_id": "t3_5ziwb", "retrieved_on": 1427424854, "score": 2, "score_hidden": false, "body": "I have no idea.  As you point out, 150 MB/s sustained, all the way from disk to algorithm, is pretty good for a slow disk ;-)\n\nOn the other hand, \"it took till past lunch today to get logged into the mighty T5120\" might imply that maybe he's not in complete control over the machine...", "author": "[deleted]", "created_utc": "1193860917", "distinguished": null, "edited": true, "archived": true, "subreddit": "programming", "ups": 2, "parent_id": "t1_c02cfri", "id": "c02cfve", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 3, "name": "t1_c02cfri", "controversiality": 0, "archived": true, "link_id": "t3_5ziwb", "retrieved_on": 1427424856, "score_hidden": false, "id": "c02cfri", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02ceqd", "body": "Why mention the disk speed if he is not hard booting the machine between runs to ensure the cache is not used?", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 4, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ziwb", "retrieved_on": 1427424868, "body": "Chances are that 971,538,252 bytes fit pretty nicely in the caches on that machine.", "archived": true, "distinguished": null, "edited": true, "name": "t1_c02ceqd", "parent_id": "t1_c02cdg8", "id": "c02ceqd", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02cdg8", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 5, "link_id": "t3_5ziwb", "retrieved_on": 1427424885, "id": "c02cdg8", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02cdea", "body": "And yes, the [updated Erlang code](http://forum.trapexit.org/viewtopic.php?t=10172&amp;postdays=0&amp;postorder=asc&amp;start=0) completely blows the doors off of everything else going by elapsed time. 6.462 seconds to process the entire 971,538,252 bytes of data. 150,346,371 bytes per second.\n\n&gt; It has a small, slow, miserable disk.\n\nCan't be that bad if the numbers are accurate. 150 MB/s is slow?", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "berlinbrown", "created_utc": "1193844687", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193845018", "ups": 1, "gilded": 0, "link_id": "t3_5ziwb", "retrieved_on": 1427424882, "score": 1, "score_hidden": false, "id": "c02cdnr", "author": "Rhoomba", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02cdnr", "parent_id": "t1_c02cdly", "body": "Well possibly, but he didn't write tbray5 :)\n\nI think the fast version uses custom (native) IO and pattern matching code.", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427424877, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02ce3c", "gilded": 0, "link_id": "t3_5ziwb", "downs": 0, "score": 10, "score_hidden": false, "body": "Tim did not use the most efficient methods for Erlang in his original version, and in particular used a very inefficient mechanism for reading files.  One upside to all of this for the Erlang community is that it has led people to discover and share a lot of VM optimizations that were not well-known (e.g. increasing the per-process heap had a big impact.)", "author": "evgen", "created_utc": "1193848095", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 10, "parent_id": "t1_c02cdly", "id": "c02ce3c", "author_flair_css_class": null}, {"body": "&gt; does this mean tim bray can't code in Erlang?\n\nI posted the last version of Nygren's code higher in the thread.\n\nAnd the solution is... non-obvious, to say the least.\n\nSo Tim probably can't code in erlang for production-values of code anyway, but in that case it doesn't really matter as the final code is guru-level and the result of cooperative work by a lot of people in the erlang community.", "controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193867091", "gilded": 0, "link_id": "t3_5ziwb", "retrieved_on": 1427424845, "score": 1, "score_hidden": false, "id": "c02cgn7", "author": "masklinn", "author_flair_text": null, "distinguished": null, "edited": true, "archived": true, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c02cdly", "name": "t1_c02cgn7", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 2, "name": "t1_c02cdly", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ziwb", "retrieved_on": 1427424883, "score_hidden": false, "body": "I didn't follow the wider finder updates, but does this mean tim bray can't code in Erlang?\r\n\r\n(I am going by the tbray5 Erlang example)", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02cdea", "id": "c02cdly", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "jimbokun", "created_utc": "1193854575", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 1, "gilded": 0, "link_id": "t3_5ziwb", "retrieved_on": 1427424837, "score": 1, "created_utc": "1193872969", "body": "[deleted]", "author": "[deleted]", "author_flair_text": null, "distinguished": null, "edited": true, "subreddit_id": "t5_2fwo", "score_hidden": false, "name": "t1_c02ch6k", "parent_id": "t1_c02cf3t", "id": "c02ch6k", "author_flair_css_class": null}], "subreddit": "programming", "ups": 2, "name": "t1_c02cf3t", "controversiality": 0, "archived": true, "link_id": "t3_5ziwb", "retrieved_on": 1427424865, "score_hidden": false, "id": "c02cf3t", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02cdea", "body": "Seems like high values for \"user time/wall clock time\" make an interesting metric for how well a system utilizes parallel processors.  Is this already a common metric?\n\nOf course, you still need to make sure some other system doesn't beat you handily in wall clock time using just one core or something.  But I think in this case it pretty dramatically shows what's possible with Erlang compared to other languages.", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 8, "author": "[deleted]", "created_utc": "1193857577", "children": [{"controversiality": 0, "retrieved_on": 1427424850, "subreddit_id": "t5_2fwo", "created_utc": "1193863939", "ups": 6, "gilded": 0, "link_id": "t3_5ziwb", "downs": 0, "score": 6, "body": "Yeah, it can't tell which thread is actually running so they all get counted. [Details here](http://www.tbray.org/ongoing/When/200x/2007/10/09/Niagara-2-T2-T5120)", "author": "Rhoomba", "archived": true, "distinguished": null, "edited": false, "id": "c02cg9e", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02cg9e", "parent_id": "t1_c02cfgy", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": 8, "name": "t1_c02cfgy", "controversiality": 0, "archived": true, "link_id": "t3_5ziwb", "retrieved_on": 1427424859, "score_hidden": false, "id": "c02cfgy", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02cdea", "body": "&gt; So 8 cores at 6 seconds gives you 48 core-seconds of possible user time before you have to ask \"what the hell is wrong with the broken timer\".\n\nThat doesn't explain how \"tbray5\" can give you 35 minutes of user time in 1 minute, though...\n\n(update: hmm. bray says that his 5120 has 8 cores, but sun says that it's a 64-thread machine.  anyone knows what they mean?)\n\n&gt; \"what the hell is wrong with the broken timer\"\n\nWell, Unix process timers are pretty broken, but that's another story.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 8, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ziwb", "retrieved_on": 1427424886, "body": "For those (like me) who forgot the definitions of user time, etc., and wondered \"how could the elapsed time be less than the user and system time\", the answer is that \"user time\" is accumulating per-core and the elapsed time is simply the elapsed time. So 8 cores at 6 seconds gives you 48 core-seconds of possible user time before you have to ask \"what the hell is wrong with the broken timer\".", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02cdea", "parent_id": "t3_5ziwb", "id": "c02cdea", "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427424885, "subreddit_id": "t5_2fwo", "created_utc": "1193843969", "ups": 1, "gilded": 0, "link_id": "t3_5ziwb", "downs": 0, "score": 1, "body": "That's some pretty impressive speed there.\n\nAre the other solutions just not parallelized or what?  I haven't been following the Wide Finder stuff.", "author": "DannoHung", "author_flair_text": null, "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit": "programming", "name": "t1_c02cdij", "parent_id": "t3_5ziwb", "score_hidden": false, "id": "c02cdij"}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "jbellis", "created_utc": "1193844417", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "author_flair_text": null, "name": "t1_c02ceqz", "gilded": 0, "link_id": "t3_5ziwb", "retrieved_on": 1427424868, "score": 2, "score_hidden": false, "body": "Hopefully, he's still working on it:\n\n&gt; I\u2019m quite sure I\u2019ll update it as I pour more results in.\n\nAfter all, the fastest Python version beat (edit: some version of) the Erlang code on an 8-core Intel box, so it might give it a match also on a Sun box... (edit: or not; the fastest Erlang version seems to be a lot faster than the earlier attempts).\n\n(update: preliminary Python results are in.  and we have a winner! ;-)", "author": "[deleted]", "created_utc": "1193852213", "distinguished": null, "edited": true, "archived": true, "subreddit": "programming", "ups": 2, "parent_id": "t1_c02cdkl", "id": "c02ceqz", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 3, "score_hidden": false, "controversiality": 0, "archived": true, "link_id": "t3_5ziwb", "retrieved_on": 1427424883, "id": "c02cdkl", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02cdkl", "parent_id": "t3_5ziwb", "body": "What happened to the python, C, etc versions?", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193759838", "name": "t1_c02c665", "gilded": 0, "link_id": "t3_5zfut", "retrieved_on": 1427424979, "score": 1, "score_hidden": false, "body": "&gt; The do\u2018s and the return are of course there pretty much at random, by adding, removing, and moving things till I could get it to compile.\n\n\"of course\"", "author": "awb", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t3_5zfut", "id": "c02c665", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "DannoHung", "created_utc": "1193760406", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": 3, "gilded": 0, "link_id": "t3_5zfut", "retrieved_on": 1427424977, "score": 3, "body": "If by control you mean to exit early then you could use foldr or foldl.  Accessing the collection inside the loop body is exactly the same as accessing the collection outside.", "author": "augustss", "created_utc": "1193761376", "distinguished": null, "edited": true, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02c6dm", "parent_id": "t1_c02c68d", "score_hidden": false, "id": "c02c6dm"}], "subreddit": "programming", "ups": 1, "score_hidden": false, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zfut", "retrieved_on": 1427424979, "body": "Hmmm, this leads me to two questions:\n\n1) How often do we need explicit control over our iteration anyway?  I mean, most of the time I work on collections uniformly, but I seem to remember needing to jump around my collection or refer to a previous object in some ancient, old code I wrote.\n\n2) How *do* you control an iteration and access your collection from within an iteration construct in Haskell anyway?", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02c68d", "parent_id": "t3_5zfut", "id": "c02c68d", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "bitwize", "created_utc": "1193761363", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "augustss", "created_utc": "1193765133", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "bitwize", "created_utc": "1193766067", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "dons", "created_utc": "1193767110", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "bitwize", "created_utc": "1193767411", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "dons", "created_utc": "1193773564", "children": [{"distinguished": null, "controversiality": 0, "downs": 0, "subreddit": "programming", "ups": 1, "archived": true, "name": "t1_c02c899", "gilded": 0, "link_id": "t3_5zfut", "retrieved_on": 1427424952, "score": 1, "id": "c02c899", "author": "bitwize", "created_utc": "1193776272", "author_flair_text": null, "edited": false, "subreddit_id": "t5_2fwo", "score_hidden": false, "parent_id": "t1_c02c7vq", "body": "Oooooooo...", "author_flair_css_class": null}], "subreddit": "programming", "ups": 3, "name": "t1_c02c7vq", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zfut", "retrieved_on": 1427424957, "score_hidden": false, "body": "\n    class Storable a =&gt; ValueSemantics a\n    instance ValueSemantics [Bool] where ...\n\n:)", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02c770", "id": "c02c7vq", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02c770", "ups": 1, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zfut", "retrieved_on": 1427424967, "score_hidden": false, "body": "Kind of, but it's not _really_ value semantics until you can do it for values of arbitrary type, not just built in primitive types.", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02c757", "id": "c02c770", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 2, "name": "t1_c02c757", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zfut", "retrieved_on": 1427424967, "score_hidden": false, "body": "&gt; non-pointer ... stack allocation ... values are copied ... stack when passed as function args\n\nSo, unboxed, stack allocated values\n\n    loop :: Int# -&gt; Int#\n    loop n = 1 + loop (n - 1)\n\nMagic value semantics :)", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02c6zo", "id": "c02c757", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02c6zo", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 2, "link_id": "t3_5zfut", "retrieved_on": 1427424969, "id": "c02c6zo", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02c6un", "body": "In qwe1234 usage it refers specifically to the C and C++ way of handling non-pointer, non-reference values, including structs and objects, viz.:\n\n* stack allocation of the appropriate size for each local variable (and deallocation/destructor call upon scope exit)\n\n* values are copied in their entirety when assigned to a variable or other lvalue\n\n* values are copied to the stack when passed as function args\n\nValue semantics is necessary for the C++ and D RAII pattern, as the resource is acquired when the variable is initialized and released when it goes out of scope.\n\nYou get the idea. It's a C++-ism, which is why it's so *crucial* to writing *real* software (as opposed to quicksort, factorial, and Ackermann functions).", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02c6un", "ups": 2, "controversiality": 0, "archived": true, "link_id": "t3_5zfut", "retrieved_on": 1427424971, "score_hidden": false, "id": "c02c6un", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02c6dl", "body": "The mind boggles at the implications of value semantics.  Now if we only knew what it was...", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02c6dl", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 2, "link_id": "t3_5zfut", "retrieved_on": 1427424977, "id": "c02c6dl", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5zfut", "body": "Wow, all you need is value semantics and with Haskell you can do looping in the only computational model known to science!", "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427424973, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02c6ow", "gilded": 0, "link_id": "t3_5zfut", "downs": 0, "score": 1, "score_hidden": false, "body": "Here's a working version of the recursive algorithm:\n\n    for i p pp f =\n        if p i\n           then\n             (f i) &gt;&gt; for (pp i) p pp f\n           else\n             return ()\n\n*edited: formatting*", "author": "kscaldef", "created_utc": "1193763941", "distinguished": null, "edited": true, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t3_5zfut", "id": "c02c6ow", "author_flair_css_class": null}
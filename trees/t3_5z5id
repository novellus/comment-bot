{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 7, "author": "grauenwolf", "created_utc": "1193379616", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 5, "author": "[deleted]", "created_utc": "1193390536", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1193391734", "ups": 13, "gilded": 0, "link_id": "t3_5z5id", "retrieved_on": 1427425320, "score": 13, "body": "If I remember correctly, it just lets you selectively do dynamically looked up method calls, as you know from Lisp, Smalltalk, Python, etc. It doesn't by itself solve the problems discussed here, so if that's what grauenwolf meant to say I think he's wrong; but you can at least build something yourself with that as a substrate, just as generic functions can be implemented as a library feature in Python.  ", "author": "psykotic", "author_flair_text": null, "distinguished": null, "edited": true, "author_flair_css_class": null, "archived": true, "subreddit": "programming", "name": "t1_c02bful", "parent_id": "t1_c02bfsm", "score_hidden": false, "id": "c02bful"}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "grauenwolf", "created_utc": "1193414828", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "[deleted]", "created_utc": "1193466563", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "grauenwolf", "created_utc": "1193507016", "children": [{"controversiality": 0, "retrieved_on": 1427425177, "subreddit_id": "t5_2fwo", "archived": true, "gilded": 0, "link_id": "t3_5z5id", "downs": 0, "score": 1, "score_hidden": false, "body": "[deleted]", "author": "[deleted]", "created_utc": "1193542668", "distinguished": null, "edited": false, "id": "c02bqvw", "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c02boai", "name": "t1_c02bqvw", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02boai", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 1, "link_id": "t3_5z5id", "retrieved_on": 1427425211, "body": "First of all, I am totally over my head. So if I say something stupid, feel free to point it out.\r\n\r\nThe problem I see with you BNF is that it gets messy really fast you take into consideration the sheer number of types.\r\n\r\nUsing just floats and ints, you already missed one.\r\n\r\n  float = float operator int\r\n  float = int operator float\r\n  float = float operator int\r\n  operator = '+'|'*|'-'|'/'\r\n\r\nWhen you break down float (single, double) and int (byte, int16, int32, int64), the number of cases increases dramatically.\r\n\r\nWhen looking at inheritance, it seems like will get even messier. \r\n\r\nBut like I said, this is far outside my area and I may be totally mis-understanding you.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02bmj7", "id": "c02boai", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 1, "controversiality": 0, "archived": true, "link_id": "t3_5z5id", "retrieved_on": 1427425234, "id": "c02bmj7", "author_flair_text": null, "distinguished": null, "edited": true, "name": "t1_c02bmj7", "parent_id": "t1_c02bhox", "body": "  O.K. thanks for clarification!\n\nJust a few additional remarks. I do think these are all more or less clunky ways to disambiguate argument dispatch. Conceptually we relate types and operations in the following way noted as BNF pseudocode:\n\n      float = float operator int\n      float = int operator float\n      operator = '+'|'*|'-'|'/'\n\nIn practice one often assigns priorities to operators for disambiguation. Here it is not the operator-precedence but method call precedence for overloaded operators depending in types. \n\nPriorities are a bit low level and one might think about a more accessable encoding since we are running soon into a partial order or more complex dependencies. Handling this by totally ordered priorities is awkward.\n\nChecking the disambiguation scheme can be handled using Haskells type classes or a similar expressive mechanism ( C++0x concepts or metaprogramming a la Python and Ruby ).\n\nMethodologically one might define a small DSL and resolve it into ones favourite programming language.\n\n  ", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02bhox", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 3, "link_id": "t3_5z5id", "retrieved_on": 1427425297, "id": "c02bhox", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bfsm", "body": "Specifically this problem in Java\r\n\r\n&gt; It will always call eval (Object foo, Object bar). It will not call eval (List foo, List bar) if you pass it two lists. That\u2019s because although each of our methods have the same name\u2014eval\u2014Java treats them as different methods, and it figures out which one to call based on the declared types of the parameters at compile time, not on the actual types of the parameters\u2019 values at run time.\r\n", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 5, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z5id", "retrieved_on": 1427425321, "body": "I don't know VB. What do those methods exactly and how do they solve the problems addressed by raganwald?", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02bfsm", "parent_id": "t1_c02bfak", "id": "c02bfsm", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": 5, "gilded": 0, "link_id": "t3_5z5id", "retrieved_on": 1427425319, "score": 5, "body": "You're right and it' not that complex to write.  It's exactly how Mozilla Rhino handles method calls on Java object.", "id": "c02bfyh", "author": "cgrand", "created_utc": "1193394711", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02bfyh", "parent_id": "t1_c02bfak", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 7, "score_hidden": false, "controversiality": 0, "archived": true, "link_id": "t3_5z5id", "retrieved_on": 1427425328, "id": "c02bfak", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02bfak", "parent_id": "t3_5z5id", "body": "What I find truly sad is that it would be trivial for static OOP languages like Java and C# to handle many of these situations simply by using something like VB's CallByName and LateCall methods. All the reflection infrastructure is already in place, you just need a nice wrapper for it.\r\n", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 7, "author": "LaurieCheers", "created_utc": "1193393709", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 11, "author": "LaurieCheers", "created_utc": "1193396650", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 9, "author": "[deleted]", "created_utc": "1193404791", "children": [{"controversiality": 0, "retrieved_on": 1427425311, "subreddit_id": "t5_2fwo", "created_utc": "1193405113", "ups": 8, "gilded": 0, "link_id": "t3_5z5id", "downs": 0, "score": 8, "id": "c02bgl5", "author": "LaurieCheers", "archived": true, "distinguished": null, "edited": false, "body": "Sure.", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02bgl5", "parent_id": "t1_c02bgk0", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": 9, "score_hidden": false, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z5id", "retrieved_on": 1427425311, "body": "[deleted]", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02bgk0", "parent_id": "t1_c02bg1m", "id": "c02bgk0", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 7, "author": "crusoe", "created_utc": "1193409941", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1193433825", "ups": 1, "gilded": 0, "link_id": "t3_5z5id", "retrieved_on": 1427425264, "score": 1, "body": " Scala is not functional (though, it does have first-class functions), but it certainly makes Java completely redundant and outdated.\n\n[Here is what some of it looks like in Java if you try.](http://jatheism.net/) Not real nice to implement, but at least the language is slightly usable now. ", "id": "c02bk85", "author": "[deleted]", "author_flair_text": null, "distinguished": null, "edited": true, "archived": true, "subreddit": "programming", "name": "t1_c02bk85", "parent_id": "t1_c02bh3n", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 7, "name": "t1_c02bh3n", "controversiality": 0, "archived": true, "link_id": "t3_5z5id", "retrieved_on": 1427425305, "score_hidden": false, "id": "c02bh3n", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bg1m", "body": "Which is why at this stage, you are better with functions being applied over types, since these operations are all specified in one( or maybe a few) functions, instead of spread over multiple objects, via double dispatch.\n\nIt's things like that made me realize that OOP is not the end-all of programming. I'm really thinking I should look into Scala, and other functional languages.\n", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 11, "name": "t1_c02bg1m", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z5id", "retrieved_on": 1427425318, "score_hidden": false, "body": "Thinking further... if you wanted to add more types to this comparison (tree, 2d array, etc) it seems like the dispatch procedure would get very unwieldy very quickly.\r\n\r\nInstead of the fancy Visitor shenanigans, wouldn't it be better and simpler to implement this as a switch statement?\r\n\r\nIt's been a long time since I wrote any Java, so please excuse syntax errors...\r\n\r\n    interface Classifiable\r\n    {\r\n        int classify();\r\n    }\r\n\r\n    // I know this isn't valid Java, but it makes the example much clearer. The alternative is to tiresomely spell out every combination.\r\n    #define PAIR(a,b) (a|(b&lt;&lt;4))\r\n\r\n    abstract class DoubleDispatchable\r\n    {\r\n        abstract Object list_list(List a, List b);\r\n        abstract Object list_map(List a, Map b);\r\n        abstract Object map_map(Map a, Map b);\r\n        abstract Object object_object(Object a, Object b);\r\n\r\n        const int OBJECT = 0;\r\n        const int LIST = 1;\r\n        const int MAP = 2;\r\n\r\n        Object dispatch(Classifiable a, Classifiable b)\r\n        {\r\n            switch(PAIR(a.classify(), b.classify))\r\n            {\r\n                case PAIR(LIST, MAP): return list_map(a,b);\r\n                case PAIR(MAP, LIST): return list_map(b,a);\r\n                case PAIR(LIST, LIST): return list_list(a,b);\r\n                case PAIR(MAP, MAP): return map_map(a,b);\r\n                default: return object_object(a,b);\r\n            }\r\n        }\r\n    }\r\n\r\n    class Equivalent extends DoubleDispatchable\r\n    {\r\n        Object list_list(List a, List b) {...}\r\n        Object list_map(List a, Map b) {...}\r\n        Object map_map(Map a, Map b) {...}\r\n        Object object_object(Object a, Object b) {...}\r\n\r\n        bool eval(Classifiable a, Classifiable b) { return dispatch(a,b) != false; }\r\n    }", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02bfwz", "id": "c02bg1m", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02bfwz", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 7, "link_id": "t3_5z5id", "retrieved_on": 1427425320, "id": "c02bfwz", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t3_5z5id", "body": "Excellent - one of raganwald's best. And that's saying a lot.\r\n\r\nI find the last code snippet very interesting. It has a distinctive repetetive code-smell to it; isn't there a way to abstract that out into a table?\r\n\r\nDoes Java have a way to emulate pointers-to-methods? ", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 12, "author": "boredzo", "created_utc": "1193399439", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -8, "author": "LaurieCheers", "created_utc": "1193399761", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -3, "author": "boredzo", "created_utc": "1193400904", "children": [{"controversiality": 0, "retrieved_on": 1427425299, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02bhka", "gilded": 0, "link_id": "t3_5z5id", "downs": 0, "score": -6, "score_hidden": false, "id": "c02bhka", "author": "newton_dave", "created_utc": "1193413673", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": -6, "parent_id": "t1_c02bgac", "body": "Upmodded to counter the effects of the crybaby.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02bgac", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": -3, "link_id": "t3_5z5id", "retrieved_on": 1427425315, "body": "HFGI?", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02bg7s", "id": "c02bgac", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 4, "author": "MarshallBanana", "created_utc": "1193400989", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -7, "author": "newton_dave", "created_utc": "1193413680", "children": [{"controversiality": 0, "retrieved_on": 1427425257, "subreddit_id": "t5_2fwo", "created_utc": "1193440595", "ups": -2, "gilded": 0, "link_id": "t3_5z5id", "downs": 0, "score": -2, "id": "c02bkus", "author": "ayrnieu", "archived": true, "distinguished": null, "edited": false, "body": "&gt; Upmodded to counter the effects of the crybaby.\r\n\r\nFunny, I downmodded it for being snotty.", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02bkus", "parent_id": "t1_c02bhkc", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": -7, "name": "t1_c02bhkc", "controversiality": 0, "archived": true, "link_id": "t3_5z5id", "retrieved_on": 1427425299, "score_hidden": false, "id": "c02bhkc", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bgal", "body": "Upmodded to counter the effects of the crybaby.", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02bgal", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 4, "link_id": "t3_5z5id", "retrieved_on": 1427425315, "body": "Try one more time - you'll get it eventually.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02bg7s", "id": "c02bgal", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193413617", "name": "t1_c02bhjw", "gilded": 0, "link_id": "t3_5z5id", "retrieved_on": 1427425299, "score": -8, "score_hidden": false, "id": "c02bhjw", "author": "newton_dave", "archived": true, "distinguished": null, "edited": true, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": -8, "parent_id": "t1_c02bg7s", "body": "\\*lol\\*\n\nDyslexics of the world untie!\n\nRe-\\*lol\\* Awwwwww, does someone need a hug?", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02bg7s", "ups": -8, "controversiality": 0, "archived": true, "link_id": "t3_5z5id", "retrieved_on": 1427425319, "score_hidden": false, "id": "c02bg7s", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bg6u", "body": "Don't you mean Hiding of Fine-Grained Information? ;)", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 22, "author": "[deleted]", "created_utc": "1193403456", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 16, "author": "morner", "created_utc": "1193407765", "children": [{"controversiality": 0, "retrieved_on": 1427425306, "subreddit_id": "t5_2fwo", "author_flair_text": null, "name": "t1_c02bh0g", "gilded": 0, "link_id": "t3_5z5id", "downs": 0, "score": 10, "score_hidden": false, "body": "   which is used by my system to utilise various webobjects &amp; xml [yourdon](http://www.toxiccustard.com/computing/y.html) zombies\n\n ... so i struggled a bit there ... hangover\n\n...strategies for terminating untoward vi, wordpad, xemacs and yudit zealotry\n\n", "author": "dysmas", "created_utc": "1193409170", "distinguished": null, "edited": true, "archived": true, "subreddit": "programming", "ups": 10, "parent_id": "t1_c02bgvb", "id": "c02bh0g", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02bgvb", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 16, "link_id": "t3_5z5id", "retrieved_on": 1427425307, "id": "c02bgvb", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bggj", "body": "I think that's used by the Knowledge-Leveraging Mechanism for Numerical Object-Parameter Queue Reconstruction framework.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "name": "t1_c02bggj", "controversiality": 0, "author_flair_text": null, "ups": 22, "link_id": "t3_5z5id", "retrieved_on": 1427425313, "body": "A subcategory of which is Abstract Base-Class- Derived Extensible Fine-Grained Hiding of Information in Java?", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02bg6u", "id": "c02bggj", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 12, "controversiality": 0, "archived": true, "link_id": "t3_5z5id", "retrieved_on": 1427425319, "id": "c02bg6u", "author_flair_text": null, "distinguished": null, "edited": true, "name": "t1_c02bg6u", "parent_id": "t3_5z5id", "body": " &gt; OOP is several different ideas put together, the most important of which is Fine-Grained Information Hiding.\n\nI propose that this be renamed Fine-Grained Hiding of Information.\n\nAlso known as FGHI. ", "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427425315, "subreddit_id": "t5_2fwo", "author_flair_text": null, "name": "t1_c02bga9", "gilded": 0, "link_id": "t3_5z5id", "downs": 0, "score": 5, "score_hidden": false, "id": "c02bga9", "author": "boredzo", "created_utc": "1193400876", "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "ups": 5, "parent_id": "t3_5z5id", "body": "&gt; Maybe some verbs belong to objects, but some are best on their own? Maybe + and &lt;=&gt; and equivalent? really ought to be emancipated from their subservience to objects and ought to have their own definitions.\n\nObjective-C does this by inheriting C: You can still use C functions, and those functions can use and return Objective-C objects.\n\nOn the other hand, Cocoa still implements `isEqual:` as a method, so it doesn't accomplish that specific goal with that feature.", "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427425313, "subreddit_id": "t5_2fwo", "author_flair_text": null, "name": "t1_c02bgej", "gilded": 0, "link_id": "t3_5z5id", "downs": 0, "score": 1, "score_hidden": false, "body": "This is my take on this article. I read it fast and from that I know I need to spend more time learning this so I can understand and apply it. I saved it and I promise to get to it as soon as I put out several software fires... (maybe if our software used some of these Ideas I wouldn't be battling all the fires?)", "author": "[deleted]", "created_utc": "1193402695", "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "ups": 1, "parent_id": "t3_5z5id", "id": "c02bgej", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "[deleted]", "created_utc": "1193405327", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": 8, "gilded": 0, "link_id": "t3_5z5id", "retrieved_on": 1427425308, "score": 8, "body": "It's simple!\n\nMethods are necessarily attached to objects.\n\nFunctions don't have to be.  They're a superset.", "id": "c02bgsn", "author": "DannoHung", "created_utc": "1193407035", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02bgsn", "parent_id": "t1_c02bglr", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02bglr", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 1, "link_id": "t3_5z5id", "retrieved_on": 1427425311, "body": "functions...methods....\n\nGah it's hard enough remembering the differing syntax between C and Java at the best of times (my memory sucks), don't mix the naming too!", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5z5id", "id": "c02bglr", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "[deleted]", "created_utc": "1193411492", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 6, "author": "[deleted]", "created_utc": "1193412972", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 5, "author": "[deleted]", "created_utc": "1193430749", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "grauenwolf", "created_utc": "1193508048", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 2, "gilded": 0, "link_id": "t3_5z5id", "retrieved_on": 1427425210, "score": 2, "id": "c02bogj", "author": "[deleted]", "created_utc": "1193509036", "distinguished": null, "edited": false, "body": "And that's just why I wonder why proponents of functional programming picked the visitor pattern of all things to write a book about.", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02bogj", "parent_id": "t1_c02bodd", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 2, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z5id", "retrieved_on": 1427425211, "body": "Is there a good way to teach the visitor pattern? (Other than using it as an example of an anti-pattern.)", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02bodd", "parent_id": "t1_c02bjtu", "id": "c02bodd", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 5, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z5id", "retrieved_on": 1427425269, "body": "IMHO it neither teaches Java, really, nor does it teach about abstraction or functional programming in a meaningful way.\n\nThe other \"little\" books are good, because they succeed in the latter way, while there probably are good Java books (maybe Bruce Eckel's?), or good books about software engineering, abstraction, and OO design.  \"A little Java\" only teaches about the brain-dead visitor pattern, and IMHO not even in a good way.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02bjtu", "parent_id": "t1_c02bhh2", "id": "c02bjtu", "author_flair_css_class": null}], "subreddit": "programming", "ups": 6, "name": "t1_c02bhh2", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z5id", "retrieved_on": 1427425299, "score_hidden": false, "body": "[deleted]", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02bhap", "id": "c02bhh2", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02bhap", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 2, "link_id": "t3_5z5id", "retrieved_on": 1427425302, "id": "c02bhap", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5z5id", "body": "A little Java, a few patterns is a horrible, horrible book.  And yes, the little Schemer and MLer are *great* books.  And no, it's not about Java, but the *book* sucks, plain and simple.", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 4, "author": "[deleted]", "created_utc": "1193411743", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 6, "author": "riffraff", "created_utc": "1193412269", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": 2, "gilded": 0, "link_id": "t3_5z5id", "retrieved_on": 1427425299, "score": 2, "body": " RPN&gt;&gt; 2 2 +\r\n\r\n4 ", "id": "c02bhjo", "author": "flaxeater", "created_utc": "1193413555", "distinguished": null, "edited": true, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02bhjo", "parent_id": "t1_c02bhen", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": 3, "gilded": 0, "link_id": "t3_5z5id", "retrieved_on": 1427425291, "score": 3, "body": "that's a pretty poor article.  They are all wrong about \"that\" and its role in English.", "id": "c02bi44", "author": "[deleted]", "created_utc": "1193418078", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02bi44", "parent_id": "t1_c02bhen", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "name": "t1_c02bhen", "controversiality": 0, "archived": true, "ups": 6, "link_id": "t3_5z5id", "retrieved_on": 1427425300, "id": "c02bhen", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bhby", "body": "I believe it is the other way around. Polish noptation is \"loves john jill\" while reverse polish notation is \"john jill loves\".\n[Wikipedia seems to agree](http://en.wikipedia.org/wiki/Polish_notation)", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193415950", "name": "t1_c02bhu4", "gilded": 0, "link_id": "t3_5z5id", "retrieved_on": 1427425295, "score": 7, "score_hidden": false, "body": "women are not objects you chauvinist pig.\n\n\"i eat bread\" / \"i bread eat\" is clearly a better example\n\n;)", "author": "dysmas", "archived": true, "distinguished": null, "edited": true, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 7, "parent_id": "t1_c02bhby", "id": "c02bhu4", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02bhby", "ups": 4, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z5id", "retrieved_on": 1427425301, "score_hidden": false, "body": "http://en.wikipedia.org/wiki/Subject_Object_Verb#Incidence\n\n\nMost languages are \"John Jill loves\", also known as Polish notation. (ironically, Polish is actually Subject Verb Object.) \n\n", "archived": true, "distinguished": null, "edited": true, "parent_id": "t3_5z5id", "id": "c02bhby", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 4, "author": "DannoHung", "created_utc": "1193415710", "children": [{"controversiality": 0, "retrieved_on": 1427425288, "subreddit_id": "t5_2fwo", "created_utc": "1193419808", "ups": 5, "gilded": 0, "link_id": "t3_5z5id", "downs": 0, "score": 5, "body": "I usually have files of object definitions (defclass) and files of method/generic function definitions (defgeneric/defmethod).\n\nUnless I'm defining something that naturally fits into the single-dispatch pattern, in which case I'll put 'em both in the same file.", "id": "c02bicn", "author": "bobbane", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "name": "t1_c02bicn", "parent_id": "t1_c02bhsy", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c02bk79", "gilded": 0, "link_id": "t3_5z5id", "retrieved_on": 1427425264, "score": 3, "body": "Generic functions don't have to deal with inheritance and casting. They are naturally quite type safe and fast performing :-)", "id": "c02bk79", "author": "goalieca", "created_utc": "1193433647", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 3, "parent_id": "t1_c02bhsy", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 4, "controversiality": 0, "archived": true, "link_id": "t3_5z5id", "retrieved_on": 1427425295, "id": "c02bhsy", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02bhsy", "parent_id": "t3_5z5id", "body": "Ahh, I just realized why generic functions weird me out: I really like the message passing perspective on OO and I think that when it's used in an actor system it becomes a simple and powerful way of programming concurrently.\n\nLuckily, now that I know why I didn't like generic functions, I also know why there's nothing wrong with them: The generic function's creation is like adding a bunch of methods to the classes of all involved objects, and then message passing could be conceptually preserved if you just imagine it as another level of dispatch.\n\nCorollary question to CLOS users: how do you keep track of/decide where your generic functions live in your source tree?", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "Kolibri", "created_utc": "1193419889", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 5, "author": "OneAndOnlySnob", "created_utc": "1193431540", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "author_flair_text": null, "name": "t1_c02bkq6", "gilded": 0, "link_id": "t3_5z5id", "retrieved_on": 1427425257, "score": 1, "score_hidden": false, "id": "c02bkq6", "author": "[deleted]", "created_utc": "1193439330", "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "ups": 1, "parent_id": "t1_c02bjxj", "body": "[deleted]", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 6, "author": "[deleted]", "created_utc": "1193441322", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "grauenwolf", "created_utc": "1193507871", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "[deleted]", "created_utc": "1193508770", "children": [{"distinguished": null, "controversiality": 0, "retrieved_on": 1427425208, "subreddit_id": "t5_2fwo", "created_utc": "1193509420", "ups": 2, "gilded": 0, "link_id": "t3_5z5id", "downs": 0, "score": 2, "id": "c02bohp", "author": "grauenwolf", "archived": true, "author_flair_text": null, "edited": true, "body": "By visitors, I'm talking about the Visitor interface.\r\n\r\nSay you have two sets of classes, (A, B, C, N, M) and (N, M, X, Y, Z). For the sake of argument, lets say the first set is \"things on the board\" like players, monsters, equipment, and treasure. The second set is \"things that a player has\", treasure, equipment, spells, and skills.\r\n\r\nSince M and N are in two different sets, they both have to support two Visitor interfaces.\r\n ", "subreddit": "programming", "name": "t1_c02bohp", "parent_id": "t1_c02bofp", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": 1, "name": "t1_c02bofp", "controversiality": 0, "archived": true, "link_id": "t3_5z5id", "retrieved_on": 1427425210, "score_hidden": false, "id": "c02bofp", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bocs", "body": "[deleted]", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02bocs", "ups": 2, "controversiality": 0, "archived": true, "link_id": "t3_5z5id", "retrieved_on": 1427425211, "score_hidden": false, "id": "c02bocs", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02bkxg", "body": "&gt; The Visitor pattern gets the compiler to guarantee that you write each of the nine cases.\r\n\r\nAnd if you a new item, you break all the interfaces. That really sucks for versioning.\r\n\r\nWhat if you don't need all the cases? Say in the case of arg1=Map, you don't care if arg2 is a Map or a List. Or if you need to check first if arg1=UberMap? The visitor pattern doesn't handle special cases very well.\r\n\r\nAlso have to place some of the visitor logic in your data classes. If you need to support two different visitors, that is two heavy interfaces you have to add to every class.\r\n\r\nThe visitor pattern seems to make every mistake the GoF warn against in their own introduction.  ", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02bkxg", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 6, "link_id": "t3_5z5id", "retrieved_on": 1427425256, "body": "[deleted]", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02bjxj", "id": "c02bkxg", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02bjxj", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 5, "link_id": "t3_5z5id", "retrieved_on": 1427425268, "body": " I can't help but notice that the visitor pattern implementation offers no advantage over this and the visitor pattern implementation is at least 5 times more complicated.\n\nPersonally, I'd just do all the instanceof business in one function and dispatch to the correct function from there.  Done. \n\nEither way, the eval function must be aware of all types necessary to do the dispatch.  Maybe in a language like C++, where casting is a slightly riskier business...", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02bicz", "id": "c02bjxj", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02bobo", "gilded": 0, "link_id": "t3_5z5id", "retrieved_on": 1427425211, "score": 1, "body": "Look how much you have to write for just two objects. Try to scale that to a dozen, and things get messy really quick.\r\n\r\nThat said, even this is much better than the visitor pattern.", "author": "grauenwolf", "created_utc": "1193507500", "distinguished": null, "edited": false, "id": "c02bobo", "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c02bicz", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 3, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z5id", "retrieved_on": 1427425288, "body": "What about:\r\n\r\n&gt;public static boolean eval (Object o1, Object o2) { \r\n&gt;\r\n&gt;\tif (o1 instanceof List)\r\n&gt;\t{\r\n&gt;\t\teval((List)o1, o2);\r\n&gt; \t}\r\n&gt;\r\n&gt;\tif (o1 instanceof Map)\r\n&gt;\t{\r\n&gt;\t\teval((Map)o1, o2);\r\n&gt; \t}\r\n&gt;\r\n&gt;}\r\n&gt;\r\n&gt;public static boolean eval (List o1, Object o2) { \r\n&gt;\r\n&gt;\tif (o2 instanceof List)\r\n&gt;\t{\r\n&gt;\t\t...\r\n&gt;\t}\r\n&gt;\r\n&gt;\tif (o2 instanceof Map)\r\n&gt;\t{\r\n&gt;\t\t...\r\n&gt; \t}\r\n&gt;\r\n&gt;}\r\n&gt;\r\n&gt;public static boolean eval Map o1, Object o2) { \r\n&gt;\r\n&gt;\tif (o2 instanceof List)\r\n&gt;\t{\r\n&gt;\t\t...\r\n&gt; \t}\r\n&gt;\r\n&gt;\tif (o2 instanceof Map)\r\n&gt;\t{\r\n&gt;\t\t...\r\n&gt; \t}\r\n&gt;\r\n&gt;} \r\n\r\nBasically the same idea but with instanceof instead of the Visitor pattern.", "archived": true, "distinguished": null, "edited": true, "name": "t1_c02bicz", "parent_id": "t3_5z5id", "id": "c02bicz", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 6, "author": "millstone", "created_utc": "1193423583", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -1, "author": "KayEss", "created_utc": "1193471203", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1193507286", "ups": 1, "gilded": 0, "link_id": "t3_5z5id", "retrieved_on": 1427425211, "score": 1, "body": "I can see a use for it outside of generics.\r\n\r\nI have a method called Format(Control). In addition I have specific versions such as Format(TextBox), Format(Grid), Format(Label), etc.\r\n\r\nCurrently I have to have a huge If-Then-Else block in Format(control) to call the real function. This could be replaced with a simple multiple-dispatch call. ", "id": "c02bob6", "author": "grauenwolf", "author_flair_text": null, "distinguished": null, "edited": true, "archived": true, "subreddit": "programming", "name": "t1_c02bob6", "parent_id": "t1_c02bmpw", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": -1, "controversiality": 0, "archived": true, "link_id": "t3_5z5id", "retrieved_on": 1427425231, "id": "c02bmpw", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02bmpw", "parent_id": "t1_c02bius", "body": "You only need run-time multiple dispatch in Java because it doesn't have proper generics. In C++ this is handled within the compiler using static analysis of the types held in the collections.\n\nThis isn't saying that multiple dispatch isn't ever useful, but in this case it's a work around for a language limitation.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 6, "name": "t1_c02bius", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z5id", "retrieved_on": 1427425281, "score_hidden": false, "body": "I clicked on this link fully expecting to see a rant against \"monolith classes\" [a la Herb Sutter](http://www.gotw.ca/gotw/084.htm), which kills any hope of dynamicism.\n\nInstead, I found an argument for _more_ dynamicism - a fine argument for multi-dispatch and compelling examples.\n\nHerb and raganwald have the same prescription, but only raganwald argues from an object oriented perspective.  It's indeed a pity that mainstream OO languages have no multi-dispatch.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5z5id", "id": "c02bius", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 4, "author": "SuperGrade", "created_utc": "1193430630", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": 1, "gilded": 0, "link_id": "t3_5z5id", "retrieved_on": 1427425233, "score": 1, "body": "I think that the problem trying to be solved is a problem that many OO languages have in dealing with objects that need to be compared with value semantics. One way to solve this is to delegate the equivalence relationship to another class as Reg has done. I explain this much more fully [here](http://www.kirit.com/Blog:/2007-10-27/Identity%20and%20equivalence).\n\nWhat you call single dispatch syntax is slightly more subtle than that. The dispatch is single on the dynamic type of the receiver, but multiple on the static types of the arguments (at least in Java, C++ etc). This is probably sufficient for overloading on an equivalence relationship object if it weren't for the Java habit of using Object as the type of last resort (much like C uses void*).\n\nC++ avoids most of the problems that other OO languages get themselves into by 1) only allowing value semantics in the syntax; 2) making the location of the objects explicit through exposing the pointers values (so a value comparison of the pointers acts as an identity comparison for the objects); and 3) allowing user defined types to overload operator==() in an appropriate manner for the most appropriate equivalence relationship (usually the strictest one).\n\n    std::string s1( \"bob\" );\n    std::string s2( \"bob\" );\n    // value semantics\n    assert( s1 == s2 );\n    // object semantics\n    assert( &amp;s1 != &amp;s2 );\n", "id": "c02bmpd", "author": "KayEss", "created_utc": "1193470866", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02bmpd", "parent_id": "t1_c02bjtc", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 4, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z5id", "retrieved_on": 1427425269, "body": "That this usage pattern has proliferated into so much code (as a mainstream way of writing code - and something mainstream language users won't do without) is largely a legacy of C++ - that single-dispatch was the only way to have one piece of code be handed the ability to call another piece of code, that happened to marry the logistics of making sure that the lifetime of the data that that code depended on could be handled in a somewhat standardized manner.\r\n\r\nSingle-dispatch syntax (having function(this, a, b) be called via this.function(a, b)) chooses an arbitrary number of its parameters to drive the call, tying it in an unholy way with data.\r\n\r\nThat said, languages like C#, which must retain mainstream acceptance but offer a \"way out\", are offering kludges to help transition away from this (extension \"methods\"), etc.  C#3.0 does not, however, remove the requirement of qualifying calls to static methods (making them always more verbose than an instance call).\r\n\r\n\r\nWhat the article does not mention is that the \"object\"-centric functions tend to lead in practice to messes of loosely associated data in a single class, where a class will contain A, B and C to acommodate a func1(A, B) and func2(B, C) - and the cruft and architectural defect snowballs from there.\r\n\r\n", "archived": true, "distinguished": null, "edited": true, "name": "t1_c02bjtc", "parent_id": "t3_5z5id", "id": "c02bjtc", "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427425027, "subreddit_id": "t5_2fwo", "archived": true, "gilded": 0, "link_id": "t3_5z5id", "downs": 0, "score": 1, "score_hidden": false, "body": "&gt;should objects be responsible for all of their own behaviour?  \nStrawman.  \n\nNot all algorithms need to be implemented on all data types - there are higher level abstractions.  I mean, do you implement quicksort on Integer?  Wrong place for it.  Comparison, sure.  Quicksort might go on the container.  Perhaps it belongs on a CollectionSorter that works on all kinds of ordered collections - lots of ways to slice it.  But otherwise, I find the author to be really stretching things with this line of discussion.  \n\nI call BS.", "author": "cyancynic", "created_utc": "1193704046", "distinguished": null, "edited": true, "id": "c02c2h9", "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t3_5z5id", "name": "t1_c02c2h9", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 8, "author": "jbellis", "created_utc": "1193290653", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 7, "author": "simonw", "created_utc": "1193297394", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": -10, "gilded": 0, "link_id": "t3_5z2kb", "retrieved_on": 1427425429, "score": -10, "body": "  no, it was useful in illustrating the mountains of crud you get when you allow inexperienced egotistical idiots to design your infrastructure.\n  ", "author": "qwe1234", "created_utc": "1193299537", "distinguished": null, "edited": true, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02b7gv", "parent_id": "t1_c02b7cw", "score_hidden": false, "id": "c02b7gv"}], "subreddit": "programming", "ups": 7, "score_hidden": false, "controversiality": 0, "archived": true, "link_id": "t3_5z2kb", "retrieved_on": 1427425430, "id": "c02b7cw", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02b7cw", "parent_id": "t1_c02b700", "body": "I've sure I've seen REST-style web services that let you bundle multiple requests in to a single HTTP request - it would be nice to see CouchDB support that as an optimisation.\n\nThat said, the solution posed in the article was really useful in understanding how you have to change the way you think about data retrieval once you move away from the standard relational database model.", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 4, "author": "cmlenz", "created_utc": "1193303594", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "jbellis", "created_utc": "1193318979", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": 1, "gilded": 0, "link_id": "t3_5z2kb", "retrieved_on": 1427425416, "score": 1, "body": "[deleted]", "author": "[deleted]", "created_utc": "1193319140", "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02b8ko", "parent_id": "t1_c02b8jv", "score_hidden": false, "id": "c02b8ko"}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "[deleted]", "created_utc": "1193321959", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "jbellis", "created_utc": "1193324818", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "[deleted]", "created_utc": "1193327629", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "jbellis", "created_utc": "1193328165", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "[deleted]", "created_utc": "1193328402", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "jbellis", "created_utc": "1193328648", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "[deleted]", "created_utc": "1193329078", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193329973", "name": "t1_c02ba1i", "gilded": 0, "link_id": "t3_5z2kb", "retrieved_on": 1427425396, "score": 2, "score_hidden": false, "body": "I'll answer that backwards.\r\n\r\n&gt; If not, what is it that makes this an \"ugly hack\"?\r\n\r\nThe part about mixing heterogenous data types in a single list.\r\n\r\n&gt; Would it still be a poor example if SQL had syntax for this?\r\n\r\nThe answer to this is similar to the answer I'd give a Java engineer who thinks my inability to give an analog to Java's \"private\" in Python highlights a deficiency in Python: returning row 0 with different column definitions as rows 1-N is such a poor fit with the rest of the language that it's hard to imagine using it if somehow someone hacked it in.\r\n\r\nSo, no...  but yes. :)\r\n", "author": "jbellis", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 2, "parent_id": "t1_c02b9x8", "id": "c02ba1i", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 1, "score_hidden": false, "controversiality": 0, "archived": true, "link_id": "t3_5z2kb", "retrieved_on": 1427425397, "id": "c02b9x8", "author_flair_text": null, "distinguished": null, "edited": true, "name": "t1_c02b9x8", "parent_id": "t1_c02b9uv", "body": " Let's try again: Would it still be a poor example if SQL had syntax for this?  If not, what is it that makes this an \"ugly hack\"?", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 1, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z2kb", "retrieved_on": 1427425398, "body": "The part of my post you originally quoted as objectionable was \"this isn't a situation where you'd use a join in SQL.\"\r\n\r\nIf you've given up on that and want to switch tactics to attack something else I wrote, please start another subthread; it's less confusing. :)\r\n", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02b9uv", "parent_id": "t1_c02b9tn", "id": "c02b9uv", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 1, "score_hidden": false, "controversiality": 0, "archived": true, "link_id": "t3_5z2kb", "retrieved_on": 1427425399, "id": "c02b9tn", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02b9tn", "parent_id": "t1_c02b9sh", "body": "With the jbellis that wrote \"it's very poor style because this will definitely make maintenance harder\" and \"the per-request overhead /.../ forces you to use ugly hacks\"?  Possibly.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 1, "name": "t1_c02b9sh", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z2kb", "retrieved_on": 1427425399, "score_hidden": false, "body": "I think you're conflating me with the other guy in this thread.\r\n\r\nI'm the one saying that this is not a good example of where you would use a join in SQL systems.  Not the one saying that using 0 and 1 as sort keys is bad.\r\n", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02b9po", "id": "c02b9sh", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "jbellis", "created_utc": "1193328420", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "[deleted]", "created_utc": "1193328985", "children": [{"controversiality": 0, "retrieved_on": 1427425397, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02b9yw", "gilded": 0, "link_id": "t3_5z2kb", "downs": 0, "score": 1, "score_hidden": false, "body": "&gt; That's a bit misleading. In cmlenz example, posts and comments aren't radically different objects; they share most of the attributes.\r\n\r\nI guess that is the crux of our disagreement -- I see that as an artifact of an overly simplified example.  \r\n\r\nIn a typical real system, you can tag posts, but not comments; posts can have trackbacks as well as comments; comments will not have a title; etc.", "author": "jbellis", "created_utc": "1193329430", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c02b9wo", "id": "c02b9yw", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 1, "name": "t1_c02b9wo", "controversiality": 0, "archived": true, "link_id": "t3_5z2kb", "retrieved_on": 1427425397, "score_hidden": false, "id": "c02b9wo", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02b9ts", "body": "That's a bit misleading.  In cmlenz example, posts and comments aren't radically different objects; they share most of the attributes.  Try changing \"favorites\" to \"friends\", and you get a little closer.", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 1, "controversiality": 0, "archived": true, "link_id": "t3_5z2kb", "retrieved_on": 1427425398, "id": "c02b9ts", "author_flair_text": null, "distinguished": null, "edited": true, "name": "t1_c02b9ts", "parent_id": "t1_c02b9po", "body": " But, I will answer the question: Bad.\r\n\r\nHere's one for you -- pick the one most likely to cause problems:\r\n\r\n    L = ['Jonathan'] + range(10)\r\n    foo(L)\r\n\r\nor\r\n\r\n    foo('Jonathan', range(10))\r\n\r\nor\r\n\r\n    foo({'name': 'Jonathan', 'favorites': range(10)})\r\n\r\nfor appropriate (different) definitions of foo, of course.  ", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 1, "score_hidden": false, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z2kb", "retrieved_on": 1427425401, "body": " Let's try again: Would it still be a poor example if you could do this in SQL? \n\nOr, related: Is this good or bad style:\n\n    #define FIRST 0\n    #define SECOND 1 \n\n?", "archived": true, "distinguished": null, "edited": true, "name": "t1_c02b9po", "parent_id": "t1_c02b9ba", "id": "c02b9po", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "name": "t1_c02b9ba", "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5z2kb", "retrieved_on": 1427425405, "id": "c02b9ba", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02b8y7", "body": "&gt; There's a bit too much \"this sucks because it isn't how I'm used to do things\" in your comments here, really.\r\n\r\nI don't see how this follows from me asking for an example where a join would make sense when \"the whole point was to show ... a join.\"  But if wanting to compare apples to applies is a sign of ossified thinking then I suppose I'm guilty.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02b8y7", "ups": 1, "controversiality": 0, "archived": true, "link_id": "t3_5z2kb", "retrieved_on": 1427425410, "score_hidden": false, "id": "c02b8y7", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02b8jv", "body": "&gt; Then it's a poor example, because as you noted, this isn't a situation where you'd use a join in SQL.\n\nWould it still be a poor example if you *could* do this in SQL?  There's a bit too much \"this sucks because it isn't how I'm used to do things\" in your comments here, really.", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02b8jv", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 3, "link_id": "t3_5z2kb", "retrieved_on": 1427425416, "body": " &gt; Of course using separate fetches could be considered cleaner, but the whole point of the post was to show how you can put related information into separate documents, and still fetch all that information with a single request (i.e. do a \"join\").\r\n\r\nThen it's a poor example, because as you noted, this isn't a situation where you'd use a join in SQL.\r\n\r\nA better example might be, \"how do I fetch posts and the number of comments, for the top 20 most comments, with one query.\" \r\n\r\n&gt; at some point you'll need to start cutting down the number of requests\r\n\r\nOr use a back end where the per-request overhead isn't so high that it forces you to use ugly hacks to get decent throughput. :)\r\n", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02b7nk", "id": "c02b8jv", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425408, "subreddit_id": "t5_2fwo", "author_flair_text": null, "name": "t1_c02b92q", "gilded": 0, "link_id": "t3_5z2kb", "downs": 0, "score": 3, "score_hidden": false, "id": "c02b92q", "author": "[deleted]", "created_utc": "1193322945", "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "ups": 3, "parent_id": "t1_c02b7nk", "body": "You wouldn't do a JOIN to solve this problem in SQL.  Since you know the unique ID for the post and since each comment is attached to a single post, two SQL queries would be better.  There's no need to go asking the database to figure out which comments are connected to which posts when you already know the answer.  Two SQL queries and you are done.   \n\nTo make the SQL overhead low you'd probably PREPARE two SQL statements (post look up and comment look up) first and then just EXECUTE them when necessary.\n\nThis blog post is clearly optimizing around a problem where GET requests are high latency.  That's the problem to deal with (perhaps with an alternative API which allows multiple view  lookups in a single HTTP query).  In fact, it would probably be easy to write code to wrap the existing view interface into something that accepts an HTTP POST looking up multiple views.\n\nJohn.\n", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425391, "subreddit_id": "t5_2fwo", "created_utc": "1193332561", "ups": 2, "gilded": 0, "link_id": "t3_5z2kb", "downs": 0, "score": 2, "body": "&gt; Also, compare to using a similar join in SQL, you'd get the data from the post repeated for every comment. That's ugly (and inefficient).\n\nnot necessarily.  if you're using a live cursor to fetch results, you fetch the post on the first row only; then, you don't fetch those columns for subsequent rows.  if the database client API knows not to pre-buffer things that aren't fetched, theres no overhead for all those \"repeated\" rows.", "author": "zzzeek", "archived": true, "distinguished": null, "edited": false, "id": "c02baef", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02baef", "parent_id": "t1_c02b7nk", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 4, "name": "t1_c02b7nk", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z2kb", "retrieved_on": 1427425427, "score_hidden": false, "body": "&gt; Wow, that sounds really ugly.\n\nI don't agree. Of course using separate fetches *could* be considered cleaner, but the whole point of the post was to show how you can put related information into separate documents, and still fetch all that information with a single request (i.e. do a \"join\").\n\nAlso, compare to using a similar join in SQL, you'd get the data from the post repeated for every comment. That's ugly (and inefficient).\n\n&gt; Is CouchDB GET latency so high that \"naive solution 2,\" of issuing two GETs, is really a nonstarter?\n\nUm, no, but extrapolate a bit and we may be talking about 100 vs 25 requests, and at some point you'll need to start cutting down the number of requests.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02b700", "id": "c02b7nk", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 3, "gilded": 0, "link_id": "t3_5z2kb", "retrieved_on": 1427425426, "score": 3, "id": "c02b7rp", "author": "bobfunk", "created_utc": "1193306773", "distinguished": null, "edited": false, "body": "Seems to me that it would actually be far wiser to really take advantage of HTTP and REST, and go for naive solution 2. \n\nIn this way you can pop in squid or some other commodity proxy cache, and get caching for free - if CouchDB have any kind of support for the HTTP caching standards. Anybody knows if this is the case? If not CouchDB is really missing out on one of the major advantages of REST...", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02b7rp", "parent_id": "t1_c02b700", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02b700", "ups": 8, "controversiality": 0, "archived": true, "link_id": "t3_5z2kb", "retrieved_on": 1427425436, "score_hidden": false, "id": "c02b700", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t3_5z2kb", "body": " &gt; when you get back the results from this view for a specific post, you'll know that the first row contains the data for the blog post itself, and the remaining rows contain the comment data.\r\n\r\nWow, that sounds really ugly.\r\n\r\nPython will let you do this (create a list of Foo and Bars, intermingled) but it's very poor style because this will definitely make maintenance harder, and probably sooner than later.\r\n\r\nIs CouchDB GET latency so high that \"naive solution 2,\" of issuing two GETs, is really a nonstarter? ", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "[deleted]", "created_utc": "1193315447", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "[deleted]", "created_utc": "1193322126", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 5, "author": "[deleted]", "created_utc": "1193322394", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "author_flair_text": null, "name": "t1_c02b9ii", "gilded": 0, "link_id": "t3_5z2kb", "retrieved_on": 1427425403, "score": 2, "score_hidden": false, "id": "c02b9ii", "author": "llimllib", "created_utc": "1193326281", "distinguished": null, "edited": true, "archived": true, "subreddit": "programming", "ups": 2, "parent_id": "t1_c02b902", "body": " So what would an ideal solution look like? Is two GETs really ideal?", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425393, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02ba9a", "gilded": 0, "link_id": "t3_5z2kb", "downs": 0, "score": 3, "score_hidden": false, "id": "c02ba9a", "author": "pivo", "created_utc": "1193331417", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 3, "parent_id": "t1_c02b902", "body": "It'd be nice if you could replace the 0 and 1 with Lisp or Erlang style symbols, e.g: \n\n[doc._id, 'post] or just [doc._id, post]\n\nI suppose you could just double quote the value, i.e., use a string to convey meaning.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 5, "controversiality": 0, "archived": true, "link_id": "t3_5z2kb", "retrieved_on": 1427425409, "id": "c02b902", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02b902", "parent_id": "t1_c02b8z0", "body": "They are special in this case because they have a meaning 0 = Post, 1 = Comment and there's only one Post and there are many Comments.   Sure, they are just numbers, but if a second programmer comes along they've got to understand the meaning of those numbers to understand the operation of the code.\n\nThey are magic numbers used to hack a solution from CouchDB to the 'problem' of doing two GETs.\n\nJohn.\n", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "name": "t1_c02b8z0", "controversiality": 0, "author_flair_text": null, "ups": 3, "link_id": "t3_5z2kb", "retrieved_on": 1427425410, "body": "&gt; If you add this special value (0,1) then things come back in the right order and we 'know' that the first one is the post vs the comment.\n\nEh?  What's so \"special\" about ordinals?", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02b87w", "id": "c02b8z0", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "author_flair_text": null, "gilded": 0, "link_id": "t3_5z2kb", "retrieved_on": 1427425351, "score": 1, "created_utc": "1193356603", "score_hidden": false, "id": "c02bdir", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "body": "[deleted]", "subreddit": "programming", "ups": 1, "parent_id": "t1_c02b87w", "name": "t1_c02bdir", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02b87w", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5z2kb", "retrieved_on": 1427425419, "id": "c02b87w", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t3_5z2kb", "body": "This feels like an ugly hack to me.  If you add this special value (0,1) then things come back in the right order and we 'know' that the first one is the post vs the comment.\n\nWhat's so bad about two GETs.  In SQL you'd probably implement this as a Posts table and a Comments table and hit the database with two queries to get then Post information and the comments separately.\n\nThis sounds more like an unnecessary optimization, or an optimization that is necessary because GET latency is high in CouchDB.\n\nJohn.\n", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 5, "author": "skorgu", "created_utc": "1193316909", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "jbellis", "created_utc": "1193339360", "children": [{"body": "Why not? \n\nObviously whether you do so or not is dictated by the specifics of your application. If the data is very common and infrequently calculated (top 10 blah), hopefully you're memcaching it, so you wouldn't be hitting the DB every time anyway. The guestimate could even be held entirely in cache since it's not really persistent. \n\nIf it's an internal reporting page that has an audience of two on the other hand making one giant view might make sense. All your logic is in the view, the requester only has to display it. Or it might not. \n\nMy point, of course, is that scale changes the answer to every question, sometimes in nonintuitive ways.", "controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193340526", "gilded": 0, "link_id": "t3_5z2kb", "retrieved_on": 1427425376, "score": 3, "score_hidden": false, "id": "c02bbjk", "author": "skorgu", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 3, "parent_id": "t1_c02bbdj", "name": "t1_c02bbjk", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 1, "controversiality": 0, "archived": true, "link_id": "t3_5z2kb", "retrieved_on": 1427425378, "id": "c02bbdj", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02bbdj", "parent_id": "t1_c02b8bz", "body": "&gt; you really want the post AND the comments, why split the request up?\r\n\r\nSo if I have a page where I want post, comments, top 10 most-read posts, top 10 hot comments, and a guestimate at readers online, that should all be one request too?", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02b8bz", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 5, "link_id": "t3_5z2kb", "retrieved_on": 1427425418, "body": "I think the syntax is a bit yucky, it might be nice to sugar this up with some js cleverness. Seems to me the semantics are clearer the \"couchdb way,\" you really want the post AND the comments, why split the request up?", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5z2kb", "id": "c02b8bz", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "author_flair_text": null, "name": "t1_c02bac8", "gilded": 0, "link_id": "t3_5z2kb", "retrieved_on": 1427425392, "score": 1, "score_hidden": false, "body": "Thinking the new CatchPhrase way", "author": "[deleted]", "created_utc": "1193332140", "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "ups": 1, "parent_id": "t3_5z2kb", "id": "c02bac8", "author_flair_css_class": null}
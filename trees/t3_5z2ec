{"controversiality": 0, "retrieved_on": 1427425439, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02b6q7", "gilded": 0, "link_id": "t3_5z2ec", "downs": 0, "score": 9, "score_hidden": false, "body": "Author should have used MvScheme instead, it makes renaming files much easier.", "author": "ubernostrum", "created_utc": "1193286364", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 9, "parent_id": "t3_5z2ec", "id": "c02b6q7", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 5, "author": "rkts", "created_utc": "1193287998", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "OMouse", "created_utc": "1193289873", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 4, "author": "rkts", "created_utc": "1193292913", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 8, "author": "ayrnieu", "created_utc": "1193295695", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02b8db", "gilded": 0, "link_id": "t3_5z2ec", "retrieved_on": 1427425417, "score": 0, "body": "&gt;Most unfortunately, the author writes this:\n&gt;...\n&gt;So you don't have an apples-to-apples impression.\n\nI'm not sure what you mean by that.\n", "author": "OMouse", "created_utc": "1193317323", "distinguished": null, "edited": false, "id": "c02b8db", "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 0, "parent_id": "t1_c02b7a0", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "name": "t1_c02b7a0", "controversiality": 0, "author_flair_text": null, "ups": 8, "link_id": "t3_5z2ec", "retrieved_on": 1427425432, "body": "&gt; You shouldn't use a complex programming language when a small script will do the job.\r\n\r\nWhat I *should* do depends on my investments, which for these purposes are in Perl -- and not in sed, and only shallowly in sh.  Someone with none of these investments may choose zsh+sed as requiring less to master -- or may choose Perl, due to it having a proper superset of utility.\r\n\r\n&gt; complex programming language\r\n\r\nThe author didn't simply say \"let's rename these files... OK!\"  He seemed instead to want to prove that Scheme could do this, and morever wanted to write pretty *commented* well-structured generic Scheme code.  Most unfortunately, the author writes this:\r\n\r\n&gt; The other day, I wrote a small Python script to replace specific lines in certain files. When I wrote it, all I could think about was fixing the damned files. It was so easy that I didn\u2019t think about how I would do this in the future for other types of files if I needed to. The answer is simple: make a function that takes a filename and a list of lists where each sub-list contains the string to match and the string to replace it with. This answer came easily after the pressure was off. But with Scheme, I am always looking for macros and functions to create to ease potential problems I may have.\r\n\r\nSo you don't have an apples-to-apples impression.  ", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02b74h", "id": "c02b7a0", "author_flair_css_class": null}, {"distinguished": null, "controversiality": 0, "downs": 0, "subreddit": "programming", "ups": 2, "archived": true, "name": "t1_c02b8dw", "gilded": 0, "link_id": "t3_5z2ec", "retrieved_on": 1427425417, "score": 2, "id": "c02b8dw", "author": "OMouse", "created_utc": "1193317473", "author_flair_text": null, "edited": false, "subreddit_id": "t5_2fwo", "score_hidden": false, "parent_id": "t1_c02b74h", "body": "&gt;Tasks like this are exactly what the command line utilities are for. You shouldn't use a complex programming language when a small script will do the job.\n\nIndeed. Maybe I should have shown off [Scheme Shell](http://www.scsh.net/) instead?", "author_flair_css_class": null}], "subreddit": "programming", "ups": 4, "name": "t1_c02b74h", "controversiality": 0, "archived": true, "link_id": "t3_5z2ec", "retrieved_on": 1427425434, "score_hidden": false, "id": "c02b74h", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02b6ys", "body": "Tasks like this are exactly what the command line utilities are for.  You shouldn't use a complex programming language when a small script will do the job.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02b6ys", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5z2ec", "retrieved_on": 1427425436, "id": "c02b6ys", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02b6uw", "body": "But...but you're using an external program! No fair!", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "name": "t1_c02b6uw", "controversiality": 0, "archived": true, "ups": 5, "link_id": "t3_5z2ec", "retrieved_on": 1427425437, "id": "c02b6uw", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t3_5z2ec", "body": "As usual, shell scripts win.  In zsh:\n\n    coll=\"Canada Day\"\n    for file in DSC*.[jJ][pP][gG]; do\n        y_m=`sed -nE 's/.*Exif.+([0-9]{4}):([0-9]{2}).*/\\1_\\2/p' $file`\n        mv -i $file \"$coll [$y_m] $file\"\n    done", "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427425430, "subreddit_id": "t5_2fwo", "created_utc": "1193298356", "ups": 1, "gilded": 0, "link_id": "t3_5z2ec", "downs": 0, "score": 1, "body": "[deleted]", "author": "[deleted]", "author_flair_text": null, "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit": "programming", "name": "t1_c02b7em", "parent_id": "t3_5z2ec", "score_hidden": false, "id": "c02b7em"}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 11, "author": "bonzinip", "created_utc": "1193298430", "children": [{"controversiality": 0, "retrieved_on": 1427425417, "subreddit_id": "t5_2fwo", "created_utc": "1193317424", "ups": 0, "gilded": 0, "link_id": "t3_5z2ec", "downs": 0, "score": 0, "id": "c02b8do", "author": "OMouse", "archived": true, "distinguished": null, "edited": true, "author_flair_text": null, "subreddit": "programming", "score_hidden": false, "name": "t1_c02b8do", "parent_id": "t1_c02b7ep", "body": "Now I *really* want to learn Smalltalk...\n\n*edit: No sarcasm intended. I have GNU Smalltalk installed on my machine! I also have Squeak :D*", "author_flair_css_class": null}], "subreddit": "programming", "ups": 11, "name": "t1_c02b7ep", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z2ec", "retrieved_on": 1427425430, "score_hidden": false, "id": "c02b7ep", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5z2ec", "body": "GNU Smalltalk:\n\n    (Directory name: 'pictures') allFilesMatching: 'DSC*.JPG' do: [ :file |\n        (file readStream next: 2000) =~ 'Exif(?:.*\\n+)+(\\d\\d\\d\\d):(\\d\\d):\\d\\d.\\d\\d:\\d\\d:\\d\\d'\n            ifMatched: [ :results |\n                file renameTo: ('Canada Day [%1_%2] %3' %\n                    { results at: 1.  results at: 2.  file name } ] ]\n    ]", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 3, "gilded": 0, "link_id": "t3_5z2ec", "retrieved_on": 1427425417, "score": 3, "id": "c02b8dn", "author": "ozzilee", "created_utc": "1193317422", "distinguished": null, "edited": true, "body": " In a slightly different style, with Chicken Scheme. I'm sure someone that knew it better than I could shorten it up a bit more.\n\n    (use regex posix)\n\n    (let* ((image-collection-name \"Canada Day\")\n           (exif-datetime-regexp \"Exif.+(\\\\d{4}):(\\\\d{2}):(\\\\d{2}).(\\\\d{2}):(\\\\d{2}):(\\\\d{2})\")\n           (name-maker (lambda (file winner)\n                         (format \"~a [~a_~a] ~a\"\n                                 image-collection-name\n                                 (list-ref winner 1)\n                                 (list-ref winner 2)\n                                 (path-&gt;string file))))\n           (renamer (lambda (file)\n                      (let ((winner (string-search exif-datetime-regexp (read-all file))))\n                        (if winner (rename-file file (name-maker file winner)))))))\n      (for-each renamer (glob \"DSC*.[jJ][pP][gG]\")))\n\n\n(edit: Fixed a mistake. Did I mention I didn't test this?)\n ", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02b8dn", "parent_id": "t3_5z2ec", "score_hidden": false, "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "ups": 3, "author_flair_text": null, "name": "t1_c02b8g1", "gilded": 0, "link_id": "t3_5z2ec", "retrieved_on": 1427425416, "score": 3, "id": "c02b8g1", "author": "eegreg", "created_utc": "1193318071", "distinguished": null, "edited": true, "archived": true, "subreddit_id": "t5_2fwo", "score_hidden": false, "parent_id": "t3_5z2ec", "body": "  Ruby\n\n    dd = '(?:\\d\\d)'\n    regexp = /.*Exif.+(\\d{4}):(\\d\\d):#{dd}.#{dd}:#{dd}:#{dd}/ \n    coll=\"Canada Day\"\n\n    Dir[ 'DSC*.[jJ][pP][gG]' ].each do |file|\n      if( y_m = File.read(file) =~ regexp )\n        File.mv file \"#{coll} #{y_m[1..2]} #{file}\"\n      end\n    end\n\nI don't think lisp is ever going to win this one unless someone creates a DSL in it that is perl/shell like.  Maybe his problem is that he was writing scripts in Python, which is not as well designed for this domain as Ruby/Perl/shell   ", "author_flair_css_class": null}
{"distinguished": null, "controversiality": 0, "downs": 0, "subreddit": "programming", "ups": 2, "archived": true, "name": "t1_c02b8s4", "gilded": 0, "link_id": "t3_5z2ec", "retrieved_on": 1427425412, "score": 2, "id": "c02b8s4", "author": "pkrumins", "created_utc": "1193320755", "author_flair_text": null, "edited": false, "subreddit_id": "t5_2fwo", "score_hidden": false, "parent_id": "t3_5z2ec", "body": "YYYY:MM:DD hh:mm:ss\n\nThus our regular-expression will look like this:\n    Exif.+(\\\\d{4}):(\\\\d{2}):(\\\\d{2}).(\\\\d{2}):(\\\\d{2}):(\\\\d{2})\n\nNo!\n\nDate::Parse\n\nYes!", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "berlinbrown", "created_utc": "1193435214", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 9, "author": "yosefk", "created_utc": "1193490698", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -2, "author": "deong", "created_utc": "1193505449", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "yosefk", "created_utc": "1193515480", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "deong", "created_utc": "1193530569", "children": [{"controversiality": 0, "retrieved_on": 1427425182, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02bqj7", "gilded": 0, "link_id": "t3_5z7jr", "downs": 0, "score": 4, "score_hidden": false, "id": "c02bqj7", "author": "yosefk", "created_utc": "1193537060", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 4, "parent_id": "t1_c02bq4g", "body": "Well, there's a difference between \"wrong\" and \"stupid\":\n\nhttp://yosefk.com/c++fqa/faq.html#faq-15\n\nAs to the general tone - I didn't want you to fall asleep:\n\nhttp://yosefk.com/c++fqa/faq.html#faq-6\n\nI think that C++ is a horrible thing which could only be made by great programmers...\n\nThanks for your reply!", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02bq4g", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5z7jr", "retrieved_on": 1427425188, "id": "c02bq4g", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bozv", "body": "It seemed to be implied by the general tone, but I apologize if I misread you.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 3, "score_hidden": false, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z7jr", "retrieved_on": 1427425203, "body": "I never called anyone stupid in the FQA, and I didn't think that, either.\n\nLots of people have bad things to say about C++. If all you care about is who says something, not what they say and why, check out what Linus Torvalds recently said about C++. There are many more \"celebrity programmers\" who don't like C++ very much, to say the least.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02bozv", "parent_id": "t1_c02bo6g", "id": "c02bozv", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": -2, "name": "t1_c02bo6g", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z7jr", "retrieved_on": 1427425212, "score_hidden": false, "body": "&gt; The main ingredient for the recipe is someone who has worked a lot in those languages, and can't say anything good about them. Nothing.\n\nAnd there's your problem.  If you can say literally nothing good about such a widely used and accepted tool, then I as a reader am left with two possible interpretations, one of which is that you are the only reasonable voice in a world that also contains many people who have proven themselves to be knowledgeable and worthy sources of information.  No surprise, I'm going to go with the other one.\n\nThe reason why Peter Norvig's stuff is simply better than yours has very little to do with the choice of subject.  Were he to tackle a C++ IAQ, it would not resemble yours in any recognizable way.  The reason is that he recognizes that the answer to a given question is almost never \"because they are stupid.\"", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02bnb5", "id": "c02bo6g", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "joaomc", "created_utc": "1193507001", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "yosefk", "created_utc": "1193536750", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": 1, "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425154, "score": 1, "body": "Oh, when I said \"they chose\" I really meant \"they chose or just have to work with\". ", "author": "joaomc", "created_utc": "1193583596", "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02bsoj", "parent_id": "t1_c02bqii", "score_hidden": false, "id": "c02bsoj"}], "subreddit_id": "t5_2fwo", "name": "t1_c02bqii", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 2, "link_id": "t3_5z7jr", "retrieved_on": 1427425182, "id": "c02bqii", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02boag", "body": "\"Chose\"? Do you think you can chose Lisp at Google?\n\nThe tool analogy is critically flawed:\n\nhttp://yosefk.com/c++fqa/faq.html#faq-11", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193567450", "name": "t1_c02bs4s", "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425161, "score": 1, "score_hidden": false, "id": "c02bs4s", "author": "bart2019", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c02boag", "body": "The problem is not with tools people choose, but with tools that other people chose for them.", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02boag", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5z7jr", "retrieved_on": 1427425211, "id": "c02boag", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bnb5", "body": "That's because most of them don't want to waste lots of time saying bad things about the tools they chose. They probably have better things to do. ", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 2, "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425161, "score": 2, "body": "&gt;The main ingredient for the recipe is someone who has worked a lot in those languages, and can't say anything good about them.\n\nSurely there must be enough people who are in the same boat but with Java.  :)\n\nSee [a critique of Java](http://www.uclic.ucl.ac.uk/harold/srf/javaspae.html) for what's bad about Java. The Lame Duck example really stuck with me.", "author": "bart2019", "created_utc": "1193567336", "distinguished": null, "edited": false, "id": "c02bs4p", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02bs4p", "parent_id": "t1_c02bnb5", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02bnb5", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 9, "link_id": "t3_5z7jr", "retrieved_on": 1427425224, "body": "The main ingredient for the recipe is someone who has worked a lot in those languages, and can't say anything good about them. Nothing. This almost never happens - people get really attached to their tools, especially if the tools require a certain investment from them. And the person must have lots of bad things to say about the language(s), and want to say them badly enough to waste lots of time. I seriously doubt you'll find your guy.\n\nThere's a Java IAQ and a Python IAQ by Peter Norvig. Compare them to the FQA, and you'll see what I mean.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02bkdu", "id": "c02bnb5", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02bkdu", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 2, "link_id": "t3_5z7jr", "retrieved_on": 1427425262, "id": "c02bkdu", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5z7jr", "body": "That is awesome.  Now, we need a java, php and ruby version", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -4, "author": "[deleted]", "created_utc": "1193436138", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "Jimmy", "created_utc": "1193438291", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "[deleted]", "created_utc": "1193452898", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": 3, "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425241, "score": 3, "body": "Tell GE chemical that; they'd wonder what ran many of their production systems.\n\nedit: my response was to a version of f0dder's post that said something more like \"no\" serious commercial applications had been written in Smalltalk.", "id": "c02blxw", "author": "sblinn", "created_utc": "1193454568", "distinguished": null, "edited": true, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02blxw", "parent_id": "t1_c02blua", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": 0, "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425237, "score": 0, "body": "Popular != good", "id": "c02bmae", "author": "OMouse", "created_utc": "1193460498", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02bmae", "parent_id": "t1_c02blua", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193482559", "ups": 4, "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425227, "score": 4, "score_hidden": false, "id": "c02bn26", "author": "Jimmy", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02bn26", "parent_id": "t1_c02blua", "body": "Why does it matter?  For various political reasons, C++ wound up as the dominant language, and Smalltalk didn't.  That doesn't say anything about the quality of the two languages.", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193501759", "name": "t1_c02bnwd", "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425217, "score": 2, "score_hidden": false, "id": "c02bnwd", "author": "death", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 2, "parent_id": "t1_c02blua", "body": "Hello, f0dder :)\n\nI disagree.  The number of serious commercial applications developed in a language is irrelevant to the potential expressiveness gained via its primitive expressions, means of combination, and means of abstraction.  I hope you'll change your mind on this, as might is not necessarily right.  Jimmy has a good point about C++'s complexity.  Though I would certainly not say it's \"unneeded\"--a primary goal of Stroustrup was compatibility with C--it is one of C++'s biggest problems, in my opinion.", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 3, "controversiality": 0, "archived": true, "link_id": "t3_5z7jr", "retrieved_on": 1427425244, "id": "c02blua", "author_flair_text": null, "distinguished": null, "edited": true, "name": "t1_c02blua", "parent_id": "t1_c02bkmq", "body": "[deleted]", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 11, "author": "Ringo48", "created_utc": "1193454740", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -8, "author": "OMouse", "created_utc": "1193460472", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": 1, "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425233, "score": 1, "body": "Hitting self-hosting is a big goal for most languages; I can't think of any major languages whose (main) compiler isn't in the language itself.\n\nInterpreters are a different matter, of course.", "id": "c02bmmp", "author": "reventlov", "created_utc": "1193469079", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02bmmp", "parent_id": "t1_c02bmac", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": -8, "name": "t1_c02bmac", "controversiality": 0, "archived": true, "link_id": "t3_5z7jr", "retrieved_on": 1427425237, "score_hidden": false, "id": "c02bmac", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02blyj", "body": "&gt;The entire point of C++ was to bring higher level features like object orientation to a fast low level language, but keep the performance and low level features for when they're needed. It does that better than any other language created so far.\n\nOnly because current hardware isn't built with Smalltalk in mind.\n\n&gt;How many commercial video games are written in Smalltalk (or Ruby, Python, Java, ...)? The answer is none, because their performance would suck.\n\nIf the hardware were optimized for it then you would see a lot of them.\n\n&gt;How many compilers and runtime environments are written in Smalltalk? Not many. How many are written in C++? Most of them.\n\nIs there any wonder why? The compiler writers can't wait to stop coding C++! Why try and write a compiler for a language when you're already using the perfect one (Smalltalk/Lisp/Haskell)?", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "reventlov", "created_utc": "1193468871", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "null_vector", "created_utc": "1193470083", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "author_flair_text": null, "name": "t1_c02bndo", "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425223, "score": 1, "score_hidden": false, "id": "c02bndo", "author": "beza1e1", "created_utc": "1193492120", "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "ups": 1, "parent_id": "t1_c02bmo7", "body": "No, some parts are written in Erlang now. ;)", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 3, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z7jr", "retrieved_on": 1427425233, "body": "So EVE Online is written entirely in (stackless) python? \n\nWOW. Congrats to them.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02bmo7", "parent_id": "t1_c02bmme", "id": "c02bmo7", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "Ringo48", "created_utc": "1193539019", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "reventlov", "created_utc": "1193539422", "children": [{"controversiality": 0, "retrieved_on": 1427425178, "subreddit_id": "t5_2fwo", "created_utc": "1193542331", "ups": 1, "gilded": 0, "link_id": "t3_5z7jr", "downs": 0, "score": 1, "body": "I didn't say it did.", "author": "Ringo48", "archived": true, "distinguished": null, "edited": false, "id": "c02bquw", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02bquw", "parent_id": "t1_c02bqob", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 2, "score_hidden": false, "controversiality": 0, "archived": true, "link_id": "t3_5z7jr", "retrieved_on": 1427425180, "id": "c02bqob", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02bqob", "parent_id": "t1_c02bqni", "body": "Care to guess what Python doesn't have?  A compiler.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02bqni", "ups": 0, "controversiality": 0, "archived": true, "link_id": "t3_5z7jr", "retrieved_on": 1427425180, "score_hidden": false, "id": "c02bqni", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bmme", "body": "Care to guess what Python is written in?  It's not Python...\n\nhttp://svn.python.org/view/python/trunk/Python/", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 2, "name": "t1_c02bmme", "controversiality": 0, "archived": true, "link_id": "t3_5z7jr", "retrieved_on": 1427425233, "score_hidden": false, "id": "c02bmme", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02blyj", "body": "Off the top of my head:\n\nEVE Online: Python\n\nCrash Bandicoot: Lisp\n\n(And my understanding is that most are written in a mix of C++ and [insert scripting language].)", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02blyj", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 11, "link_id": "t3_5z7jr", "retrieved_on": 1427425241, "body": "Comparing C++ and Smalltalk doesn't make much sense.  They have vastly different goals, and they're both good at what they were designed for.\n\nThe entire point of C++ was to bring higher level features like object orientation to a fast low level language, but keep the performance and low level features for when they're needed.  It does that better than any other language created so far.\n\nMost of the time, those low level features aren't needed, in which case you shouldn't be using C++ at all.  But when they *are* needed, C++ wipes the floor with any other language out there.\n\nHow many commercial video games are written in Smalltalk (or Ruby, Python, Java, ...)?  The answer is none, because their performance would suck.  How many compilers and runtime environments are written in Smalltalk?  Not many.  How many are written in C++?  Most of them.\n\nI'll be the first to point out that most of the time C++ is the wrong tool for the job.  But just because you tend to use it wrong doesn't mean the tool is defective.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02bkmq", "id": "c02blyj", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 3, "controversiality": 0, "archived": true, "link_id": "t3_5z7jr", "retrieved_on": 1427425258, "id": "c02bkmq", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02bkmq", "parent_id": "t1_c02bkgv", "body": "I'd say that anyone who criticizes the complexity of C++ has a valid point; the majority of it is unneeded.  As an example, Smalltalk is much less complex, yet much more expressive.", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "finix", "created_utc": "1193438576", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 10, "author": "[deleted]", "created_utc": "1193442563", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -2, "author": "finix", "created_utc": "1193444979", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1193514652", "ups": 2, "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425205, "score": 2, "body": "Of course nobody forces you to use C++ - but circumstances do:\n\nhttp://yosefk.com/c++fqa/inheritance-multiple.html#fqa-25.3\n\nFor example, who forced me to type this in English?", "id": "c02boxh", "author": "yosefk", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "name": "t1_c02boxh", "parent_id": "t1_c02bl81", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02bl81", "score_hidden": false, "controversiality": 0, "archived": true, "ups": -2, "link_id": "t3_5z7jr", "retrieved_on": 1427425251, "id": "c02bl81", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bl1h", "body": "Well, in case you missed it, I *skimmed a few entries*, and my impression was: misunderstandings (both of C++ and computation in general); narrow-mindedness (as in C++ doesn't work like language *x*); and valid gripes, **some** of which will be addressed in C++0x. If you don't care for the standard, compatibility, etc., or just cannot wait, you might want to try stuff like [ConceptC++](http://www.generic-programming.org/languages/conceptcpp/) and so on.\n\nAlso, you can just as well use another language. Nobody forces you to use C++. And yes, it has its warts and plenty of pitfalls, sure enough; no one sane would deny this. But that's no reason to bash it no matter what. Some criticisms are simply not valid, some are harsher than you would consider your favourite language, and there's no reason to make out its fortes as bad. That's all I'm saying.", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "author_flair_text": null, "name": "t1_c02bm9t", "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425237, "score": 2, "score_hidden": false, "body": " Many compilers already support some/most of the C++0X stuff.  Hardly all of it, but they're doing much better than last time.\n\nFor example:\n\nhttp://gcc.gnu.org/onlinedocs/libstdc++/ext/tr1.html\n\nhttp://gcc.gnu.org/gcc-4.3/cxx0x_status.html\n\n", "author": "Ringo48", "created_utc": "1193460112", "distinguished": null, "edited": true, "archived": true, "subreddit": "programming", "ups": 2, "parent_id": "t1_c02bl1h", "id": "c02bm9t", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 10, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z7jr", "retrieved_on": 1427425253, "body": "[deleted]", "archived": true, "distinguished": null, "edited": true, "name": "t1_c02bl1h", "parent_id": "t1_c02bknv", "id": "c02bl1h", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 1, "score_hidden": false, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z7jr", "retrieved_on": 1427425258, "body": "Too true. I just skimmed a few entries, and his \"knowing C++ better than it deserves\" ([link](http://yosefk.com/c++fqa/disclaimers.html)) isn't nearly enough to meaningfully criticize it (although it seems interspersed with a few valid gripes (some of which will be addressed by C++0x)).\n\nIt's an interesting idea, though. Someone competent should do something like this.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02bknv", "parent_id": "t1_c02bkgv", "id": "c02bknv", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 20, "author": "barrybe", "created_utc": "1193440809", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 4, "author": "[deleted]", "created_utc": "1193446461", "children": [{"controversiality": 0, "retrieved_on": 1427425248, "subreddit_id": "t5_2fwo", "created_utc": "1193447459", "ups": 3, "gilded": 0, "link_id": "t3_5z7jr", "downs": 0, "score": 3, "body": "And he also doesn't seem to realize that if you are using Boost, and your program ends up more complex, you're using it wrong and should immediately stop. \n\nIt seems to me that for every 2 Boost libraries that exist to see just what is capable of being achieved in C++, there is one that is incredibly useful, and your job as library user is to include only the ones you really need.", "author": "rabidgnat", "author_flair_text": null, "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit": "programming", "name": "t1_c02blfg", "parent_id": "t1_c02blcu", "score_hidden": false, "id": "c02blfg"}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 16, "author": "Korollary", "created_utc": "1193448686", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": 1, "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425244, "score": 1, "body": "[deleted]", "author": "[deleted]", "created_utc": "1193452679", "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02bltr", "parent_id": "t1_c02blik", "score_hidden": false, "id": "c02bltr"}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -1, "author": "null_vector", "created_utc": "1193452821", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 9, "author": "krelian", "created_utc": "1193453133", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "null_vector", "created_utc": "1193454596", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 7, "author": "krelian", "created_utc": "1193457688", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -3, "author": "Ringo48", "created_utc": "1193459719", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 4, "author": "krelian", "created_utc": "1193461616", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -1, "author": "Ringo48", "created_utc": "1193537666", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": 2, "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425137, "score": 2, "body": "What target area is that?", "author": "dmpk2k", "created_utc": "1193601972", "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02btz2", "parent_id": "t1_c02bqkj", "score_hidden": false, "id": "c02btz2"}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": -1, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z7jr", "retrieved_on": 1427425181, "body": "Yes, being easy to use is a noble design goal.  But it's also highly dependant on the target audience.  C++ was designed for people who were used to C.  For those people, none of those criticisms apply.\n\nAs I pointed out in another subthread, most people shouldn't be using C++ anyway, and although I didn't state the reasons, you've listed most of the ones I had in mind.\n\nC++ isn't perfect, but for its target area it's the best contender so far.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02bqkj", "parent_id": "t1_c02bmc8", "id": "c02bqkj", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 4, "name": "t1_c02bmc8", "controversiality": 0, "archived": true, "link_id": "t3_5z7jr", "retrieved_on": 1427425236, "score_hidden": false, "id": "c02bmc8", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bm8u", "body": "&gt;He's expecting C++ to be just like Java, Ruby, or something else, and it's not working out so well for him.\n\nDon't you think that being easy to use is an  important goal in language design? If you could have a language that gave you all the  features (including performance) of C++ but without all the complexities, wouldn't you say that language is a better language than C++?\n\nWhen he says that programming in C++ is too hard and complex, it is not because he doesn't like to work hard. It is because these inefficiencies are causing the software to take more time to be developed, more time to be debugged and more time to be compiled. And this is only when you are dealing with good C++ programmers. In most cases you will just receive buggy software.\n\nAlso, I didn't understand his arguments as:\n\"I'm too dumb to understand the overloading rules\" and \"I think C++'s memory management is hard\", I understood them as saying that the design choices in C++ are bad and this is  what makes the language bad. For a language who's goal was to actually make programming easier (using OOP), it has failed.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02bm8u", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": -3, "link_id": "t3_5z7jr", "retrieved_on": 1427425238, "body": "\"I'm too dumb to understand the overloading rules\" isn't an argument.  \"I think exceptions are hard to use\" isn't an argument.  \"I think C++'s memory management is hard\" isn't an argument either.\n\nUsing arguments like that, I can give reasons for anything.\n\nThe author of the article needs to be hit with a clue stick.  He's expecting C++ to be just like Java, Ruby, or something else, and it's not working out so well for him.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02bm54", "id": "c02bm8u", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 2, "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425205, "score": 2, "id": "c02box5", "author": "yosefk", "created_utc": "1193514460", "distinguished": null, "edited": false, "body": "By the way, I have no problem with operator overloading in general - it can be good or it can be bad. For example, it seems to work great in Matlab with symbolic math, and I know people who are happy with Numeric Python (but I didn't dive too deep into this one myself).", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02box5", "parent_id": "t1_c02bm54", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02bm54", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 7, "link_id": "t3_5z7jr", "retrieved_on": 1427425239, "id": "c02bm54", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02bly5", "body": "  &gt;[13.1] He said operator overloading is bad because it reduces readability.\n\nWhile it is obvious that he is not a big supporter of operator overloading, his arguments specifically explain why operator overloading in C++ doesn't work. \n\n&gt;Operator overloading is not necessarily a bad idea - if you can actually keep the promise about \"readability\". To do that, you need at least three things: comprehensible overload resolution rules, easy-to-use exceptions and easy-to-use automatic memory management. C++ offers none of those.\n\n&gt;He makes no attempt at coming to a point \n\nBut he does. Or did you you miss the links inside the paragraph?\n\nHe chose the option of arguing against each question in the original FAQ separately , but because many of the features overlap (or are broken because they depend on other broken features) some of the answers rehash arguments from earlier questions.\n\nI actually found [this summery](http://yosefk.com/c++fqa/defective.html)to be more concise and informative than the FAQ format.\n  ", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": -2, "author": "null_vector", "created_utc": "1193487957", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "yosefk", "created_utc": "1193514269", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193515760", "name": "t1_c02bp0r", "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425203, "score": 0, "score_hidden": false, "id": "c02bp0r", "author": "null_vector", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 0, "parent_id": "t1_c02bowh", "body": "So the the only difference between the C and C++ API's would be the creation of 1 temporary which gets optimized away with a modern compiler?\n\nI'm not aware of anything that C's capable of doing that C++ isn't when it comes to asm.  Which really isn't even C.  So it's kind of copping out.  And non-portable.  \n\nThe exception bit doesn't make much sense in this context.  It a performance critical section, why would you throw exceptions?\n\nOh and check this out.\n\n    \n    matrix&lt;T, 3, 3&gt; operator * (matrix&lt;T, 3, 3&gt; const&amp; rhs) const {\n        matrix&lt;T, 3, 3&gt; m;\n        c_api_mat_mul_3x3f(m.elems, this.elems, rhs.elems);\n        return m;\n    }\n\n", "author_flair_css_class": null}], "subreddit": "programming", "ups": 2, "name": "t1_c02bowh", "controversiality": 0, "archived": true, "link_id": "t3_5z7jr", "retrieved_on": 1427425205, "score_hidden": false, "id": "c02bowh", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02bn7g", "body": "The idea of a C-style API in my example was that the function is implemented using platform-specific acceleration, like SSE or AltiVec or SIMD VLIW instruction sets of DSPs. Does gcc automatically beat that? Allow me to express my sincere doubt. Representatives of companies making money off compilers won't make this claim off the record if they have to look you in the eye, mind you.\n\nNow, to wrap the optimized functions handling special cases of operator chaining in a nice C++ interface (which still won't be able to handle errors without exceptions, but that's another point), what you need to do is to return temporary objects of types representing the special cases of this chaining, and overload operators for combinations of these types, and this is a task I don't wish to my worst enemies to undertake.\n\nCheck out Intel's IPP for an example of an optimized library, and try to beat it using funky C++ compiler optimizations. ", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1193531933", "ups": 0, "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425187, "score": 0, "body": "      Well here's the unrolling templates anyways.\n\nUsed like so\n\n    //addition\n    matrix3_ops::collection_arithmetic&lt;matrix3_ops::plus, 9&gt;::apply(base::elems, base::elems, rhs.elems);\n    //subtraction\n    matrix3_ops::collection_arithmetic&lt;matrix3_ops::minus, 9&gt;::apply(base::elems, base::elems, rhs.elems);\n\n    //multiplication\n    const matrix3 lhs(*this);\n    matrix3_ops::unrolled_matrix_multiply&lt;3, 3&gt;::apply(base::elems, lhs.elems, rhs.elems);\n    return *this;\n\n\n    namespace matrix3_ops {\n        struct plus {\n            template&lt;typename T&gt;\n                inline static T apply(T lhs, T rhs) {\n                    return lhs + rhs;\n                }\n        };\n        struct minus {\n            template&lt;typename T&gt;\n                inline static T apply(T lhs, T rhs) {\n                    return lhs - rhs;\n                }\n        };\n\n        template&lt;typename TOperator, size_t index&gt;\n        struct collection_arithmetic_apply {\n            template&lt;typename TArrayRes, typename TArrayLhs, typename TArrayRhs&gt;\n            inline static void apply(TArrayRes res, TArrayLhs const lhs, TArrayRhs const rhs) {\n                res[index] = TOperator::apply(lhs[index], rhs[index]);\n                collection_arithmetic_apply&lt;TOperator, index-1&gt;::apply(res, lhs, rhs);\n            }\n        };\n\n        template&lt;typename TOperator&gt;\n        struct collection_arithmetic_apply&lt;TOperator, 0&gt; {\n            template&lt;typename TArrayRes, typename TArrayLhs, typename TArrayRhs&gt;\n            inline static void apply(TArrayRes res, TArrayLhs const lhs, TArrayRhs const rhs) {\n                res[0] = TOperator::apply(lhs[0], rhs[0]);\n            }\n        };\n\n        template&lt;typename TOperator, size_t TSize&gt;\n        struct collection_arithmetic {\n            template&lt; typename TArrayRes, typename TArrayLhs, typename TArrayRhs&gt;\n            inline static void apply(TArrayRes res, TArrayLhs const lhs, TArrayRhs const rhs) {\n                collection_arithmetic_apply&lt;TOperator, TSize - 1&gt;::apply(res, lhs, rhs);\n            }\n        };\n\n\n        template&lt;size_t TRows, size_t TColumns, size_t I, size_t J&gt;\n        struct unrolled_matrix_multiply_J {\n            template&lt;typename TReturnType, typename TMatrix&gt;\n                inline static void apply(TReturnType res, TMatrix const lhs, TMatrix const rhs) {\n                    res[J * TColumns + I] = lhs[0 * TColumns + I] * rhs[J * TColumns + 0]\n                                          + lhs[1 * TColumns + I] * rhs[J * TColumns + 1]\n                                          + lhs[2 * TColumns + I] * rhs[J * TColumns + 2];\n                    unrolled_matrix_multiply_J&lt;TRows, TColumns, I, J-1&gt;::apply(res, lhs, rhs);\n                }\n        };\n\n        template&lt;size_t TRows, size_t TColumns, size_t I&gt;\n        struct unrolled_matrix_multiply_J&lt;TRows, TColumns, I, 0&gt; {\n            template&lt;typename TReturnType, typename TMatrix&gt;\n                inline static void apply(TReturnType res, TMatrix const lhs, TMatrix const rhs) {\n                    res[0 * TColumns + I] = lhs[0 * TColumns + I] * rhs[0 * TColumns + 0]\n                                          + lhs[1 * TColumns + I] * rhs[0 * TColumns + 1]\n                                          + lhs[2 * TColumns + I] * rhs[0 * TColumns + 2];\n                }\n        };\n\n        template&lt;size_t TRows, size_t TColumns, size_t I&gt;\n        struct unrolled_matrix_multiply_I {\n            template&lt;typename TReturnType, typename TMatrix&gt;\n                inline static void apply(TReturnType res, TMatrix const lhs, TMatrix const rhs) {\n                    unrolled_matrix_multiply_J&lt;TRows, TColumns, I, TColumns - 1&gt;::apply(res, lhs, rhs);\n                    unrolled_matrix_multiply_I&lt;TRows, TColumns, I - 1&gt;::apply(res, lhs, rhs);\n                }\n        };\n\n        template&lt;size_t TRows, size_t TColumns&gt;\n        struct unrolled_matrix_multiply_I&lt;TRows, TColumns, 0&gt; {\n            template&lt;typename TReturnType, typename TMatrix&gt;\n                inline static void apply(TReturnType res, TMatrix const lhs, TMatrix const rhs) {\n                    unrolled_matrix_multiply_J&lt;TRows, TColumns, 0, TColumns - 1&gt;::apply(res, lhs, rhs);\n                }\n        };\n\n        template&lt;size_t TRows, size_t TColumns&gt;\n        struct unrolled_matrix_multiply {\n            template&lt;typename TReturnType, typename TMatrix&gt;\n                inline static void apply(TReturnType res, const TMatrix lhs, const TMatrix rhs) {\n                    unrolled_matrix_multiply_I&lt;TColumns, TRows, TRows - 1&gt;::apply(res, lhs, rhs);\n                }\n        };\n\n    }\n\n      ", "id": "c02bq7r", "author": "null_vector", "author_flair_text": null, "distinguished": null, "edited": true, "archived": true, "subreddit": "programming", "name": "t1_c02bq7r", "parent_id": "t1_c02bn7g", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02bn7g", "score_hidden": false, "controversiality": 0, "archived": true, "ups": -2, "link_id": "t3_5z7jr", "retrieved_on": 1427425225, "id": "c02bn7g", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02bly5", "body": " I did write the benchmarks but gcc 4.1.2 has decided it hates me.\n\nI can't keep it from optimizing the entire thing away with decent compilation settings.\n\nAnd without those settings the C-style API is at a disadvantage and the automatic loop unrolling templates win.  \n\nThough what did come as a little surprise was that \n    A + B * C\n\nturned out to be faster than\n\n    D=B; D*=C; D+=A;\n\nbecause of the copy that has to be created inside *= which actually makes it perform worse than the naive version.\n\nWell, I needed a diversion anyways. ", "author_flair_css_class": null}], "subreddit": "programming", "ups": 3, "name": "t1_c02bly5", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z7jr", "retrieved_on": 1427425241, "score_hidden": false, "body": "[13.1] He said operator overloading is bad because it reduces readability.  This is true if you do something incredibly stupid like make  ++b save a file to disk.  But this isn't a problem with C++. This is not the fault of the language.  This is the programmer's fault making something so unintuitive.\n\n[13.2] That's all he says.  He makes no attempt at coming to a point except, you should just use another language.  If that doesn't speak for itself I don't know what does.\n\nI'm not going to go through all of these because reddit's not letting me edit my posts(reddit.js line 625, malformed uri sequence) and markdown is a complete pos.\n\n&gt; The really interesting questions are about the performance of A+B*C compared to D=B;D*=C;D+=A compared to an optimized multiply_and_add_matrices(A,B,C) function. \n\nWriting matrix class and performing benchmarks. BRB.\n\n\n\n", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02blus", "id": "c02bly5", "author_flair_css_class": null}], "subreddit": "programming", "ups": 9, "name": "t1_c02blus", "controversiality": 0, "archived": true, "link_id": "t3_5z7jr", "retrieved_on": 1427425244, "score_hidden": false, "id": "c02blus", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02blu4", "body": " You keep saying that his arguments suck but you never explain why:\n\n&gt;BS. Pretty much speaks for itself. Not wasting my time.\n\n&gt;He basically says, \"C++ is bad for making it easy to use when it's so obviously the wrong tool for the job\".\n\nYou just keep translating his answers but never say why he is wrong. ", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02blu4", "score_hidden": false, "controversiality": 0, "archived": true, "ups": -1, "link_id": "t3_5z7jr", "retrieved_on": 1427425244, "id": "c02blu4", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02blik", "body": "To pick a chapter at random....Chapter 13 Operator Overloading\n\n&gt; [13.1] What's the deal with operator overloading?\n&gt; Operator overloading provides strong source code encryption\n&gt; Operator overloading is not necessarily a bad idea - if you can actually keep the promise about \"readability\". To do that, you need at least three things: comprehensible overload resolution rules, easy-to-use exceptions and easy-to-use automatic memory management. C++ offers none of those.\n\nBS.  Pretty much speaks for itself. Not wasting my time.\n\n&gt; [13.2] What are the benefits of operator overloading?\n\nHe basically says, \"C++ is bad for making it easy to use when it's so obviously the wrong tool for the job\".\n\n&gt; [13.3] What are some examples of operator overloading?\n\nHe says...\n\nstringA + stringB: \nbad because string should be a built in type.\n\ndateTime++: \nWhat does it mean?(ed: The idiot that wrote that could do it just as easily in any other language.)\n\na*b multiplies two Numbers: \nYOU'RE MAKING IT EASY TO DO SOMETHING WHEN YOU'RE ACTUALLY JUST USING THE WRONG TOOL FOR THE JOB! ZOMG IDIOT! C++ SUCKS!\n\na[i] accesses the i'th element of a user-defined Array class object.: \n\nI'm just gonna directly quote him on this one\n\n&gt; Arrays: should be built into the language, too. And if you use a tricky data structure because resizable arrays built into your language are not good enough, making it look like an array is not necessarily a good idea. For example, people might want to find the definition of the operator[] in a[i]. What should they do - search for \"[\"? Oh, they are using an IDE that actually understands 75% of C++ syntax? Now what - select the opening bracket and ask for its definition? Never worked for me.\n\nAt this point, he's ruined all credibility with me. \n\n\nI'll quote you a couple more just to drive it home.\n\n&gt; [13.8] Okay, that tells me the operators I can override; which operators should I override?\n&gt;\n&gt; FAQ: You want to help your users, not confuse them. Overload operators if it makes the life of your users easier. \n&gt;\n&gt; FQA: Translation: don't overload C++ operators. While we're at it, don't overload C++ functions, either. C++ overload resolution always ends up confusing users. And you can't add error handling without using the horrible C++ exceptions, and you can't allocate objects simply and efficiently. \n\n\n&gt; [13.10] How do I create a subscript operator for a Matrix class?\n&gt; \n&gt; FAQ: Use operator() which can get two indexes, i and j. Don't use operator[], which can only get one index. A code listing follows.\n&gt; \n&gt; FQA: Oh, dear. You're writing a Matrix class. My condolences.\n&gt; \n&gt; Once you define your subscript operator, be prepared to answer many more questions. How do you allocate the result of operator+? How do you map expressions like A+B*C to optimized implementations of several operations (for example, multiply_add)? Why are you writing a Matrix class with overloaded operators instead of prototyping the code in Matlab or the like and then implementing the prototype in C so that it runs fast and anybody can tell how and why from the code, instead of figuring out how A+B*C actually works? ", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 16, "name": "t1_c02blik", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z7jr", "retrieved_on": 1427425247, "score_hidden": false, "body": "I'm sorry, but the author seems to have too good an understanding of C++ to be labelled a java programmer that doesn't \"get\" it.\n\nTry addressing his arguments next time. If #8.5 is your best example, there's absolutely nothing wrong with #8.5. He's just showing that it can be done in a non-portable way should the need arise. It doesn't matter if the problem doesn't exist in other languages because he's addressing the actual C++ FAQ Lite.\n\nWe've heard enough about the purpose of C++. Times change even if C++ was perfect at any time in the past, which it wasn't.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02blcu", "id": "c02blik", "author_flair_css_class": null}], "subreddit": "programming", "ups": 4, "score_hidden": false, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z7jr", "retrieved_on": 1427425249, "body": "Ad hominem attacks are somewhat cathartic.  What's really important is avoiding the [Ad Hominem Fallacy](http://en.wikipedia.org/wiki/Ad_Hominem#Ad_hominem_as_formal_fallacy), which I did.\n\n&gt; My only complaint with his list is that too many of those issues are just matters of opinion or personal taste.\n\nHe doesn't seem to understand that the purpose of C++ is very much different than the purpose of the language he would prefer C++ to be.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02blcu", "parent_id": "t1_c02bkve", "id": "c02blcu", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 20, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z7jr", "retrieved_on": 1427425256, "body": "I don't think there's anything incoherent there. He clearly has a good understanding of the language.\n\nMy only complaint with his list is that too many of those issues are just matters of opinion or personal taste.\n\n&gt; Honestly, it reads like it was written by a Java programmer who simply couldn't hack it with the (sometimes necessary, sometimes unnecessary) complexity of C++.\n\nYou're making ad hominem attacks, and you're calling *him* a troll?", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02bkve", "parent_id": "t1_c02bkgv", "id": "c02bkve", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 21, "author": "neilc", "created_utc": "1193452196", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 14, "author": "[deleted]", "created_utc": "1193456156", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 10, "author": "neilc", "created_utc": "1193458679", "children": [{"controversiality": 0, "retrieved_on": 1427425221, "subreddit_id": "t5_2fwo", "created_utc": "1193495499", "ups": 2, "gilded": 0, "link_id": "t3_5z7jr", "downs": 0, "score": 2, "body": "&gt; Pimpl works well, although it is still a workaround for what is a fundamental bogusity in the language.\n\nI haven't seen this idiom before (I don't program C++), but to me it looks like the typical implementation of an abstract data-type with an opaque implementation type. In OCaml, for instance:\n\n    module type SET = sig\n      type elt\n      type t\n      val empty : t\n      val add : t -&gt; elt -&gt; t\n      (* ... *)\n    end\n    \n    module Make(O : OrderedType) : SET\n      with type elt = O.t = struct (* ... *) end\n\nMaybe C++ should be your *last* language, not your first, after some Modula, OCaml, Haskell or something equally high-level.", "author": "notfancy", "author_flair_text": null, "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit": "programming", "name": "t1_c02bnk5", "parent_id": "t1_c02bm71", "score_hidden": false, "id": "c02bnk5"}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02bo17", "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425214, "score": 5, "body": "&gt; Pimpl works well, although it is still a workaround for what is a fundamental bogusity in the language.\n\nI would agree, and furthermore, it's a workaround that has a performance cost (requiring both indirection and heap allocation), which is even worse.  But it does work to accomplish what the author of the FQA was complaining about, and it's something that ought to have been mentioned.\n\n(It's worth noting at this point that even though Pimpl has a performance penalty, it's actually implementing in a single class the model that other languages (that don't exhibit the compile time behavior that C++ does with respect to changes in private members requiring recompilation of client code) implement universally.  That is, with Pimpl you're not paying a price that you wouldn't be paying in other languages; you're just *choosing* to pay it, rather than having it forced on all your types without your consent.)\n\n&gt; Which is the primary problem, I think. Writing reliable software is hard enough, and IMHO C++ gets in the way more than it helps.\n\nI would agree on the facts (that writing reliable software is hard, and that the complexity of C++ makes it to some degree harder that many other languages), but I would argue that the degree to which C++ makes writing reliable software harder is insignificant compared with the actually difficulty in writing reliable software in the first place.  It's a capital investment, I would argue, not an ongoing cost: find a couple good designers who know the language inside and out to design your interfaces, and you'll go a long way toward mitigating the additional cost that is the complexity of C++.  And for that investment, you gain a quality type system in an efficient language.\n\n&gt; But IMHO that is fairly rare: between C for low-level code\n\nI don't really understand that opinion: there are very few low-level requirements which C would fulfill and C++ would not (the primary one, I think, being ABI compatibility).  Even if I were writing extremely low-level code, I'd use C++ over C simply for the greater expressiveness of the typesystem and the ability to build efficient abstractions.\n\n&gt; and a proper high-level language for more typical programs (take your pick of ML, Java, Scala, Haskell, Python, etc. depending on the problem)\n\nI'm fairly well-versed in Python, but have noted that using the STL with C++, in my experience, leads to short scripts, at least, that aren't significantly more lines than their Python counterparts: the lines are more dense (largely because of the type declarations) but having proper string, vector, map, and set abstractions go a *long* way both toward avoiding bugs and decreasing code size.\n\nI'm likewise well-versed in ML (both Ocaml and SML) but simple business constraints often make C++ a better choice: it's rather hard to find ML programmers to write commercial software, and it's not easy to distribute the resulting software.", "author": "[deleted]", "created_utc": "1193503447", "distinguished": null, "edited": false, "id": "c02bo17", "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 5, "parent_id": "t1_c02bm71", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": 10, "name": "t1_c02bm71", "controversiality": 0, "archived": true, "link_id": "t3_5z7jr", "retrieved_on": 1427425238, "score_hidden": false, "id": "c02bm71", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02bm25", "body": " Well, I didn't say I agreed with *every* point raised in the article -- discourging the use of Boost is a bad idea, I agree. Pimpl works well, although it is still a workaround for what is a fundamental bogusity in the language.\n\n&gt; I would even go so far as to say that it requires more skill, more discipline to write good software in C++ than other languages\n\nWhich is the primary problem, I think. Writing reliable software is hard enough, and IMHO C++ gets in the way more than it helps. A programming language, particularly a low-level one, should be *simple*. C++ is just way, way too complex.\n\nNow obviously, there are some situations in which C++ is still the right tool for the job, despite its many failings. But IMHO that is fairly rare: between C for low-level code and a proper high-level language for more typical programs (take your pick of ML, Java, Scala, Haskell, Python, etc. depending on the problem), I think the situations in which C++ is the best choice are fairly limited. ", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": -5, "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425238, "score": -5, "body": "&gt;It requires discipline, yes, but it's possible and, dare I say, almost mechanical to write exception-safe code in C++.\n\nIn this case, wouldn't D be C++ done right?", "author": "krelian", "created_utc": "1193459063", "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02bm7n", "parent_id": "t1_c02bm25", "score_hidden": false, "id": "c02bm7n"}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": 3, "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425203, "score": 3, "body": "  &gt; It requires discipline\n\nI don't like arguments regarding developer discipline, because if it's possible to do wrong, it _will_ be done wrong. It doesn't matter how good you are, you're still human.\n\n&gt; almost mechanical to write exception-safe code in C++.\n\nAlmost mechanical? Why isn't it being abstracted away the language then?  ", "author": "dmpk2k", "created_utc": "1193515320", "distinguished": null, "edited": true, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02bozc", "parent_id": "t1_c02bm25", "score_hidden": false, "id": "c02bozc"}], "subreddit_id": "t5_2fwo", "ups": 14, "name": "t1_c02bm25", "controversiality": 0, "archived": true, "link_id": "t3_5z7jr", "retrieved_on": 1427425240, "score_hidden": false, "id": "c02bm25", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02blsu", "body": "Here are a few choice quotes, just from the first page:\n\n&gt; If you end up working with C++, don't try to \"fix\" it (or \"boost\" it). You'll just add more layers of complexity.\n\nAs another poster already mentioned, if using a library complicates your software, *don't use the library*.  Many things in Boost (for instance, shared_ptr) very much simplify quality programming.\n\n&gt; No compile time encapsulation\n\nCompletely ignoring the quite simple [Pimpl](http://en.wikipedia.org/wiki/Pimpl#C.2B.2B) idiom used widely in the C++ world.\n\n&gt; Exception safe C++ code is almost infeasible to achieve in a non-trivial program.\n\nIt requires discipline, yes, but it's possible and, dare I say, almost mechanical to write exception-safe code in C++.\n\nI don't think anyone will claim that C++ doesn't have warts, bugs, ugliness, and more complexity than is absolutely necessary.  But that's true of every practical language on the planet.  I would even go so far as to say that it requires more skill, more discipline to write good software in C++ than other languages, but there are justifying reasons for for choosing C++ over those languages, whether for performance, native compilation, C-level access, or perhaps other reasons.", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "infinite", "created_utc": "1193456367", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "Ringo48", "created_utc": "1193456954", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "infinite", "created_utc": "1193457923", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 5, "author": "Ringo48", "created_utc": "1193459437", "children": [{"controversiality": 0, "retrieved_on": 1427425224, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02bnaf", "gilded": 0, "link_id": "t3_5z7jr", "downs": 0, "score": 6, "score_hidden": false, "body": "How terribly pleasant. Too bad it doesn't make CString, QString and char* go away.", "author": "yosefk", "created_utc": "1193490144", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 6, "parent_id": "t1_c02bm8d", "id": "c02bnaf", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 5, "name": "t1_c02bm8d", "controversiality": 0, "archived": true, "link_id": "t3_5z7jr", "retrieved_on": 1427425238, "score_hidden": false, "id": "c02bm8d", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bm5l", "body": "\"Changed a lot from the 90s\" is an understatement.\n\nAlmost all compilers these days provide compliant STL implementations, and if they don't there are several good third party implementations.", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425204, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02bouf", "gilded": 0, "link_id": "t3_5z7jr", "downs": 0, "score": 1, "score_hidden": false, "body": "I think it's true for all values of \"whatever\" though, except for working with legacy code (existing projects/libraries). And with this (large) family of cases, you can substitute C++ with COBOL and the claim about it being the right tool in some similar case will also hold. There's lots of existing code in COBOL.", "author": "yosefk", "created_utc": "1193513461", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c02bm5l", "id": "c02bouf", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 2, "name": "t1_c02bm5l", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z7jr", "retrieved_on": 1427425239, "score_hidden": false, "body": " Here is a bunch of C++ string implementations:\r\n\r\nhttp://www.and.org/vstr/comparison\r\n\r\n\r\nMaybe C++ has changed a lot from the 90s, when I used it, std:string wasn't so standard. With C++ you don't have to use std:string whereas with Java you must use one and only one string class. Not that one language is better than the other, use different tools for different jobs.  The original author complains too much, C++ just isn't the tool for whatever he wants done. ", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02bm3s", "id": "c02bm5l", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "easytiger", "created_utc": "1193478698", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "yosefk", "created_utc": "1193490073", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 5, "author": "easytiger", "created_utc": "1193491385", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193495111", "name": "t1_c02bnjk", "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425221, "score": 6, "score_hidden": false, "body": "Java apps don't need to reinvent the string - there's a decent standard string type. In C++, which is supposed to be the perfect tool for library designers, each library had to roll it's own counted strings, resizable arrays, dictionaries, etc. for way too long. Hence the chaos and the mayhem.", "author": "yosefk", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 6, "parent_id": "t1_c02bnc9", "id": "c02bnjk", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02bnc9", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 5, "link_id": "t3_5z7jr", "retrieved_on": 1427425223, "body": "To be honest its the worst thing about working in c++. String manipulation is one of the most common things one has to do and yet every library seems to have its own way of doing things. ustring, QString, gstring, cstr,gstring and tons more. It ends up filling the code with loads of guff that really spoils it, where the same java code remains much clearer.\r\n\r\nKudos to java libraries for having much clearer design leadership from the start. I don't think I've ever seen a java app that uses anything other that the standard String.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02bnac", "id": "c02bnc9", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425169, "subreddit_id": "t5_2fwo", "created_utc": "1193553459", "ups": -1, "gilded": 0, "link_id": "t3_5z7jr", "downs": 0, "score": -1, "body": "&gt;\"abc\" is not an std::string; in Java it is a java.lang.String.\n\nYou are (intentionally?) forgetting the reason behind that.\n\nThat reason (and one of *big* ones for C++'s popularity) is compatibility with C. To interface with it, you want to accept char* and C string literals as if you were in C.", "author": "Gotebe", "archived": true, "distinguished": null, "edited": false, "id": "c02brif", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02brif", "parent_id": "t1_c02bnac", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": 3, "name": "t1_c02bnac", "controversiality": 0, "archived": true, "link_id": "t3_5z7jr", "retrieved_on": 1427425224, "score_hidden": false, "id": "c02bnac", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bmyd", "body": "Here's a compensation for the risk: I hate that, too. And \"abc\" is not an std::string; in Java it is a java.lang.String. You see the difference when you pass std::string (the built-in string type) to the constructor of std::ifstream (the built-in input file type):\n\nstd::ifstream in(name.c_str());", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 3, "controversiality": 0, "archived": true, "link_id": "t3_5z7jr", "retrieved_on": 1427425228, "id": "c02bmyd", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02bmyd", "parent_id": "t1_c02bm3s", "body": "it is.... though at the risk of being flamed i hate working with std::string. I usually end up doing things in cstr", "author_flair_css_class": null}], "subreddit": "programming", "ups": 2, "name": "t1_c02bm3s", "controversiality": 0, "archived": true, "link_id": "t3_5z7jr", "retrieved_on": 1427425239, "score_hidden": false, "id": "c02bm3s", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bm2j", "body": "Am I missing something?  Has nobody heard of the STL?  Strings are as built into C++ as they are into Java.", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 12, "author": "[deleted]", "created_utc": "1193457189", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 8, "author": "reventlov", "created_utc": "1193467353", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -2, "author": "beza1e1", "created_utc": "1193492043", "children": [{"controversiality": 0, "retrieved_on": 1427425203, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02bp01", "gilded": 0, "link_id": "t3_5z7jr", "downs": 0, "score": 1, "score_hidden": false, "body": "Everything beyond assembler is a \"high-level language\" then?\n\nThat's kinda useless.", "author": "dmpk2k", "created_utc": "1193515505", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c02bndk", "id": "c02bp01", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02bndk", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": -2, "link_id": "t3_5z7jr", "retrieved_on": 1427425223, "body": "My definition of \"high-level language\" is \"code is machine independent (or at least can be made machine independent)\"", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02bmk8", "id": "c02bndk", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425203, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02bp0k", "gilded": 0, "link_id": "t3_5z7jr", "downs": 0, "score": 3, "score_hidden": false, "id": "c02bp0k", "author": "[deleted]", "created_utc": "1193515683", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 3, "parent_id": "t1_c02bmk8", "body": "As of the mid-80s (when I was an undergrad), Lisp and Prolog were the archetypical high-level languages.  You could also add SQL, though I didn't think of it that way at the time.\n\nI think of a high-level language as being declarative or functional, having garbage collection, and above-all not being crashable by erroneous code (except through well-defined escapes to C).\n", "author_flair_css_class": null}], "subreddit": "programming", "ups": 8, "name": "t1_c02bmk8", "controversiality": 0, "archived": true, "link_id": "t3_5z7jr", "retrieved_on": 1427425233, "score_hidden": false, "id": "c02bmk8", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bm4d", "body": "You're being modded down, but you're (mostly) right...\n\nMost people think of Java as a high-level language now.\n\nC++ *was* a high-level language, back in the 80s and 90s, when everyone compared it to the previous Really Popular Language, C.\n\nC, in turn, was a high-level language in the 70s.\n\nEven assembler was once a high-level language, when people were comparing it to entering binary programs via switches on the front panel.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 12, "score_hidden": false, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z7jr", "retrieved_on": 1427425239, "body": "&gt; For a somewhat high level language, C++ performs nicely...\n\nC++ a high-level language?!?  Arghhhhh...  What are they teaching kids in school these days?", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02bm4d", "parent_id": "t1_c02bm2j", "id": "c02bm4d", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 13, "author": "neilc", "created_utc": "1193458066", "children": [{"controversiality": 0, "retrieved_on": 1427425238, "subreddit_id": "t5_2fwo", "created_utc": "1193459007", "ups": 10, "gilded": 0, "link_id": "t3_5z7jr", "downs": 0, "score": 10, "id": "c02bm7i", "author": "infinite", "archived": true, "distinguished": null, "edited": true, "body": "You have proposed a scenario where there is no valid reason for using C++. But I have worked on very large projects that needed to be fast and efficient and scalable, with full control of memory management because deterministic behavior was important. Fortunately we had a bunch of C++ gurus, and if someone new came on board they would be mentored to guru status. C++ was the right tool for that project since it needed speed, low memory footprint and OO. OO C is hardly readable, if you think C++ is hard to master, try using OO C for a large project. People used to use OO C a long time ago because they had to: C++ wasn't around/was immature(Oracle used it in the 80s). Now C++ is mature and we don't need long/setjmp to hack together exceptions.\r\n\r\n\r\n\r\nI can see why someone would use OO C in a library, good point. For binding to a high level langauge with C/C++ I use [swig](http://www.swig.org/) which makes it trivial. I think the real clincher is that you cannot call C++ directly from C, so it's best to keep libraries in C.\r\n\r\n", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02bm7i", "parent_id": "t1_c02bm5t", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425231, "subreddit_id": "t5_2fwo", "created_utc": "1193475259", "ups": 1, "gilded": 0, "link_id": "t3_5z7jr", "downs": 0, "score": 1, "body": "[deleted]", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "id": "c02bmv2", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02bmv2", "parent_id": "t1_c02bm5t", "score_hidden": false, "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "[deleted]", "created_utc": "1193494164", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193513465", "name": "t1_c02boug", "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425204, "score": 2, "score_hidden": false, "id": "c02boug", "author": "neilc", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 2, "parent_id": "t1_c02bnhi", "body": "&gt; All modern C/C++ environments have excellent support for mixing C and C++\n\nI don't think that is true. Suppose you want to make use of a C++ library from a C program (which is what my comment above was talking about). First off, the C++ library needs to be very careful to avoid throwing any exceptions back into C land, presumably taking the time to translate those exceptions back into error codes in each and every library interface. The C++ library also needs to expose an interface that is free of anything C doesn't understand: templates, classes, and the like. ISTM you'd effectively need to write a C *binding* for the C++ library, and then use that binding from the C program. And of course that's not impossible, but it does seem like \"excellent support for mixing C and C++\" to me. (Or perhaps I'm just ignorant about the techniques one would use to do this easily, in which case please enlighten me.)\n\n&gt; writing a Python binding for a C++ library is no harder than writing a binding for a C library\n\nYeah, fair enough, I had forgotten about the existence of tools like SWIG.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "name": "t1_c02bnhi", "controversiality": 0, "author_flair_text": null, "ups": 3, "link_id": "t3_5z7jr", "retrieved_on": 1427425221, "body": "&gt; (c) the inability to access a library from C means it is typically significantly harder to write bindings for Ruby, Python, etc. for it\n\nWhat inability?  All modern C/C++ environments have excellent support for mixing C and C++; writing a Python binding for a C++ library is no harder than writing a binding for a C library (it's often *easier*, since there are plenty of tools that can map C++ classes to Python classes).", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02bm5t", "id": "c02bnhi", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425172, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02brhe", "gilded": 0, "link_id": "t3_5z7jr", "downs": 0, "score": 0, "score_hidden": false, "id": "c02brhe", "author": "Gotebe", "created_utc": "1193552898", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 0, "parent_id": "t1_c02bm5t", "body": "&gt;Actually, C++ is a particularly poor choice to implement a library\n\nI think that's wrong. I agree that library has to have C interfaces, though. But that ain't really hard in C++ (extern \"C\").\n\nLook no further than FILE* of C. It effectively hides small polymorphism behind, that is for normal files, stdin/out/err, printers etc. One could easily imagine File (abstract base with read and write), then derived DiskFile, ConsoleFile, PrinterFile, and fopen as a factory utility.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 13, "score_hidden": false, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z7jr", "retrieved_on": 1427425239, "body": " I don't think C++ performs poorly: I think it is a hideously complex language that makes it difficult to write reliable programs. If you take the time to master it (which is a *long* time, for any reasonable definition of \"mastery\"), then it's OK, but the skill level needed to wield it effectively is far too high. Even if you're a C++ master, your coworkers or other contributors to your project probably aren't. C is nice because it is *simple*. I would use C for low-level tasks (operating systems, databases, and the like), and a proper high-level language for anything else.\n\nAs for \"OO C\", it's not *that* ugly, assuming you limit yourself to single-inheritance -- but the situations in which you really need OO in C are fairly limited.\n\n&gt; for your run of the mill open source library, just use C++\n\nActually, C++ is a particularly poor choice to implement a library, since (a) it is very difficult to construct a non-trivial C++ library that can be safely called from C (b) in any case, modern C++ style dictates techniques that can't be used from C (templates, exceptions, etc.) (c) the inability to access a library from C means it is typically significantly harder to write bindings for Ruby, Python, etc. for it (d) the nature of C++ makes it very easy to change the library ABI (e.g. adding a new field to a class, unless you use Pimpl or similar techniques).", "archived": true, "distinguished": null, "edited": true, "name": "t1_c02bm5t", "parent_id": "t1_c02bm2j", "id": "c02bm5t", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "[deleted]", "created_utc": "1193482919", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02bnqj", "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425218, "score": 3, "id": "c02bnqj", "author": "[deleted]", "created_utc": "1193499066", "distinguished": null, "edited": false, "body": "Okay, but I'm not interested in how C++ can be tortured to be faster.  I want to know how *idiomatic* C++ performs, and in that sense, the shootout site is doing the right thing.\n", "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 3, "parent_id": "t1_c02bn2i", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02bn2i", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425227, "body": "[deleted]", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02bm2j", "id": "c02bn2i", "author_flair_css_class": null}], "subreddit": "programming", "ups": 1, "name": "t1_c02bm2j", "controversiality": 0, "archived": true, "link_id": "t3_5z7jr", "retrieved_on": 1427425240, "score_hidden": false, "id": "c02bm2j", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02blsu", "body": "   Look at the language shootout ranking based on memory footprint and CPU:\r\n\r\nhttp://tinyurl.com/2a3e48\r\n\r\nFirst is Pascal, then it is C, then C++.\r\n\r\nFor a somewhat high level language, C++ performs nicely and ranks up there with C. I agree with many of the author's criticisms, but I still fall back to C++ when I have to, I don't regret learning it at all. Now that Java is better, I use Java instead of C++ when I can.\r\n\r\n\r\nNow if you think C++ is bad, take a look at the OO C libraries which use god awful macros to get everything done. I used to use those... in the early 90s when C++ was really terrible. These days, it is fine for things like operating systems, but for your run of the mill open source library, just use C++. Try using C++ with your own home-brew exceptions, now that was seriously unfun. C++ as is, in 2007, does its job nicely. It has plenty of quirks but it's fast and efficient with memory. I wish I could say the same for Java, but I just value all the APIs for Java. Like the original author stated, since there is no string/list/array using standard C++(despite the name Standard Template Library), there are a ton of incompatible C++ libraries whereas with Java the libraries can interoperate. The plethora of compatible Java libraries allows me to overlook Java's astounding memory bloat.  ", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193467347", "ups": -3, "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425233, "score": -3, "score_hidden": false, "body": "\"severe abstraction violation\"?  Is that the kind that leaves your theoretical daughter pregnant with an unwanted love-child?", "author": "username223", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02bmk7", "parent_id": "t1_c02blsu", "id": "c02bmk7", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02blsu", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 21, "link_id": "t3_5z7jr", "retrieved_on": 1427425244, "body": " I don't think it's incoherent at all. The example of FQA 8.5 does not support your case: the author mentions an ugly hack as a \"severe abstraction violation\" that \"isn't portable C++\", and advises the reader to \"make sure you have no other way to achieve your purpose before doing this\". The author is hardly recommending the technique, and I don't see how any of this advice is inconsistent with criticizing C++ for being overly complex.\n\nI think the article is somewhat polemical, but I think most of the author's points are valid critiques. I agree with his conclusion (32.10):\n\n&gt; A good high-level language allows you to forget about many small details of program execution. A good low-level language allows you to control the many small details of program execution. C++ is not much of a high-level language, but it's not a very good low-level language either. ", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02bkgv", "id": "c02blsu", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": -4, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z7jr", "retrieved_on": 1427425262, "body": "I read much of that last night, since it had been recently posted.  It is, in large part, a logically incoherent troll.  It complains of C++'s complexity, and then (for instance, in its question to the answer to the question, \"[8.5] How can you reseat a reference to make it refer to a different object?\"), it gives hackish solutions to the problem that wouldn't even be possible in another language.  It's talking out of both sides of its mouth.\n\nHonestly, it reads like it was written by a Java programmer who simply couldn't hack it with the (sometimes necessary, sometimes unnecessary) complexity of C++.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02bkgv", "parent_id": "t3_5z7jr", "id": "c02bkgv", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -4, "author": "repiret", "created_utc": "1193438357", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 6, "author": "goalieca", "created_utc": "1193459595", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "yosefk", "created_utc": "1193489837", "children": [{"controversiality": 0, "retrieved_on": 1427425221, "subreddit_id": "t5_2fwo", "created_utc": "1193494153", "ups": -6, "gilded": 0, "link_id": "t3_5z7jr", "downs": 0, "score": -6, "body": "Thanks for posting the second link. That was so ridiculous stupid that it nearly isn't funny anymore.\n\nWhoever wrote this should get a clue or quit wasting his time with something he apparently doesn't like. Only making a fool out of himself doesn't help anyone.", "author": "TrueTom", "author_flair_text": null, "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit": "programming", "name": "t1_c02bnhh", "parent_id": "t1_c02bn9z", "score_hidden": false, "id": "c02bnhh"}], "subreddit": "programming", "name": "t1_c02bn9z", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 2, "link_id": "t3_5z7jr", "retrieved_on": 1427425224, "body": "Oh, I realize that all right:\n\nhttp://yosefk.com/c++fqa/picture.html#fqa-6.2\nhttp://yosefk.com/c++fqa/defective.html#defect-11\n\nThe question is, do you identify with the language designer or the language user when you evaluate the compromises?", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02bm8n", "id": "c02bn9z", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 6, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z7jr", "retrieved_on": 1427425238, "body": "Those who understand C++ not only realize it is a language of compromises but also realize why those compromises are made. ", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02bm8n", "parent_id": "t1_c02bkn3", "id": "c02bm8n", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 6, "author": "[deleted]", "created_utc": "1193462722", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -2, "author": "username223", "created_utc": "1193467207", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 3, "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425224, "score": 3, "body": "It's a good thing you didn't actually say it.", "author": "yosefk", "created_utc": "1193489887", "distinguished": null, "edited": false, "id": "c02bna2", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02bna2", "parent_id": "t1_c02bmjw", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02bmjw", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": -2, "link_id": "t3_5z7jr", "retrieved_on": 1427425234, "body": "I'd say that it's a frenzied wanking.  But then again, maybe that's kind of the same thing...", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02bmdm", "id": "c02bmjw", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 4, "author": "joelthelion", "created_utc": "1193476729", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 0, "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425188, "score": 0, "id": "c02bq1v", "author": "[deleted]", "created_utc": "1193529508", "distinguished": null, "edited": false, "body": "Ironically, in using C++ for the performance-critical 10%, I'm finding that it's actually the bottleneck of my program.  That is, a significant fraction of execution time is spent simply initializing objects, many times for reasons that seem unfathomable to me (why is it so hard to allocate an array of structs?).  \n\nFor this reason, and the reasons in the FQA, I'm thinking of just ditching C++ altogether.", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02bq1v", "parent_id": "t1_c02bmwl", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 4, "score_hidden": false, "controversiality": 0, "archived": true, "link_id": "t3_5z7jr", "retrieved_on": 1427425229, "id": "c02bmwl", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02bmwl", "parent_id": "t1_c02bmdm", "body": "I use python together with C for performance-criticial parts. C++ unnecessarily to be used only for low-level,performance-critical bits of code.\n\nOf course you can replace python by any high-level language of your choice.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02bmdm", "ups": 6, "controversiality": 0, "archived": true, "link_id": "t3_5z7jr", "retrieved_on": 1427425236, "score_hidden": false, "id": "c02bmdm", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bkn3", "body": "I'd say that it's a devastating attack.  \n\nMy recent solution to this has been to write most code in a high-level language, implementing just the 10% or so of performance-critical code in C++.  This somewhat limits the damage, but even dealing with the reduced set of C++ is an exercise in masochism.\n\nThe hard part, admittedly, is figuring out what can replace that last 10% of C++ (which is speed- and/or space-critical).  The candidates I'm considering are C, Ocaml, and D, and of these only C really seems like a broad solution.", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 0, "author": "Xiphorian", "created_utc": "1193470301", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 19, "author": "[deleted]", "created_utc": "1193482664", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "yosefk", "created_utc": "1193494146", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02bnle", "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425221, "score": 0, "body": "[deleted]", "author": "[deleted]", "created_utc": "1193496078", "distinguished": null, "edited": false, "id": "c02bnle", "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 0, "parent_id": "t1_c02bnhg", "score_hidden": false, "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 9, "author": "Xiphorian", "created_utc": "1193508593", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 6, "author": "yosefk", "created_utc": "1193515223", "children": [{"controversiality": 0, "retrieved_on": 1427425201, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02bp4j", "gilded": 0, "link_id": "t3_5z7jr", "downs": 0, "score": -1, "score_hidden": false, "body": " I'll agree with you that parsing C++ in such a way that the resulting parse tree represents the semantics of the language is nearly impossible -- which is something not true of other languages.\n\nHowever, I don't agree that that actually raises the overall complexity by very much.\n\nI mean, say we're working with an expression like `i = 0;` or `s = s + y;`.\n\nWe have to do significant analysis to determine what these actually mean.  Maybe `i`'s type has overloaded `operator=`?  Maybe `s`'s type has overloaded `operator+` and the expression is string concatenation.\n\nSo it's not like we can just take the parse tree and say \"that's what it means!\".  We have to do a bunch of analysis on the parse tree to determine what actual method is being called.\n\nI don't think the analysis one has to do to look up which method is being called in those contexts is any less difficult than figuring out what `AA BB(CC);` means.  In both cases you have to take the expression (`i`, `s`, `CC` here) and ask, what is its type?  Where is it defined?\n\nIf we have the ability to look up the type of `i` in `i = 0;` is it so hard to look up `CC` in `AA BB(CC);`?\n\nI don't think this burden is less in other languages like Java.  I mean, `s = x + y;` could be string concatenation in Java too.\n\nIs binding in an overloading scenario really much more work than resolving the meaning of `AA BB(CC);`?  \n\nI know what you're saying is that it's really hard to parse because etc etc., but what I'm saying is that you just shouldn't even try to parse that.  You should resolve it during analysis.  I know of at least one compiler that works this way.\n\nWhy would anyone try to solve that problem in the parser? ", "author": "Xiphorian", "created_utc": "1193517016", "distinguished": null, "edited": true, "author_flair_text": null, "subreddit": "programming", "ups": -1, "parent_id": "t1_c02boyw", "id": "c02bp4j", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 6, "controversiality": 0, "archived": true, "link_id": "t3_5z7jr", "retrieved_on": 1427425203, "id": "c02boyw", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02boyw", "parent_id": "t1_c02bof1", "body": "Of course I know about the Chomsky hierarchy. In a scientific paper, you can't say things like \"nearly context-free\". But in real life, you can compare the degree of dependence on context and the complexity of representing it and recovering from errors. There's the theory of parsing, which is important (and was a hot topic back in the sixties), and the practice of parsing, which is also important if you actually do it. Try parsing C and C++ and you'll see what I mean.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02bof1", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 9, "link_id": "t3_5z7jr", "retrieved_on": 1427425210, "body": "&gt; \"Parsing theory\". I love the scientific sound.\r\n\r\nYour reply just goes to show that you are not educated in this area.\r\n\r\nParsing theory is a very real subject that any computer science PhD will be able to tell you about.  More generally known as just [Parsing](http://en.wikipedia.org/wiki/Parsing) it encompasses the mathematical concepts behind automata, grammars, and computability.  Whole [books](http://www.amazon.com/s/105-2081346-7988468?ie=UTF8&amp;tag=mozilla-20&amp;index=blended&amp;link_code=qs&amp;field-keywords=parsing&amp;sourceid=Mozilla-search) have been written just on it alone.  It is an area of study that spans beyond computer science into linguistics.  It is there error of a novice to assume something is simpler than it actually is.\r\n\r\n&gt; A great example, and I wish I included something like this somewhere in the FQA\r\n\r\nPlenty of the points you made were good.  But I don't think you know much about parsing!\r\n\r\n&gt; all you have to do is to keep a single dictionary of all typedefs\r\n\r\n&gt; This is what I call \"nearly context-free\"\r\n\r\nThat's a term invented by a person who doesn't know what \"context-free\" means.  As a layman's proof, if you're keeping a dictionary of **context** then it's not **context-free**.  It's easy to demonstrate a more precise proof to someone who knows what the definition of context-free actually is.  I'll be happy to show you why a variable name cannot be matched in multiple places by a context-free grammar alone.\r\n\r\nIn any case, the confusion here stems from the difference between syntax and semantics.  Parsing most languages can be done with a context-free grammar.  However there is associated semantic analysis that is rarely less than the order of context-sensitive and is usually Turing complete.\r\n\r\nI can tell you probably don't actually know the precise definition of \"context-sensitive\" \"context-free\", \"regular\", etc., so I will kindly direct you to the [Chomsky hierarchy](http://en.wikipedia.org/wiki/Chomsky_hierarchy) and let you read it.\r\n\r\nWhat it comes down to is that there are 4 very distinct classes of languages (divided on how hard it is to determine if an example sentence in the language is correct).  The simplest is Regular languages, followed by context-free, then context-sensitive, then Turing-complete.  This is the Chomsky hierarchy and it's at the foundation of \"what computation is\".\r\n\r\nPlease take a college class or two before spouting trash on the Internet.\r\n\r\n\"nearly context-free\".  I love the scientific sound.  Too bad anyone with even a bachlor's in CS will know you're making things up.\r\n\r\n     ", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02bnhg", "id": "c02bof1", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02bnhg", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425221, "id": "c02bnhg", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bn2b", "body": "A knockdown... if people used real names on the net, they would think before they type. \"Parsing theory\". I love the scientific sound.\n\nA great example, and I wish I included something like this somewhere in the FQA (damn, I can't parse it myself, took about 5 retries!). The other part of the problem is that it's very hard to figure out whether x is a type or not, since it can really be Template&lt;args&gt;::Something, and the template can be recursive and it can depend on the platform by using sizeof as a parameter and the sizeof can be that of a class with virtual inheritance and stuff. In C, all you have to do is to keep a single dictionary of all typedefs, and you're done. This is what I call \"nearly context-free\" - you can't get your job done quite as neatly when you parse C, but at least you can get it done.\n\nCan I include your example in a special FQA section with submissions by other people? I don't want to edit the FQA unless there are actual spelling/C++ errors, since my opponents (I mean the human ones, not the trolls) can cite it and then have it changed without prior notice. But it would be great to have it at the site.", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 12, "author": "Xiphorian", "created_utc": "1193508429", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": 9, "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425203, "score": 9, "body": "Well, I have two suggestions for you:\n\n1. Use a vector of characters as your parse tree. It represents the structure of the translation unit, all right. Then you can do the rest in the semantic analysis pass.\n\n2. Write a refactoring browser for C++ that works. You'll make a fortune.", "id": "c02boyj", "author": "yosefk", "created_utc": "1193515031", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02boyj", "parent_id": "t1_c02boek", "score_hidden": false, "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "[deleted]", "created_utc": "1193526101", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 4, "author": "Xiphorian", "created_utc": "1193530137", "children": [{"controversiality": 0, "retrieved_on": 1427425186, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02bq6u", "gilded": 0, "link_id": "t3_5z7jr", "downs": 0, "score": 1, "score_hidden": false, "id": "c02bq6u", "author": "Xiphorian", "created_utc": "1193531481", "distinguished": null, "edited": true, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c02bq3h", "body": "Also, I wanted to add:\n\nI understand what you're saying, that ordinarily you expect these expressions to have completely different parse trees (where `b` is an integer):\n\n`int n(b);` (variable definition)\n\n`int n(int);` (function declaration) \n\nIn the technique I am proposing, they would have *exactly* the same (name-isomorphic) parse tree: a ObjDefOrMethodDecl that has a `TypeExpr` of `int` and an `Args` of a single identifier.\n\n&gt; ObjDefOrMethDecl := TypeExpr Id ( Args )\n\nPerhaps it is confusing if you have not encountered this technique before, but it is not some unsolvable problem.\n\nThe analysis that the syntax tree undergoes looks at the *context*, the binding of our `Id` node; it sees `int` is a type while `b` is a variable.  Then it rewrites the syntax tree or annotates it, depending on how you want to do it.\n\nBut, it's not a problem.  Does this make sense? \n\nHopefully you agree that in the case of `int n(int);` vs `int n(b);` it is easy to distinguish these from one another and rewrite the tree.  I am guessing you have some more complex example in mind.  Type it out and let's discuss it!", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "[deleted]", "created_utc": "1193532501", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "Xiphorian", "created_utc": "1193537454", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -1, "author": "[deleted]", "created_utc": "1193565368", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "Xiphorian", "created_utc": "1193599839", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1193615245", "ups": 10, "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425124, "score": 10, "body": "[deleted]", "id": "c02buzt", "author": "[deleted]", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "name": "t1_c02buzt", "parent_id": "t1_c02btse", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02btse", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 2, "link_id": "t3_5z7jr", "retrieved_on": 1427425141, "body": "Thank you for your explanation.  This conversation is giving my brain a workout, and I appreciate it :-)\n\nI don't see how this is a problem of the parse tree, however.  I think this is purely a problem of how one stores bindings in the environment.\n\nConsider a `for` loop:\n\n&gt; `for (int i = 0; i &lt; 10; ++i) { ... }`\n\nWhen one is analyzing this loop, one does not evaluate all sub-nodes with the same environment.  `int i = 0` is analyzed with one, creating a *new* environment with which `i &lt; 10` and others are analyzed.\n\nThe C++ program fragment you mentioned is not a problem because it does not actually change the parse tree.\n\nConsider some statement:\n\n&gt; `int n = sizeof(n);`\n\nAs you pointed out, this number `n` is assigned the size of itself, `sizeof(int)`.  However, properly processing this statement requires no more trickery than managing bindings for different pieces of a `for` loop.\n\nAll we have to do is descend into the node `int n` (LHS) first, and create a binding for it that is present in the environment when we descend `sizeof(n)`.  The binding environment we use for the 'value' part of the assignment contains the information that `n` has not been initialized so we can warn on `int n = n;`, even though that is legal.  Then, a regular binding is created for all following statements in the program (respecting scope of course).\n\nIn your example we have this variable being shadowed:\n\n&gt; `typedef char n;`\n\n&gt; ...\n\n&gt; `int n = sizeof(n);`\n\n&gt; `int n(sizeof(n)); // or this, same thing`\n\nHow is this tricky?  Solving that problem is no different than solving any other shadowing problem.  Consider:\n\n&gt; `int n = 0;`\n&gt; `void f() { int n = 10; }`\n\nDoes solving this problem require messing with the parse tree?  No, I don't think it does -- it just requires the correct environment bindings in the correct places.\n\n&gt; I could make this program more complicated, so that I instantiate a template based on sizeof(c)\n\nBut I still don't see how that's a problem.  Let us say you have *any* variable `N`, and you are going to instantiate a template based on `sizeof(N)`.  Isn't this just as simple as looking up the binding for `N`?  The parse tree here will just be `Identifier` for `N`.  Whether that has been `typedef` or declared a variable is a problem solved by the environment. ", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02bs1q", "id": "c02btse", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": -1, "score_hidden": false, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z7jr", "retrieved_on": 1427425162, "body": "[deleted]", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02bs1q", "parent_id": "t1_c02bqk0", "id": "c02bs1q", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 3, "name": "t1_c02bqk0", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z7jr", "retrieved_on": 1427425182, "score_hidden": false, "body": "Thank you for taking the time to explain.  Yes, your objection is correct -- and it would be a problem if we were trying to model this with a two-phase system of (1) parse (2) semantic analysis.\n\nHowever, I was thinking that we were doing this with a single pass.  When I said above:\n\n&gt; [semantic analysis] happens after parsing has completed for a statement\n\nwhat I meant was that after we have parsed a Statement (before we continue, like say we're working on \";\") we perform this semantic analysis.  That is the only way it would be possible to consider this \"1-pass\".  If we are speaking of generating the syntax tree all at once, and handing it off to another module for analysis, then that is 2-pass, right?\n\nAnyway, perhaps I was not clear, but this is what I intended to convey.  Rather than performing semantic analysis after parsing is completely finished, we can perform it after any given statement has been parsed.\n\nIn this situation, just as the rule for `ObjDefOrMethodDecl` has associated analysis, so would `TypeExpr`.  In this situation, just as `ObjDefForMethodDecl` will reject if the `Identifier` already exists (and other criteria), so will `TypeExpr` reject if its identifier is not a variable but a type.\n\nIn the example above, `x * y(z)` you are right that the rule I mentioned would parse `x*` as `TypeExpr` if that were the only rule.  I was thinking that `TypeExpr`'s analysis would, like `ObjDefForMethodDecl`, reject if (for example) `x` is a variable and not a type.\n\nAm I being clear?\n\nPerhaps we are both communicating about the same thing.  What I intended to convey is that it's not a *parsing* problem per se -- it's a problem of semantic analysis, whose job it is to reject invalid parse trees.  I suspect that the code we would both write to solve this problem would be similar.  However, I think of these validation steps as something different than parsing, even if they co-mingle.\n\nMost compilers I know of are hand-coded for good error reporting, so this is not a problem.", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02bq96", "id": "c02bqk0", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 3, "name": "t1_c02bq96", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z7jr", "retrieved_on": 1427425187, "score_hidden": false, "body": "[deleted]", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02bq3h", "id": "c02bq96", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 4, "controversiality": 0, "archived": true, "link_id": "t3_5z7jr", "retrieved_on": 1427425188, "id": "c02bq3h", "author_flair_text": null, "distinguished": null, "edited": true, "name": "t1_c02bq3h", "parent_id": "t1_c02bprf", "body": "Can you be more specific?  The grammar I provided wouldn't match `x * y(z)` in the first place.  The rule I mentioned would be beneath Statement and would be an alternative to Expression.\n\nI don't see how `AA BB(CC);` is ever legal C++ except when `AA` is a type.  Maybe I'm forgetting a case.  Can you provide an example?\n\nStatement := Expr | ObjDefOrMethDecl\n\nObjDefOrMethDecl := TypeExpr Id ( Args )\n\nNo *expression* could match `AA BB(CC);` -- that syntax can only appear as a *statement*.\n\nExample parse:\n\n&gt; `// T is a type`\n\n&gt; `int i(T);`\n\nWe see that `Args` is a list of a single identifier.  This identifier binds to a type, and therefore this must be a declaration.  The `ObjDefOrMethDecl` is annotated accordingly -- or even replaced in the syntax tree.\n\n&gt; `// b is a value`\n\n&gt; `int i(b);`\n\nHere `Args` is a list of a single identifier, which is bound and is a value.\n\n&gt; `std::list&lt;int&gt;::iterator i(l.begin());`\n\n`Args` is a list of one `Expr` so this is a variable definition.  \n\n&gt; `int i(int);`\n\nHere `Args` can only be parsed as a `Type`.  No problem.  (If your parser permits variables named `int`, then this is still not a problem: we look for a variable named `int`, don't find one, but do find a type named `int`.  Therefore this is a declaration)\n\n&gt; `int i(int());`\n&gt; (this is the same as int i = int();\n&gt; or int i = 0;)\n\nIn this case, `int()` can only be parsed as an expression (the default constructor of `int`) -- no problem.\n\nIn the case where `Args` is obviously a type or obviously an expression, there is no problem.  When `Args` is a list of identifiers, you check to see if those identifiers are variables or types.  If they're types, this is a declaration; if variables, a definition. \n\nCould you give an example of what you think would be a problem?  I will say again that our `ObjDefOrMethodDecl` production is not at odds with anything else in the grammar because it is the only place `AA BB(CC);` is well-formed in C++.  ", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 3, "controversiality": 0, "archived": true, "link_id": "t3_5z7jr", "retrieved_on": 1427425192, "id": "c02bprf", "author_flair_text": null, "distinguished": null, "edited": true, "name": "t1_c02bprf", "parent_id": "t1_c02boek", "body": "[deleted]", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 12, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z7jr", "retrieved_on": 1427425211, "body": " The error in your logic is the mistaken assumption that the parse tree needs to reflect, *itself*, the semantics of the programming language.  **It doesn't**.  It just needs to *parse* it.\r\n\r\nCan you make, just generally, a parser that accepts strings of the form `AA BB(CC);`?  Yes, quite easily.  Does the **parser** need to know what kind of statement that is?  **Absolutely not**.\r\n\r\nIt is totally fine to have a single parse tree for the two variants of *meaning* of `AA BB(CC);`.  It is not necessary that you have a parse tree that represents the meaning of a language, only its **structure**.  Syntax and semantics are different things, and `AA BB(CC);` statements share syntax.  1 parse tree is fine.\r\n\r\nExample grammar:\r\n\r\n    ObjectDefOrMethodDecl := TypeExpr Identifier ( ArgumentList )\r\n\r\nDo you see?  Now it's accepted by the parser.  It's not 'wrong' or 'right' -- it just is.  It's perfectly OK that the parser doesn't figure out which one it's supposed to be, or whether it's correct in context.  That happens later.\r\n\r\n&gt; You can not (more precisely, no one did it in a real C/C++ compiler) fix a wrong parse tree in semantic analysis pass.\r\n\r\nIt doesn't need to \"fix\" anything because the parse tree is not wrong.  The parse tree is just syntax.  Interpreting the syntax according to the context is **semantic analysis**.  It happens after parsing has completed for a statement, just like type checking.\r\n\r\n&gt; No existing compiler does it in two separate passes.\r\n\r\nNo one is saying it needs two passes.  You don't need two passes to perform type checking, do you?  Or did you think that the parser does type checking?  Certainly type checking happens *after* a statement has been parsed.\r\n\r\nWhen parsing is finished on that statement, even a simple statement like `T i = 0;` it is run through a bunch of other semantic analysis.  The analysis asks \"Is `T` in scope?\" and \"Has `i` already been declared?\".\r\n\r\nIt is quite easy to, right at that time, determine which meaning to assign to `AA BB(CC);` and I assure you commercial compilers work this way.", "archived": true, "distinguished": null, "edited": true, "name": "t1_c02boek", "parent_id": "t1_c02bn2b", "id": "c02boek", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "wolverine911", "created_utc": "1193509832", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193514233", "name": "t1_c02bowe", "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425205, "score": 2, "score_hidden": false, "id": "c02bowe", "author": "remedyfrobulator", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 2, "parent_id": "t1_c02boiz", "body": "most of them actually are 1-pass but that doesn't mean they don't have analysis steps after parsing", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425191, "subreddit_id": "t5_2fwo", "created_utc": "1193526954", "ups": 2, "gilded": 0, "link_id": "t3_5z7jr", "downs": 0, "score": 2, "id": "c02bpud", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "body": "[deleted]", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02bpud", "parent_id": "t1_c02boiz", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": 1, "name": "t1_c02boiz", "controversiality": 0, "archived": true, "link_id": "t3_5z7jr", "retrieved_on": 1427425208, "score_hidden": false, "id": "c02boiz", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bn2b", "body": "your 'anecdotal' knowledge of how 'every' C++ compiler in the field is implemented is incorrect.  there are many multi-pass compilers.\n\ncomeau C++.  \n\ndo think export would work with only 1 pass?  hah!  moron", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "jeremy2003", "created_utc": "1193511305", "children": [{"controversiality": 0, "retrieved_on": 1427425191, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02bpth", "gilded": 0, "link_id": "t3_5z7jr", "downs": 0, "score": 1, "score_hidden": false, "body": "[deleted]", "author": "[deleted]", "created_utc": "1193526749", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c02bone", "id": "c02bpth", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 1, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z7jr", "retrieved_on": 1427425206, "body": "I am sorry, but you seem to be confused more than the grandparent.  The semantic analysis does not need to happen in a second pass, which is what you seem to be implying.\n\nDid you think the parser does all the work of compiling it?\n\nLet us say we have a statement like:\n\n&gt; int a = 10;\n\nThe parser can't tell us whether \"a\" has already been defined, can it?  Of course it cannot.\n\nTherefore, when we look at this statement, we must perform semantic analysis (based on context) to determine if it is correct.\n\nIn this case, when we are looking at the parse node \"int a = 10;\" we look in our context to determine if \"a\" has already been defined, if \"int\" is a valid type, et cetera.\n\nThat is the semantic analysis the grandparent is referring to, and it does not need to happen in a separate pass.  It happens right along with the first pass. ", "archived": true, "distinguished": null, "edited": true, "name": "t1_c02bone", "parent_id": "t1_c02bn2b", "id": "c02bone", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425205, "subreddit_id": "t5_2fwo", "author_flair_text": null, "name": "t1_c02borx", "gilded": 0, "link_id": "t3_5z7jr", "downs": 0, "score": 1, "score_hidden": false, "id": "c02borx", "author": "programmer-king", "created_utc": "1193512584", "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "ups": 1, "parent_id": "t1_c02bn2b", "body": "&gt; which is illegal and its parse tree is entirely different from cases a) and b)\n\nhes saying that the parse tree doesnt have to be different.  why does it?  the compiler can assign two different meanings to a single parse tree no prob.  its just like you said, look at the context.\n\nu can have a single parse tree that represents `AA BB(CC);`  the parse tree itself will not contain the information about which variant it is, ie what the statement actually means.\n\nthen sometime later, the program looks at where the statement is (outside a method maybe) and looks at the type `AA` in the context and determines which form it is supposed to be.  if you are storing all your info in the AST then just annotate it with which type of expression it is.\n\nsee?  no problem.  lets all relax now", "author_flair_css_class": null}], "subreddit": "programming", "ups": 19, "name": "t1_c02bn2b", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z7jr", "retrieved_on": 1427425227, "score_hidden": false, "body": "[deleted]", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02bmog", "id": "c02bn2b", "author_flair_css_class": null}], "subreddit": "programming", "ups": 0, "name": "t1_c02bmog", "controversiality": 0, "archived": true, "link_id": "t3_5z7jr", "retrieved_on": 1427425233, "score_hidden": false, "id": "c02bmog", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02bkn3", "body": "The author doesn't know much about parsing theory either.\r\n\r\n&gt; all popular languages have context-free (or \"nearly\" context-free) grammars\r\n\r\n&gt; is AA BB(CC); an object definition or a function declaration?\r\n\r\nThat example is *totally not* an example of a problem the parser solves.  That's solved by semantic analysis on the already-delivered parse tree.  The *grammar* can be context-free in this situation, although its semantics are more complicated.\r\n\r\nHis assertion is totally false that most programming languages are less complicated.  The semantics of any given programming language is definitely not context-free, and we know that because context-free grammars (CFG) cannot match a single character string (like \"variablename\") repeated.  \r\n\r\nThat is to say, you cannot write a CFG that validates even something as simple as ABCABC (where ABC is any string that may be repeated).  Clearly one also cannot validate the following with a CFG:\r\n\r\n    int varname;\r\n    varname = 3;\r\n\r\nThe reason that that's not a problem is because you don't perform that kind of validation in the parser.  That semantic analysis happens after the parser is finished. \r\n\r\n(Edit:  I am not suggesting a *second pass*.  I'm saying that analysis happens after a statement has finished parsing.  As someone noted below, let's say you have `T i = 0;`  Is this correct?  You only know by semantic analysis, looking at `T` and `i` has they have been defined in context.  That analysis step can also be used to discriminate the possible meanings of `AA BB(CC);` just like it can discriminate whether `T i = 0;` is correct (`i` already defined, `T` not in scope)\r\n\r\n*Clearly* multiple analyzers look at the program, even after statements have been assigned meaning.  Or did you think the parser does type-checking too?  The analysis such as to determine whether `C a(b,d);` is type-correct happens after the parser is finished.\r\n\r\nMost specifically, it is not necessary that the parser distinguish the same things the semantic analyzer does.  It's fine to have a single parse tree `X Y` which is assigned two different meanings later on based on the context, such as the earlier definitions of `X`, `Y`.  You **don't** need two different parse trees for that, really!)  ", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 13, "author": "joelthelion", "created_utc": "1193470593", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 4, "author": "joelthelion", "created_utc": "1193475021", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": 7, "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425228, "score": 7, "body": "  I down voted you because in your opinion C++ is a terrible language (which is fine so far) but wanted someone else to debunk the article so apparently you don't know C++ very well. Therefore I wonder how you came to your opinion.\n\nMost of the stuff in article can actually be debunked but it's not worth the time. C++ has a lot of problems but this article is just wanking.\n\nI wish you a nice weekend though.  ", "id": "c02bn08", "author": "TrueTom", "created_utc": "1193480624", "distinguished": null, "edited": true, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02bn08", "parent_id": "t1_c02bmul", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 4, "controversiality": 0, "archived": true, "link_id": "t3_5z7jr", "retrieved_on": 1427425231, "id": "c02bmul", "author_flair_text": null, "distinguished": null, "edited": true, "name": "t1_c02bmul", "parent_id": "t1_c02bmov", "body": " Downmodding me without answering pretty much proves my point : you have used C++ for too long and don't want to recognize it's a terrible language, no matter how good the arguments are.", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "repiret", "created_utc": "1193687721", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "joelthelion", "created_utc": "1193689531", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": 3, "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425037, "score": 3, "created_utc": "1193695780", "body": "My argument wasn't meant to be that having built in types is intrinsically bad, but that restricting the nice syntax that tends to come with them is bad.  And without that restriction, the advantages of being built in rather than being part of a standard library are pretty small.\n\nIn Python you can overload [] and {} on your own custom types; if your domain has a need for some specialized type of dict or list, you can make it.\n\nConceptually, every python module begins with an implicit \"from builtins import *\".  dict and list could be classes in that builtin module, on equal footing with any other class--And still have the nice syntax!  If list and dict were implemented that way, I doubt very many python programmers would notice, and those that did would probably like it better.  I know I've ran into cases where I've had to treat list and dict specially because they were builtin types and not quite classes.  (In fact, I think Python 3000 will do away with the notion of builtin types.  There will just be standard library classes that you need magic to implement.)", "author": "repiret", "archived": true, "distinguished": null, "edited": false, "subreddit_id": "t5_2fwo", "score_hidden": false, "name": "t1_c02c1os", "parent_id": "t1_c02c111", "id": "c02c1os", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 0, "score_hidden": false, "controversiality": 0, "archived": true, "link_id": "t3_5z7jr", "retrieved_on": 1427425047, "id": "c02c111", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02c111", "parent_id": "t1_c02c0su", "body": "Thank you, great answer! Too bad the discussion is over...\n\nI'll just react on one of your points:\n\n&gt;\"Arrays: should be built into the language, too.\" For all the talk about things that should be built into the language, he hasn't said why thats a good thing. I think I make a good point of why its a good thing to be able to make things not built into the language. And if you can make your flexible arrays not built in, what do you gain by building them in?\n\nWhat you gain is a clean and simple syntax. In python, lists and maps are built into the language, and you create them with a simple [] {}. The code is much, much nicer to read and to write. You might argue that some domains don't require lists and maps, but I think they are so general that it is safe to say that 99% of non-trivial programs require them.", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 3, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z7jr", "retrieved_on": 1427425049, "body": "Sure.  Let me pick a couple ones off.\n\n13.1: His arguments seem to be that operator overloading makes code harder to read because you don't know what the operator will do.  Then he reiterates that he doesn't like C++ exceptions.\n\nI won't debunk his exception rant, but I will at least say that the alternatives to operator overloading don't change the exception situation.\n\n\"a + b\" is no more capable of being misleading then \"add(a, b)\" or \"add_a_foo_to_a_bar(a, b)\".  Just by reading the call, I have no idea what any of those functions do.  Thats the case of all functions, everywhere.  We always rely on people naming functions well.  Sometimes \"+\" is a really good name for a function.\n\n13.2: I don't see an argument here.  He asserts that one shouldn't use C++, and talks about arguments he makes elsewhere.\n\n13.3: He makes several arguments.\n\n1. \"There should be a built-in string type\" - While string processing is popular in some domains, its almost totally unused in others.  A general purpose language should have all the mechanics for one to build the types that make sense in their domain.  C++ comes with a pretty good general purpose string type, and the tools for you to make a more specialized one for more specialized domains.\n\n2. \"what does date++ mean?\".  Seriously?  Do you think if I go ask 100 people what date comes after 13 Feb 1969, I'll get a bunch of different answers?  Ya, if you write ++ for a type that doesn't have a natural well ordering, then you've made a mistake.  If you write a function named \"succ\" for a types that doesn't have a natural well ordering, then you've made a mistake.  You probably shouldn't write ++ for a time type.  And yes, what ++ does depends on the type.  But even in C, what + does depends on the type.  Whether (a + 0 == a) depends on the type of a in C, and in fact, the only languages I know where thats not the case are OCaml and Lua.\n\n3. \"Numbers: should be built into your language\".  Compilers should have every conceivable number type?  Building in support for arbitrarily sized matrices of arbitrary-precision complex-rational numbers is kinda hard, but I've never needed those.  When I buy a compiler, I don't want to pay for the expense of maintaining such a library unless I'm actually going to use it.  The more stuff you add to a language, the more expensive compilers become.  What if I want to use a type of number the language designer didn't think of?  No matter how extensive the built-in number support is, there will always be something left out.  Surreal numbers, quaternions, and so on.\n\n4. \"Arrays: should be built into the language, too.\"  For all the talk about things that should be built into the language, he hasn't said why thats a good thing.  I think I make a good point of why its a good thing to be able to make things not built into the language.  And if you can make your flexible arrays not built in, what do you gain by building them in?  \n\n5. \"Smart pointers to disk records...\" who is calling who names?  This is the kind of incendiary language used throughout.  \n\nLots of his points can be similarly debunked.  Hidden in there he has some points for which a good argument could be made both in favor of C++ and against it, and even some for which C++ is clearly in the wrong, but for none of these does he provide a clear, level-headed argument.  And its all veiled in incendiary language and a huge pile of easily debunked points.  So, I maintain that this is a very poor critique of C++.\n\n", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02c0su", "parent_id": "t1_c02bmov", "id": "c02c0su", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 13, "name": "t1_c02bmov", "controversiality": 0, "archived": true, "link_id": "t3_5z7jr", "retrieved_on": 1427425233, "score_hidden": false, "id": "c02bmov", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02bkn3", "body": " Would you mind debunking a few of their arguments then? I find them very compelling.\n\nEdit : the parent comment is absolutely devoid of information, if you read it closely. However, this kind of comments always gets modded very high on reddit because it sounds informative and it is not too controversial. ", "author_flair_css_class": null}], "subreddit": "programming", "ups": -4, "name": "t1_c02bkn3", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z7jr", "retrieved_on": 1427425258, "score_hidden": false, "body": "Yet another criticism of C++ by someone who doesn't understand it.  I've seen good critiques of C++, but this isn't one of them.  This is all the complaints that someone who expects C++ to be more like C or more like Java to write.  C++ has different strengths and weaknesses from both those languages, and needs to be used differently.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5z7jr", "id": "c02bkn3", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": 1, "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425257, "score": 1, "body": "[deleted]", "author": "[deleted]", "created_utc": "1193439945", "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02bksb", "parent_id": "t3_5z7jr", "score_hidden": false, "id": "c02bksb"}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -11, "author": "[deleted]", "created_utc": "1193440523", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1193460513", "ups": 1, "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425237, "score": 1, "body": "Indeed, we should all be using Forth.", "author": "OMouse", "author_flair_text": null, "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit": "programming", "name": "t1_c02bmaf", "parent_id": "t1_c02bkuj", "score_hidden": false, "id": "c02bmaf"}], "subreddit_id": "t5_2fwo", "ups": -11, "name": "t1_c02bkuj", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z7jr", "retrieved_on": 1427425257, "score_hidden": false, "body": "[deleted]", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5z7jr", "id": "c02bkuj", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 15, "author": "krelian", "created_utc": "1193453591", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 21, "author": "WalterBright", "created_utc": "1193471148", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193493466", "name": "t1_c02bng8", "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425222, "score": 3, "score_hidden": false, "id": "c02bng8", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 3, "parent_id": "t1_c02bmpu", "body": "There's an important difference between fisking and criticism, though.  Fisking can be done to anything, and for an unbiased observer, usually only proves that the author is full of himself.  As in this case.\n", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "krelian", "created_utc": "1193505204", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c02bqid", "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425182, "score": 2, "body": "You can't blame them - people get emotionally attached to everything around them. I think you can say that I have some kind of \"emotional attachment\" to the language, and so do you - or else we wouldn't be discussing this; the emotions are of course quite different.", "author": "yosefk", "created_utc": "1193536673", "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "ups": 2, "parent_id": "t1_c02bo5r", "score_hidden": false, "id": "c02bqid"}], "subreddit_id": "t5_2fwo", "ups": 2, "name": "t1_c02bo5r", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z7jr", "retrieved_on": 1427425213, "score_hidden": false, "body": "From reading the comments of those who do not agree with the article, the only thing that comes to mind is that they have some kind of emotional attachment to the language.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02bmpu", "id": "c02bo5r", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 21, "score_hidden": false, "controversiality": 0, "archived": true, "link_id": "t3_5z7jr", "retrieved_on": 1427425231, "id": "c02bmpu", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02bmpu", "parent_id": "t1_c02blvj", "body": "Being in the language business, I learn as much from criticism of a language as I do from advocacy of it. I like to know what works and what doesn't work for people, and I was very curious what people thought of these criticisms.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "name": "t1_c02blvj", "controversiality": 0, "author_flair_text": null, "ups": 15, "link_id": "t3_5z7jr", "retrieved_on": 1427425242, "body": " I am no in no way a C++ expert but this was an insightful, interesting and extremely well argumented.\n\nThis should become compulsory reading for c++ programmers if only because it can help you avoid the many pitfalls that could come in your way.\n\nI also find it funny that is was posted by Walter Bright, specifically after many here criticized D in a different article posted a few days ago. \n ", "archived": true, "distinguished": null, "edited": true, "parent_id": "t3_5z7jr", "id": "c02blvj", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -8, "author": "Whisper", "created_utc": "1193468231", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193470025", "name": "t1_c02bmo6", "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425233, "score": 4, "score_hidden": false, "id": "c02bmo6", "author": "lliiffee", "author_flair_text": null, "distinguished": null, "edited": true, "archived": true, "subreddit_id": "t5_2fwo", "ups": 4, "parent_id": "t1_c02bmli", "body": " Better:\n\n\"C++ is a *really really large* low-level language. We don't like low-level languages.  We don't like large languages. We think all languages should be high-level and small.\" ", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "author_flair_text": null, "name": "t1_c02bnbm", "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425224, "score": 7, "score_hidden": false, "body": "I like C. I like D. I like Objective-C. I enjoy assembly. And I have a special place in my heart for Forth.\n\nI don't like languages that make promises they can't keep about being high-level.", "author": "yosefk", "created_utc": "1193490922", "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "ups": 7, "parent_id": "t1_c02bmli", "id": "c02bnbm", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02bmli", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": -8, "link_id": "t3_5z7jr", "retrieved_on": 1427425233, "body": "Here, I'll summarize:\n\n\"C++ is a low-level language. We don't like low-level languages. We think all languages should be high-level.\"\n", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5z7jr", "id": "c02bmli", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -7, "author": "[deleted]", "created_utc": "1193486452", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 9, "author": "yosefk", "created_utc": "1193489570", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "deong", "created_utc": "1193506694", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "yosefk", "created_utc": "1193507826", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193552137", "name": "t1_c02brfv", "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425172, "score": 2, "score_hidden": false, "body": "I think you're wrong about exceptions. It is hard, but writing error-return code is even harder. As a language climbs up abstraction ladder, exceptions are the norm. C++, trying to cover bigger space of said ladder, is in fact correct in having them optionally. For low-level code, you turn it off. You choose.\n\nYou're right about operator overloading and exceptions, though.\n\nAnd smart pointers to disk record... Yes, a bad idea, but you can work up a context where it isn't so. How about Intel compiler and not disk, but file records?", "author": "Gotebe", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 2, "parent_id": "t1_c02bock", "id": "c02brfv", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 2, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z7jr", "retrieved_on": 1427425211, "body": "The FQA is itself a rebuttal of the C++ FAQ. The C++ FAQ explicitly mentions using operator overloading to implement smart pointers to disk records. Operator overloading basically forces you to handle errors with exceptions. Writing exception safe code in C++ is hard - there's a separate section about that. Therefore, I think that using smart pointers to disk records in low-level code reduces your chances to produce working software. And by the way, many compilers, in particular those designed for embedded systems, generate horribly slow and large code unless you globally turn off exception support. Which means you won't be handle errors in overloaded operators at all.\n\nFor a summary of large-scale problems, follow the link to Defective C++. Randomly poking around will turn things of varying scale and importance.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02bock", "parent_id": "t1_c02bo9x", "id": "c02bock", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "yosefk", "created_utc": "1193508091", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 4, "author": "deong", "created_utc": "1193509198", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 0, "author": "yosefk", "created_utc": "1193515557", "children": [{"controversiality": 0, "retrieved_on": 1427425188, "subreddit_id": "t5_2fwo", "created_utc": "1193531008", "ups": 2, "gilded": 0, "link_id": "t3_5z7jr", "downs": 0, "score": 2, "body": "Currently, just me (it was written to support my dissertation).  It was heavily inspired, at least initially, by another code base I used to work on with about three other people.  It has since evolved to be quite a bit more template-laden than the original starting point.\n\n", "author": "deong", "author_flair_text": null, "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit": "programming", "name": "t1_c02bq5r", "parent_id": "t1_c02bp08", "score_hidden": false, "id": "c02bq5r"}], "subreddit": "programming", "score_hidden": false, "ups": 0, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z7jr", "retrieved_on": 1427425203, "body": "If it works for you, congratulations. Just curious: how many people work on the thing?", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02bp08", "parent_id": "t1_c02boh2", "id": "c02bp08", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 4, "controversiality": 0, "archived": true, "link_id": "t3_5z7jr", "retrieved_on": 1427425210, "id": "c02boh2", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02boh2", "parent_id": "t1_c02bodh", "body": "I've used both Matlab and Numeric Python, and both are excellent tools.  However, both suffer from enormous runtime penalties as soon as you leave the realm of simple matrix manipulation.  \n\nI work on very large scale search and optimization algorithms.  A typical set of experiments for me will run for about 4-7 days on a Quad-core Intel box.  I'd really love to switch to Lisp from C++, but I can't see trading a month of CPU time every time I need to do anything in return for a bit more convenience.\n\nThis is where C++ shines.  Yes, I have to be more careful, but that's a tradeoff I'm willing to make.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 2, "score_hidden": false, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z7jr", "retrieved_on": 1427425211, "body": "BTW, the \"new Matrix()\" code looks like Java, which lacks operator overloading. I don't think operator overloading is necessarily bad; if you have working exceptions and automatic memory management, we're left with the \"what does 'readable' mean?\" question, which different people will answer differently. Defective C++ and the specific section on operator overloading explicitly mentions this difference between operator overloading in C++ and other languages.\n\nIndependently of that: if you want to easily work with matrices, check out something like Matlab (if you can afford it) or Numeric Python (if you can't). A language trying to be good for everything faces a serious danger of being good for nothing, and in the case of C++ the danger has certainly become a reality.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02bodh", "parent_id": "t1_c02bo9x", "id": "c02bodh", "author_flair_css_class": null}], "subreddit": "programming", "ups": 2, "name": "t1_c02bo9x", "controversiality": 0, "archived": true, "link_id": "t3_5z7jr", "retrieved_on": 1427425211, "score_hidden": false, "id": "c02bo9x", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bn9o", "body": "To be fair, the reason why some of this stuff doesn't appear in rebuttal form is fairly obvious.  I doubt there's a rebuttal out there for someone who claims that Java runs in a virtual machine.  Most of the stuff you're talking about isn't factually wrong.  If I said, \"Ruby sucks because it's programs are written as text files instead of PowerPoint presentations,\" I can't imagine I'd get much response.\n\n&gt; Smart pointers to disk records: I wish all C++ weenies used an operating system which implements file systems using this advanced technique. This way, whenever the \"dereferencing\" would fail, either the error wouldn't be reported, or an exception would be mishandled, and the weenies would lose their files, which would be good for everybody.\n\nThat was taken from literally the first random page I clicked to on your index page.  It is supposedly a discussion of the evils of supporting operator overloading.  Allow me to wholeheartedly agree that indefensible errors and lack of any sort of testing can lead to undesirable effects.  Now, refresh my memory on what that has to do with the difference between\n\n    matrix a, b;\n    matrix c=a*b;\n\nversus\n\n    Matrix a = new Matrix();\n    Matrix b = new Matrix();\n    Matrix c = a.matrixMultiply(b);\n\n", "author_flair_css_class": null}], "subreddit": "programming", "ups": 9, "name": "t1_c02bn9o", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z7jr", "retrieved_on": 1427425224, "score_hidden": false, "body": "\"Anyone who follows the comp.lang.c++.moderated newsgroup is aware of most of the counters to his arguments\"\n\nBut these are not his arguments - they are my arguments. And if the counters to these arguments are so well-known, I wonder why they are not in the Usenet FAQ you linked to.\n\nWhile the FQA doesn't try to be a \"real\" C++ FAQ (it tries to be a real C++ FQA), it is based on the Usenet FAQ, and links to it at the top of each section, and at each specific question. So you didn't have to bother enlightening anyone, not to mention that googling for C++ FAQ works pretty well, too.\n\nIf you want to discuss anything of this, don't say anything about the personal traits of anybody. Otherwise, I'll promptly leave the last word to you.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02bn5s", "id": "c02bn9o", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 8, "author": "lianos", "created_utc": "1193489816", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1193491481", "ups": 3, "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425223, "score": 3, "body": "Being that Yossi Kreinin type, I ought to say you have a point.", "author": "yosefk", "author_flair_text": null, "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit": "programming", "name": "t1_c02bnce", "parent_id": "t1_c02bn9x", "score_hidden": false, "id": "c02bnce"}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "beza1e1", "created_utc": "1193491625", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1193514295", "ups": 4, "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425205, "score": 4, "body": "Yup, I submitted it. I thought it was interesting, and based on the uparrows it received in Reddit, the Reddit readers thought so, too. If you're familiar with C++ and D, you'll realize that quite a few of yosefk's criticisms of C++ apply equally to D (since the languages are very similar).\r\n\r\nIn order to master a language, one needs to be familiar with the con side of it, too, even if only to figure out where the misunderstanding might be.\r\n\r\nFor example, I have my own political views. I tend to find reading tracts that agree with me to be quite boring. I like to read the tracts by those with the opposite opinions, as a challenge to whether my opinions can stand up or not.", "author": "WalterBright", "author_flair_text": null, "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit": "programming", "name": "t1_c02bowm", "parent_id": "t1_c02bncp", "score_hidden": false, "id": "c02bowm"}], "subreddit": "programming", "score_hidden": false, "ups": 1, "controversiality": 0, "archived": true, "link_id": "t3_5z7jr", "retrieved_on": 1427425223, "id": "c02bncp", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02bncp", "parent_id": "t1_c02bn9x", "body": "Bright submitted it to reddit. See above", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02bn9x", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 8, "link_id": "t3_5z7jr", "retrieved_on": 1427425224, "id": "c02bn9x", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02bn5s", "body": " &gt; This is a pathetic attempt by Bright to slander C++ in order to promote support for his own programming language, D\n\nI'm sorry, is there something I missed?\n\nIt looks as if this \"FQA\" is written by someone named \"Yossi Kreinin\" and yet your comment sounds as if [Walter] Bright (the author of D) had written this piece. Is that right? ", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02bn5s", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": -7, "link_id": "t3_5z7jr", "retrieved_on": 1427425226, "body": "[deleted]", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5z7jr", "id": "c02bn5s", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 8, "author": "Tommstein", "created_utc": "1193490955", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 20, "author": "yosefk", "created_utc": "1193491367", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 14, "author": "Tommstein", "created_utc": "1193492416", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 17, "author": "yosefk", "created_utc": "1193494740", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 9, "author": "Tommstein", "created_utc": "1193495232", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 9, "author": "yosefk", "created_utc": "1193496300", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 5, "author": "chengiz", "created_utc": "1193523283", "children": [{"controversiality": 0, "retrieved_on": 1427425182, "subreddit_id": "t5_2fwo", "created_utc": "1193536573", "ups": -3, "gilded": 0, "link_id": "t3_5z7jr", "downs": 0, "score": -3, "body": "Vote it down! Isn't Web 2.0 great?!", "author": "yosefk", "archived": true, "distinguished": null, "edited": false, "id": "c02bqi4", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02bqi4", "parent_id": "t1_c02bpjh", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425165, "subreddit_id": "t5_2fwo", "author_flair_text": null, "name": "t1_c02bru6", "gilded": 0, "link_id": "t3_5z7jr", "downs": 0, "score": 6, "score_hidden": false, "id": "c02bru6", "author": "LaurieCheers", "created_utc": "1193559678", "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "ups": 6, "parent_id": "t1_c02bpjh", "body": "Yeah, get a room. :)", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02bpjh", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 5, "link_id": "t3_5z7jr", "retrieved_on": 1427425195, "body": "Guys, I think you need to take your discussion private already!", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02bnls", "id": "c02bpjh", "author_flair_css_class": null}], "subreddit": "programming", "ups": 9, "name": "t1_c02bnls", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z7jr", "retrieved_on": 1427425221, "score_hidden": false, "body": "Well, I am accustomed to the fact that on the net, everybody is smart, strong, bold and beautiful, and promptly points out that you aren't. My rule is to quit the discussion after the second personal remark, tops.\n\nNow that I had a taste of this, I think that using real names and digital signatures would greatly sanitize Web 2.0.", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02bnjt", "id": "c02bnls", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 9, "controversiality": 0, "archived": true, "link_id": "t3_5z7jr", "retrieved_on": 1427425221, "id": "c02bnjt", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02bnjt", "parent_id": "t1_c02bnii", "body": "You made me feel like the man of the year. I always try to be a good guy online and off, especially when the other guy isn't being a douche bag.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 17, "name": "t1_c02bnii", "controversiality": 0, "archived": true, "link_id": "t3_5z7jr", "retrieved_on": 1427425221, "score_hidden": false, "id": "c02bnii", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bnee", "body": "You are the first person to ever apologize to me in this kind of situation on the net, which completely saturates whatever conclusions you've jumped to - all I can do is to thank you for the regained faith in the human race. Forgive my excitement, it's just that I've been dealing a lot with the troll race lately.\n\nAs to the D's creator posting the link - apart from the fact that it really flatters me, note that he's also the author of a commercial C++ compiler, and I bet he wouldn't have invented D if C++ was above the usability threshold, since promoting a third-generation programming language is second only to the promotion of an OS - an undertaking few people would choose. Of course this, in turn, is just a personal conclusion of mine...", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 14, "controversiality": 0, "archived": true, "link_id": "t3_5z7jr", "retrieved_on": 1427425223, "id": "c02bnee", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02bnee", "parent_id": "t1_c02bnc8", "body": "I didn't mean to impugn your good name. I didn't exactly examine the thing closely enough to know who wrote it or how many times they referred to a specific language. The fact that this was posted by D's creator led to some conclusions.", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "null_vector", "created_utc": "1193493366", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 4, "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425221, "score": 4, "id": "c02bniv", "author": "yosefk", "created_utc": "1193494858", "distinguished": null, "edited": false, "body": "I think I did. Is there something particular I didn't answer that you find interesting? I could have ignored it because the author mentioned some traits of my personality, which in a discussion usually means that the person is not very bright and thus not worth my persuasion efforts.", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02bniv", "parent_id": "t1_c02bng3", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193505545", "name": "t1_c02bo6v", "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425212, "score": 2, "score_hidden": false, "id": "c02bo6v", "author": "krelian", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 2, "parent_id": "t1_c02bng3", "body": "The only criticism I am seeing here is \"it's a complex tool, know how to use it or don't use it\", which is not really criticism because no one really debunks any of the claims.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 3, "name": "t1_c02bng3", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z7jr", "retrieved_on": 1427425222, "score_hidden": false, "body": "Care to comment on any of the criticisms already posted here?", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02bnc8", "id": "c02bng3", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "name": "t1_c02bnc8", "controversiality": 0, "archived": true, "ups": 20, "link_id": "t3_5z7jr", "retrieved_on": 1427425223, "id": "c02bnc8", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bnbn", "body": "I'm not \"a D person\". I wrote about C++, and avoided references to all other languages, except for C (because it's funny how C turned out to be a better C++).\n\nI mentioned D exactly once in the 22 sections of the FQA (only because the Digital Mars C++ compiler did something right), and once again in Defective C++ (and there, I explicitly say that most other languages offer the discussed feature, too, and the only thing special about D is that it has goals similar to those of C++, so there can be no excuses about those other languages being completely different beasts).", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 14, "author": "WalterBright", "created_utc": "1193512859", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 6, "author": "Tommstein", "created_utc": "1193514085", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193519055", "name": "t1_c02bp9r", "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425198, "score": 2, "score_hidden": false, "id": "c02bp9r", "author": "yosefk", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 2, "parent_id": "t1_c02bow0", "body": "For most usable languages, some of the points of Defective C++ have to apply, as the first paragraph of Defective C++ says:\n\n\"To be fair, some of the items by themselves could be design choices, not bugs. For example, a programming language doesn't have to provide garbage collection. It's the combination of the things that makes them all problematic. For example, the lack of garbage collection makes C++ exceptions and operator overloading inherently defective.\"\n\nThe question is whether the language, with all it's stronger and weaker points, passes the usability threshold. IMO, C++ doesn't, that is, you end up doing too much work that has nothing to do with your real goals.", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 6, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z7jr", "retrieved_on": 1427425205, "body": "An honest man.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02bow0", "parent_id": "t1_c02bosk", "id": "c02bow0", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 14, "name": "t1_c02bosk", "controversiality": 0, "archived": true, "link_id": "t3_5z7jr", "retrieved_on": 1427425205, "score_hidden": false, "id": "c02bosk", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bnbn", "body": "Many of yosefk's criticisms of C++ apply to D, too.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02bnbn", "ups": 8, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z7jr", "retrieved_on": 1427425224, "score_hidden": false, "body": "If the D people actually want people to use the language, they would be well served to spend less time writing elaborate propaganda pieces and more time figuring out how to open up the main implementation, since they're a man without a country until then.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5z7jr", "id": "c02bnbn", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 6, "author": "[deleted]", "created_utc": "1193499119", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": 2, "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425211, "score": 2, "body": "That must have taken some time. However, a hammer is a just tool, and a language is more than that:\n\nhttp://yosefk.com/c++fqa/inheritance-multiple.html#fqa-25.3\n\nTry picking a better analogy and then run the replace again.", "id": "c02boec", "author": "yosefk", "created_utc": "1193508393", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02boec", "parent_id": "t1_c02bnqn", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 6, "score_hidden": false, "controversiality": 0, "archived": true, "link_id": "t3_5z7jr", "retrieved_on": 1427425218, "id": "c02bnqn", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02bnqn", "parent_id": "t3_5z7jr", "body": "Hammers Suck\n\n1) Disclaimer\n1a) Although hammers have been used for projects in the past, there is no reason to use them on new projects.\n1b) I know more about hammers than I should, so listen to every complaint I make.\n1c) Nailguns just add a level of complexity.  You should know about them, but never use them.\n\n2) Hammers are defective\n2a) When you're trying to drive a nail, hammers allow you to smash your finger instead.\n2b) If you hit a pane of glass with a hammer, it would shatter and cause a mess.\n2c) If you hit a person with a hammer, you might injure or even kill him.\n\n3) Hammers are inadequate\n3a) Although you can start a screw with a hammer, you can't effectively drive it.\n3b) You can't use a hammer to tighten or remove nuts from bolts.\n3c) Hammers are stunningly bad at making neat cuts in wood.\n\n4) People who use hammers are wrongheaded.\n4a) When all you have is a hammer, everything looks like a nail.", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "tanger", "created_utc": "1193524016", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 4, "author": "OceanSpray", "created_utc": "1193533956", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "author_flair_text": null, "name": "t1_c02brdq", "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425172, "score": 3, "score_hidden": false, "id": "c02brdq", "author": "Gotebe", "created_utc": "1193550983", "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "ups": 3, "parent_id": "t1_c02bqcb", "body": "I thnk you're wrong.\n\nC++ is about abstraction level. With C constructs only, it is *much* more difficult to raise it, and doing so still leaves excruciating amount of low-level details to the programmer to deal with.\n\nI mean... Do you honestly think string manipulation is easier with char*? Ever did simple polymorphism with vtables in C? Do you think min and max macros are better than their template variants? That list goes on and on.\n\nNobody in their right mind says C++ is greatest thing, but to me, tanger is right on the money about C being anachronistic crap.\n\nWe just have no better C than C++.", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02bqcb", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 4, "link_id": "t3_5z7jr", "retrieved_on": 1427425184, "id": "c02bqcb", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bplk", "body": "C is the worst part of C++, eh?\nWithout the C part, C++ would be Java.\nFurthermore, the C constructs really ARE better than the corresponding C++ constructs in some cases. With the former, you KNOW what they are. For example, C strings are a row of characters in memory, and can be treated as such -- no arcane methods or implementation details to learn, as with std::string. Now, I know that encapsulation is a \"feature\" of \"OO\" that the C++ STL takes advantage of. Nevertheless, simplicity -&gt; understanding -&gt; easier reasoning about programs.", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 0, "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425182, "score": 0, "body": "\"nobody knows it\":\n\nhttp://yosefk.com/c++fqa/faq.html#faq-5", "author": "yosefk", "created_utc": "1193536531", "distinguished": null, "edited": false, "id": "c02bqi1", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02bqi1", "parent_id": "t1_c02bplk", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02bplk", "ups": 0, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z7jr", "retrieved_on": 1427425195, "score_hidden": false, "body": " There are many application areas where high level garbage collected languages are not efficient enough, unless you want to write slow software that your users will hate. That's where C++ shines. For example most desktop apps. It also doesn't need a big runtime. D is not practical simply because nobody knows it. Sad, unjust, but true. Regarding C, somebody please explain to me why are people still bothering with this anachronistic crap in 21th century ? Is char*, free(), struct and void\\* really better than std::string, RAII/shared_ptr, class and STL templates ? I don't get this love for C. It is the worst part of C++. ", "archived": true, "distinguished": null, "edited": true, "parent_id": "t3_5z7jr", "id": "c02bplk", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193536455", "name": "t1_c02bqhv", "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425182, "score": 6, "score_hidden": false, "id": "c02bqhv", "author": "yosefk", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 6, "parent_id": "t3_5z7jr", "body": "I'm happy to announce that the FQA now has it's own FAQ, which is of course ridiculous:\n\nhttp://yosefk.com/c++fqa/faq.html\n\nI'm happy to announce this since I no longer have to waste time answering messages/comments with 0/very little information. I'm willing to discuss actual corrections and counter arguments (especially using e-mail), and intend to collect and publish the best of them (see also the updated main page). That is, if you correct me, I'll probably leave the original text and link to a local copy of your correction.\n\n-- yosefk of yosefk.com/c++fqa", "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427425132, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02buel", "gilded": 0, "link_id": "t3_5z7jr", "downs": 0, "score": 2, "score_hidden": false, "id": "c02buel", "author": "yosefk", "created_utc": "1193606870", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 2, "parent_id": "t3_5z7jr", "body": "After about a week of experience, I decided to avoid (most) discussions on the web. If you want to talk to me, send me e-mail; I'll publish the interesting bits, criticizing either C++ or the C++ FQA. If you want to demonstrate the superiority of your arguments under the dubious spotlight that is a flame war, you'll have to talk to someone else.\n\nClarification: I am very thankful to everybody who took the side of the FQA in any online discussion, especially if they didn't personally attack their opponents. That's because it's important to demonstrate that lots and lots of people dislike C++. Many people will not listen to criticism voiced by a tiny minority, and on some level they'd be right. However, I can't and shouldn't imitate \"lots and lots of people\"; what I want to do is to gather and publish quality material on the subject. And e-mail is a great way to do that. So stay tuned for FQA updates.", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193631905", "name": "t1_c02bwa6", "gilded": 0, "link_id": "t3_5z7jr", "retrieved_on": 1427425107, "score": 5, "score_hidden": false, "body": "What's the purpose of FQA? From [the horse's mouth](http://yosefk.com/c++fqa/why.html):\n\n&gt; *\"There is no reason to use C++ for new projects.\"*\n\nNot a single reason?  C'mon.\n\nIn any case, companies choose C++ less and less frequently. The author is fighting the last war.\n\n&gt; *\"However, there are existing projects in C++ which might be worth working on.\"*\n\nDuh!\n\n&gt; *\"Weighting the positive aspects of such a project against the sad fact that C++ is involved is a matter of personal judgment.\"*\n\nDuh!\n\n&gt; *\"If you end up working with C++, don't try to \"fix\" it (or \"boost\" it). You'll just add more layers of complexity.\"*\n\nI'd say that about 90% of C++ programmers I work with, or used to work with, have a very shallow knowledge of C++. They do not abuse the obscure features - because they either do not know them, or fear them. They add complexity alright - by churning out spaghetti code. Give them &lt;insert the language of your choice here&gt; - they will happily continue to do the same thing.\n\n&gt; *\"The most productive approach is to accept the problems and try to write simple code which people can easily follow.\"*\n\nCommon sense advice applicable to any language.\n\n&gt; *\"If you are an expert in the intricacies of C++, please consider this knowledge a kind of martial art - something a real master never uses.\"*\n\nThe experts who are capable of writing very obscure C++ are rare. I'd say, one percent or less of the 9-to-5 C++ crowd. Many of them are wise enough to deliberately \"dumb down\" their code. Speaking from my own experience, obscure C++ is really a non-issue in the industry.\n\nTo summarize:\n\nThe *stated* purpose to write this document is very questionable. A document without a good purpose... redundant?\n\nI suspect there is an *unstated* purpose as well:\n\n* instant publicity\n* interesting job offers\n* ...\n* profit! \n\nIf I'm guessing right, all I can say... brilliant!!", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 5, "parent_id": "t3_5z7jr", "id": "c02bwa6", "author_flair_css_class": null}
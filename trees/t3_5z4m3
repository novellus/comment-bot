{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 18, "author": "[deleted]", "created_utc": "1193346177", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 9, "author": "derekslager", "created_utc": "1193346617", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193346720", "name": "t1_c02bchq", "gilded": 0, "link_id": "t3_5z4m3", "retrieved_on": 1427425364, "score": -6, "score_hidden": false, "id": "c02bchq", "author": "OMouse", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": -6, "parent_id": "t1_c02bch5", "body": "The world owns senses? Insaaaaaane.", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": -1, "gilded": 0, "link_id": "t3_5z4m3", "retrieved_on": 1427425364, "score": -1, "body": "[deleted]", "id": "c02bcl3", "author": "[deleted]", "created_utc": "1193347346", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02bcl3", "parent_id": "t1_c02bch5", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425329, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02bf7a", "gilded": 0, "link_id": "t3_5z4m3", "downs": 0, "score": 2, "score_hidden": false, "id": "c02bf7a", "author": "[deleted]", "created_utc": "1193378135", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 2, "parent_id": "t1_c02bch5", "body": "[deleted]", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02bch5", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 9, "link_id": "t3_5z4m3", "retrieved_on": 1427425364, "body": "Its senses?", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02bcf0", "id": "c02bch5", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02bcf0", "ups": 18, "controversiality": 0, "archived": true, "link_id": "t3_5z4m3", "retrieved_on": 1427425365, "score_hidden": false, "id": "c02bcf0", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t3_5z4m3", "body": "Wow, a positive Lisp article that doesn't mention AI on a mainstream developer site. What is the world coming to? ", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 0, "author": "gnuvince", "created_utc": "1193347309", "children": [{"controversiality": 0, "retrieved_on": 1427425361, "subreddit_id": "t5_2fwo", "created_utc": "1193348417", "ups": 13, "gilded": 0, "link_id": "t3_5z4m3", "downs": 0, "score": 13, "body": " We actually do all of our development on OS X, and deploy on Linux, and have been doing so for probably 18 months. I wouldn't use OS X for a production environment with SBCL, but for day-in day-out coding, there aren't any significant issues that are going to cause problems. ", "author": "tritchey", "author_flair_text": null, "distinguished": null, "edited": true, "author_flair_css_class": null, "archived": true, "subreddit": "programming", "name": "t1_c02bcqq", "parent_id": "t1_c02bckv", "score_hidden": false, "id": "c02bcqq"}], "subreddit": "programming", "ups": 0, "name": "t1_c02bckv", "controversiality": 0, "archived": true, "link_id": "t3_5z4m3", "retrieved_on": 1427425364, "score_hidden": false, "id": "c02bckv", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5z4m3", "body": "How long before they do like the reddit guys and switch to another platform because of the subtle incompatibilities between Lisp on the Mac and Lisp on Linux, etc.", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02bcmh", "gilded": 0, "link_id": "t3_5z4m3", "retrieved_on": 1427425362, "score": 1, "body": "[deleted]", "author": "[deleted]", "created_utc": "1193347594", "distinguished": null, "edited": false, "id": "c02bcmh", "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t3_5z4m3", "score_hidden": false, "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -11, "author": "[deleted]", "created_utc": "1193354186", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 6, "author": "zackman", "created_utc": "1193367378", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -4, "author": "[deleted]", "created_utc": "1193376587", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1193405367", "ups": 0, "gilded": 0, "link_id": "t3_5z4m3", "retrieved_on": 1427425311, "score": 0, "body": "[deleted]", "author": "[deleted]", "author_flair_text": null, "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit": "programming", "name": "t1_c02bglw", "parent_id": "t1_c02bf3d", "score_hidden": false, "id": "c02bglw"}], "subreddit_id": "t5_2fwo", "name": "t1_c02bf3d", "score_hidden": false, "controversiality": 0, "archived": true, "ups": -4, "link_id": "t3_5z4m3", "retrieved_on": 1427425330, "id": "c02bf3d", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02befq", "body": "[deleted]", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 6, "name": "t1_c02befq", "controversiality": 0, "archived": true, "link_id": "t3_5z4m3", "retrieved_on": 1427425339, "score_hidden": false, "id": "c02befq", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bdae", "body": "I think you want *this* Common Lisp:\nhttp://lemonodor.com/archives/2002/02/common_lisp_the.html", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02bdae", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": -11, "link_id": "t3_5z4m3", "retrieved_on": 1427425357, "body": "[deleted]", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5z4m3", "id": "c02bdae", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "[deleted]", "created_utc": "1193355782", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": -11, "gilded": 0, "link_id": "t3_5z4m3", "retrieved_on": 1427425348, "score": -11, "body": "[deleted]", "author": "[deleted]", "created_utc": "1193359085", "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02bdq9", "parent_id": "t1_c02bdfb", "score_hidden": false, "id": "c02bdq9"}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 12, "author": "[deleted]", "created_utc": "1193359732", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 10, "author": "bobbane", "created_utc": "1193366299", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 5, "author": "xach", "created_utc": "1193398326", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193414607", "name": "t1_c02bhnx", "gilded": 0, "link_id": "t3_5z4m3", "retrieved_on": 1427425297, "score": 2, "score_hidden": false, "id": "c02bhnx", "author": "sickofthisshit", "author_flair_text": null, "distinguished": null, "edited": true, "archived": true, "subreddit_id": "t5_2fwo", "ups": 2, "parent_id": "t1_c02bg4i", "body": " To clarify, it can increase performance when the (relatively slow) compile time outweighs the gain from (relatively fast) compiled-to-native-machine code.\n\nCompared to most languages, which only compile once, the Lisp compiler can be invoked at run-time as well. ", "author_flair_css_class": null}], "subreddit": "programming", "ups": 5, "name": "t1_c02bg4i", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z4m3", "retrieved_on": 1427425318, "score_hidden": false, "body": "SBCL also has an interpreter, but it's more for performance than interactive nicety.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02beci", "id": "c02bg4i", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "name": "t1_c02beci", "controversiality": 0, "archived": true, "ups": 10, "link_id": "t3_5z4m3", "retrieved_on": 1427425340, "id": "c02beci", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bdsd", "body": "Actually, I believe only one major implementation (Allegro CL) even **has** an interpreter any more.  When you hand anything to eval (loading a file, typing an expression into a top-level, hitting \"eval this\" in your IDE of choice), it is at least byte-compiled (CLISP) or native-code compiled (SBCL, Lispworks, OpenMCL) before being executed.\n\nAnd Lisp systems retain their malleability despite going clear down to native code.  You can change CLOS object and method definitions in mid-flight - old objects get updated automatically, old methods get recycled and replaced as they come off the stack.\n", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": -3, "author": "[deleted]", "created_utc": "1193376992", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "[deleted]", "created_utc": "1193379123", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "pjdelport", "created_utc": "1193391426", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "bobbane", "created_utc": "1193400509", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "johnfredcee", "created_utc": "1193428665", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "bobbane", "created_utc": "1193497531", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "johnfredcee", "created_utc": "1193550280", "children": [{"distinguished": null, "controversiality": 0, "retrieved_on": 1427425024, "subreddit_id": "t5_2fwo", "created_utc": "1193707759", "ups": 1, "gilded": 0, "link_id": "t3_5z4m3", "downs": 0, "score": 1, "id": "c02c2ra", "author": "bobbane", "archived": true, "author_flair_text": null, "edited": false, "body": "Cool!  I've occasionally thought that someone should try that (someone with more free time than me!).", "subreddit": "programming", "name": "t1_c02c2ra", "parent_id": "t1_c02brcf", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02brcf", "ups": 1, "controversiality": 0, "archived": true, "link_id": "t3_5z4m3", "retrieved_on": 1427425172, "score_hidden": false, "id": "c02brcf", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02bnnp", "body": "    True. It appears to compile .py files to .fasls..I took that as implying compilation, but I dunno what exactly Allegro CL puts in fasls, it being implementation dependent. \n\n\n;;; Compiling file parrotbench/b2.py\n;;; Writing fasl file /Users/willem/dev/lisp/python/lib/parrotbench/b2.fasl\n;;; Fasl write complete\n; Fast loading /Users/willem/dev/lisp/python/lib/parrotbench/b2.fasl\n  \nActually reading the site..\n\nhttp://common-lisp.net/project/clpython/manual.html\n\nreveals that the strategy is to use readtable hacks and a parser to translate python code into lisp and thence compile. If this ever makes it over to SBCL, CL will eat Python alive. ;-) ", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 1, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z4m3", "retrieved_on": 1427425219, "body": "Are you sure that isn't a Python interpreter in CL?", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02bnnp", "parent_id": "t1_c02bjkc", "id": "c02bnnp", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 2, "name": "t1_c02bjkc", "controversiality": 0, "archived": true, "link_id": "t3_5z4m3", "retrieved_on": 1427425272, "score_hidden": false, "id": "c02bjkc", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bg9c", "body": "Python can be compiled to native code.\n\nBy a Common Lisp compiler!\n\nhttp://common-lisp.net/project/clpython/\n", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02bg9c", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 3, "link_id": "t3_5z4m3", "retrieved_on": 1427425315, "id": "c02bg9c", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02bfu1", "body": " From the link:\n&gt;A foreword of warning about the JIT of PyPy as of March 2007: single functions doing integer arithmetic get great speed-ups; about anything else will be a bit slower with the JIT than without.\n\nGiven those performance characteristics, I'd say Python *still* doesn't have a useful native code compiler.", "author_flair_css_class": null}], "subreddit": "programming", "ups": 3, "name": "t1_c02bfu1", "controversiality": 0, "archived": true, "link_id": "t3_5z4m3", "retrieved_on": 1427425321, "score_hidden": false, "id": "c02bfu1", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bf9j", "body": "&gt; Python doesn't have a native code compiler\n\n*[cough](http://codespeak.net/pypy/dist/pypy/doc/jit.html)*", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193429929", "name": "t1_c02bjq8", "gilded": 0, "link_id": "t3_5z4m3", "retrieved_on": 1427425270, "score": -1, "score_hidden": false, "body": "[deleted]", "author": "[deleted]", "author_flair_text": null, "distinguished": null, "edited": true, "archived": true, "subreddit_id": "t5_2fwo", "ups": -1, "parent_id": "t1_c02bf9j", "id": "c02bjq8", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 0, "author": "[deleted]", "created_utc": "1193451348", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 0, "author": "[deleted]", "created_utc": "1193506004", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "[deleted]", "created_utc": "1193511072", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "[deleted]", "created_utc": "1193511621", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "[deleted]", "created_utc": "1193512052", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "[deleted]", "created_utc": "1193512167", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "[deleted]", "created_utc": "1193521315", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "[deleted]", "created_utc": "1193522047", "children": [{"controversiality": 0, "retrieved_on": 1427425190, "subreddit_id": "t5_2fwo", "created_utc": "1193527401", "ups": 2, "gilded": 0, "link_id": "t3_5z4m3", "downs": 0, "score": 2, "body": "Worse, actually.\n\nIn fact, I might be wrong.  I just tested this in SML and the value restriction (which I think applies to Ocaml as well) didn't permit refs to polymorphic functions.", "id": "c02bpvm", "author": "[deleted]", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "name": "t1_c02bpvm", "parent_id": "t1_c02bpgn", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 1, "name": "t1_c02bpgn", "controversiality": 0, "archived": true, "link_id": "t3_5z4m3", "retrieved_on": 1427425196, "score_hidden": false, "id": "c02bpgn", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bpet", "body": "So basically I have to mark every function definition with \"ref\"?", "author_flair_css_class": null}], "subreddit": "programming", "ups": 2, "score_hidden": false, "controversiality": 0, "archived": true, "link_id": "t3_5z4m3", "retrieved_on": 1427425197, "id": "c02bpet", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02bpet", "parent_id": "t1_c02boqq", "body": "&gt; That's a pretty serious limitation. So not only does it prevent you from \"replace[ing] a function with another function with a different type signature\" but it prevents you from replacing a function definition in any shape or form at all.\n\nUm, no -- it lets you redefine functions which you had the foresight to say \"I want to allow this to be redefined, so I'm going to call this through a ref.\"", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 2, "controversiality": 0, "archived": true, "link_id": "t3_5z4m3", "retrieved_on": 1427425205, "id": "c02boqq", "author_flair_text": null, "distinguished": null, "edited": true, "name": "t1_c02boqq", "parent_id": "t1_c02boq5", "body": " &gt; You can replace functions you call through refs, of course, but if you're not calling them through refs, a new binding won't affect old uses.\n\nThat's a pretty serious limitation. So not only does it prevent you from \"replace[ing] a function with another function with a different type signature\" but it prevents you from replacing a function definition in any shape or form at all.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 1, "controversiality": 0, "archived": true, "link_id": "t3_5z4m3", "retrieved_on": 1427425205, "id": "c02boq5", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02boq5", "parent_id": "t1_c02booh", "body": "You can replace functions you call through refs, of course, but if you're not calling them through refs, a new binding won't affect old uses.\n\nI'm not sure if the Ocaml REPL uses the bytecode implementation or the native code implementation, though I suspect the former.  The characteristics of the SML/NJ REPL are exactly the same, though, and it definitely compiles to native code.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 1, "score_hidden": false, "controversiality": 0, "archived": true, "link_id": "t3_5z4m3", "retrieved_on": 1427425206, "id": "c02booh", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02booh", "parent_id": "t1_c02bomm", "body": "Can you replace functions in Ocaml's REPL at all? Can Ocaml's REPL compile functions to native code?", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02bomm", "ups": 1, "controversiality": 0, "archived": true, "link_id": "t3_5z4m3", "retrieved_on": 1427425208, "score_hidden": false, "id": "c02bomm", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bo8d", "body": "You can replace a function with another function with a different type signature.  You can't do that from Ocaml's REPL.", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "name": "t1_c02bo8d", "controversiality": 0, "archived": true, "ups": 0, "link_id": "t3_5z4m3", "retrieved_on": 1427425212, "id": "c02bo8d", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02blqq", "body": "How is SBCL's REPL \"dangerous\"?", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02blqq", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 0, "link_id": "t3_5z4m3", "retrieved_on": 1427425244, "body": "Ocaml's REPL also isn't nearly as *dangerous* as SBCL's, either.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02bf9j", "id": "c02blqq", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 1, "score_hidden": false, "controversiality": 0, "archived": true, "link_id": "t3_5z4m3", "retrieved_on": 1427425328, "id": "c02bf9j", "author_flair_text": null, "distinguished": null, "edited": true, "name": "t1_c02bf9j", "parent_id": "t1_c02bf4l", "body": " Python doesn't have a native code compiler, and Ocaml's REPL is not nearly as powerful as SBCL's.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": -3, "name": "t1_c02bf4l", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z4m3", "retrieved_on": 1427425330, "score_hidden": false, "body": "[deleted]", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02bdsd", "id": "c02bf4l", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02bdsd", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 12, "link_id": "t3_5z4m3", "retrieved_on": 1427425347, "body": " &gt; One of the great benefits of using Lisp is the ability to work \"live\" in a running system. When you compile a function, it is pulled into the running image, and you get immediate feedback.\n\nNote: \"when you _compile_ a function.\" All good Common Lisp implementations combine interactive development with optimizing native compilation. _This_ is a trait not shared with Python and Ruby. ", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02bdfb", "id": "c02bdsd", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 9, "author": "eadmund", "created_utc": "1193376798", "children": [{"controversiality": 0, "retrieved_on": 1427425326, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02bfeq", "gilded": 0, "link_id": "t3_5z4m3", "downs": 0, "score": 2, "score_hidden": false, "body": "Thanks for this reply...", "author": "[deleted]", "created_utc": "1193381627", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 2, "parent_id": "t1_c02bf43", "id": "c02bfeq", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 8, "author": "jaggederest", "created_utc": "1193385603", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1193451167", "ups": 1, "gilded": 0, "link_id": "t3_5z4m3", "retrieved_on": 1427425244, "score": 1, "body": "I do.  Because they're awkward.  We're accustomed to working with separate, modular files, not whole images.", "id": "c02blq2", "author": "[deleted]", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "name": "t1_c02blq2", "parent_id": "t1_c02bfkw", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 8, "name": "t1_c02bfkw", "controversiality": 0, "archived": true, "link_id": "t3_5z4m3", "retrieved_on": 1427425324, "score_hidden": false, "id": "c02bfkw", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bf43", "body": "Same deal with Smalltalk, really. I don't know why more systems aren't using image-based VMs with live code.", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": 1, "gilded": 0, "link_id": "t3_5z4m3", "retrieved_on": 1427425244, "score": 1, "body": "&gt; Python, at least, does not commonly provide a REPL for a running process which lets you redefine functions while it's live.\n\n Actually, it does.  The pdb module in the standard distribution provides a set_trace function which drops into a REPL and allows you to replace and any all code you wish to replace.", "author": "[deleted]", "created_utc": "1193451112", "distinguished": null, "edited": true, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02blpz", "parent_id": "t1_c02bf43", "score_hidden": false, "id": "c02blpz"}], "subreddit_id": "t5_2fwo", "name": "t1_c02bf43", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 9, "link_id": "t3_5z4m3", "retrieved_on": 1427425330, "id": "c02bf43", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bdfb", "body": "Python, at least, does not commonly provide a REPL for a running process which lets you redefine functions while it's live.  You could hack together something to do so, of course, but it'd tend to be a bit awkward.  Instead, the normal course of action is to edit a file and re-run your Python code (which compiles the changed file).\n\nEvery time you load a PHP page it's compiled.  Every time one loads a Django page using the development server, everything that is changed is recompiled.\n\nLisp is different: you have a long-running Lisp instance, and you can redefine functions in it.  It's a pretty powerful technique, albeit not the end-all, be-all of development.  What's also nice is that since it's a single long-running instance, if you've properly designed things you can actually analyze the state of your entire programme while it's running, instead of change-run-change-run-change-run.  That's really useful.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02bdfb", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5z4m3", "retrieved_on": 1427425352, "id": "c02bdfb", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5z4m3", "body": "Alright. I love Lisp, I love Scheme, I love functional programming in general.\n\nBut WTF are they talking about when they say:\n&gt;There is no long edit-compile-run cycle to break your stride.\n\nThis is not special to Lisp! In fact, this is a common circumstance in nearly every web development environment. PHP? Ruby? Python? None of them have an edit-run-compile cycle! I work on live PHP sites every day.\n\nSo why do I see this basic statement in every Lisp webdev article I read?", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "savetheconstitution", "created_utc": "1193369033", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "[deleted]", "created_utc": "1193376738", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "author_flair_text": null, "name": "t1_c02bhnk", "gilded": 0, "link_id": "t3_5z4m3", "retrieved_on": 1427425297, "score": 2, "score_hidden": false, "body": "Actually, at the time of the [\"Fifth Generation Computing\"](http://en.wikipedia.org/wiki/Fifth_generation_computer) craze, it was \"Logical Inferences Per Second.\"", "author": "sickofthisshit", "created_utc": "1193414449", "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "ups": 2, "parent_id": "t1_c02bf3v", "id": "c02bhnk", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 0, "controversiality": 0, "archived": true, "link_id": "t3_5z4m3", "retrieved_on": 1427425330, "id": "c02bf3v", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02bf3v", "parent_id": "t1_c02beko", "body": "[deleted]", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "Tommah", "created_utc": "1193617302", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "author_flair_text": null, "gilded": 0, "link_id": "t3_5z4m3", "retrieved_on": 1427424987, "score": 1, "created_utc": "1193755429", "score_hidden": false, "id": "c02c5oo", "author": "savetheconstitution", "archived": true, "distinguished": null, "edited": false, "body": "Yes, but it wouldn't have been the first typo in a reddit headline.  My brain seems to read over most typos, just pronouncing them like they are written, using context clues to fill in the blanks.  I think I am mildly dyslexic, (reading lisp as lips, often switching digits in numbers, often switching b's p's and d's when writing, etc.) and this is my brains way of making up for it.", "subreddit": "programming", "ups": 1, "parent_id": "t1_c02bv5o", "name": "t1_c02c5oo", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02bv5o", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5z4m3", "retrieved_on": 1427425122, "id": "c02bv5o", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02beko", "body": "Yes, especially since \"tean\" isn't a word.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02beko", "ups": 0, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z4m3", "retrieved_on": 1427425337, "score_hidden": false, "body": "At first glance I thought the title said \"Lips for Agile Teans\" with my mind glossing over the \"misspelling\".  Now that would have been an interesting article.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5z4m3", "id": "c02beko", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "jaggederest", "created_utc": "1193385373", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193617282", "name": "t1_c02bv5l", "gilded": 0, "link_id": "t3_5z4m3", "retrieved_on": 1427425122, "score": 1, "score_hidden": false, "id": "c02bv5l", "author": "Tommah", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c02bfkf", "body": "They'd start confusing Lisp with their VB.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 3, "score_hidden": false, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z4m3", "retrieved_on": 1427425324, "body": "What about Lisp for lifeless, moribund teams who just want to get home and play Halo?", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02bfkf", "parent_id": "t3_5z4m3", "id": "c02bfkf", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193398568", "ups": 2, "gilded": 0, "link_id": "t3_5z4m3", "retrieved_on": 1427425318, "score": 2, "score_hidden": false, "id": "c02bg4y", "author": "contrarian", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02bg4y", "parent_id": "t3_5z4m3", "body": "You know I saw this and thought it said \"Lisp for Agile Teens\".  I must admit, I like my headline better.", "author_flair_css_class": null}
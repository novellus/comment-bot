{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 5, "author": "ehird", "created_utc": "1193009216", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -2, "author": "IHaveAnIdea", "created_utc": "1193009454", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "ubernostrum", "created_utc": "1193009587", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -1, "author": "IHaveAnIdea", "created_utc": "1193009721", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1193009755", "name": "t1_c02agnr", "gilded": 0, "link_id": "t3_5yt1d", "retrieved_on": 1427425847, "score": 3, "score_hidden": false, "id": "c02agnr", "author": "ehird", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 3, "parent_id": "t1_c02agnl", "body": "**It isn't,** and you have extra parentheses. See my other comment.", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "ubernostrum", "created_utc": "1193010260", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -1, "author": "IHaveAnIdea", "created_utc": "1193010391", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "ubernostrum", "created_utc": "1193010787", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -1, "author": "IHaveAnIdea", "created_utc": "1193011156", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "ehird", "created_utc": "1193011278", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "IHaveAnIdea", "created_utc": "1193011501", "children": [{"controversiality": 0, "retrieved_on": 1427425844, "subreddit_id": "t5_2fwo", "created_utc": "1193012845", "ups": 3, "gilded": 0, "link_id": "t3_5yt1d", "downs": 0, "score": 3, "body": "Because it's easy, using slicing syntax, to delete everything in a list. There's no equivalent for a dict -- to get something you can slice, you need to go to `items()`, `keys()` or `values()`.", "author": "ubernostrum", "archived": true, "distinguished": null, "edited": false, "id": "c02agy2", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02agy2", "parent_id": "t1_c02agth", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 0, "name": "t1_c02agth", "controversiality": 0, "archived": true, "link_id": "t3_5yt1d", "retrieved_on": 1427425845, "score_hidden": false, "id": "c02agth", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02agsv", "body": "Just explain to me why dicts get a clear but not lists.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 3, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yt1d", "retrieved_on": 1427425846, "body": "del dict[key] works, fyi", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02agsv", "parent_id": "t1_c02agsf", "id": "c02agsv", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02agsf", "score_hidden": false, "controversiality": 0, "archived": true, "ups": -1, "link_id": "t3_5yt1d", "retrieved_on": 1427425846, "id": "c02agsf", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02agrc", "body": "Yes, you can't delete the result of a function call and that's my point.\n\nI am arguing that \"del somelist[:]\" should be something more \"somelist.clear()\", or \"somelist.clear(from=4,to=5)\". Basically the same as with dicts.\n\n\n\n", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02agrc", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 3, "link_id": "t3_5yt1d", "retrieved_on": 1427425846, "id": "c02agrc", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02agq7", "body": "Well, it doesn't do either -- you can't delete the return value of a function call like that (IIRC it should raise a `TypeError` or `SyntaxError` if you try it).\n\nWhy is it so hard to understand that deleting a slice of a list deletes that slice from that list? Are you really arguing that `del somelist[:]` should have no effect?", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "[deleted]", "created_utc": "1193011230", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 0, "author": "IHaveAnIdea", "created_utc": "1193011722", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02agvk", "gilded": 0, "link_id": "t3_5yt1d", "retrieved_on": 1427425845, "score": 3, "score_hidden": false, "body": "[deleted]", "author": "[deleted]", "created_utc": "1193012009", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 3, "parent_id": "t1_c02aguk", "id": "c02agvk", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02aguk", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 0, "link_id": "t3_5yt1d", "retrieved_on": 1427425845, "id": "c02aguk", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02agsl", "body": "Again, that was my point.", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02agsl", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 2, "link_id": "t3_5yt1d", "retrieved_on": 1427425846, "id": "c02agsl", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02agq7", "body": "[deleted]", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": -1, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yt1d", "retrieved_on": 1427425847, "body": "No, more like:\n\n    def a():\n        return {}\n    del a()\n\nShould that delete \"a\" or the dict returned from a?\n\nOr neither because it's downright strange.\n", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02agq7", "parent_id": "t1_c02agpo", "id": "c02agq7", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 3, "name": "t1_c02agpo", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yt1d", "retrieved_on": 1427425847, "score_hidden": false, "body": "OK, so this:\n\n    foo = 3\n    del foo\n\nshould not actually delete `foo`, right? The whole point of `del` is that it deletes its argument; if the argument is a section of a list, then that section of the list gets deleted.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02agnl", "id": "c02agpo", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "grimboy", "created_utc": "1193010771", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "IHaveAnIdea", "created_utc": "1193011688", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "grimboy", "created_utc": "1193052898", "children": [{"controversiality": 0, "retrieved_on": 1427425773, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02amhl", "gilded": 0, "link_id": "t3_5yt1d", "downs": 0, "score": 0, "score_hidden": false, "body": "All I have to say to that is that languages change. Why do you think python3k is coming out? Because shit wasn't right.", "author": "IHaveAnIdea", "created_utc": "1193082205", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 0, "parent_id": "t1_c02ajb7", "id": "c02amhl", "author_flair_css_class": null}], "subreddit": "programming", "ups": 2, "name": "t1_c02ajb7", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yt1d", "retrieved_on": 1427425813, "score_hidden": false, "body": "1. I said keywords **can** change semantics not that they all do.\n2. You can't call part of the core of python unpythonic. Libraries, fair game, but really, one of the few keywords python actually has.\n3. Your suggestion of replacing it with a function that takes a list and an index or range of indices sounds awkward. Why not just use existing syntax?\n4. There's no reason for print to be a keyword, in python 3 it is a function.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02aguh", "id": "c02ajb7", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02aguh", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 0, "link_id": "t3_5yt1d", "retrieved_on": 1427425845, "id": "c02aguh", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02agra", "body": "So is print. But it also behaves like a function. Del is un-pythonic, that's all I'm saying.", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02agra", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 3, "link_id": "t3_5yt1d", "retrieved_on": 1427425846, "body": "del is a keyword and not a function. That means it can change semantics. If it behaved as you want doing del somelist[41] wouldn't delete the 42nd element of somelist, it would instead copy the 42nd element, *then* delete it. When used in terms of del somelist[index] isn't a value, it's a reference.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02agnl", "id": "c02agra", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02agnl", "score_hidden": false, "controversiality": 0, "archived": true, "ups": -1, "link_id": "t3_5yt1d", "retrieved_on": 1427425848, "id": "c02agnl", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02agnb", "body": "  Yes it would, why should:\n\ndel(somelist[:])\n\nbe evaluated differently from:\n\nprint(somelist[:])\n\nquite a strange syntax. We could just as easily pass the slicing indicies to a \"clear\" function of the list and retain regular python syntax.  ", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "name": "t1_c02agnb", "controversiality": 0, "author_flair_text": null, "ups": 3, "link_id": "t3_5yt1d", "retrieved_on": 1427425848, "body": "Except it wouldn't make any sense for the behavior of `del` to be \"clone the specified variable, then delete the clone and leave the original as-is\"...", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02agmz", "id": "c02agnb", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 6, "author": "ehird", "created_utc": "1193009615", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -4, "author": "IHaveAnIdea", "created_utc": "1193009897", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 5, "author": "ehird", "created_utc": "1193010045", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -1, "author": "IHaveAnIdea", "created_utc": "1193010249", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "ehird", "created_utc": "1193010565", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -2, "author": "IHaveAnIdea", "created_utc": "1193010721", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "ehird", "created_utc": "1193011016", "children": [{"controversiality": 0, "retrieved_on": 1427425845, "subreddit_id": "t5_2fwo", "created_utc": "1193011609", "ups": 0, "gilded": 0, "link_id": "t3_5yt1d", "downs": 0, "score": 0, "id": "c02agu4", "author": "IHaveAnIdea", "archived": true, "distinguished": null, "edited": false, "body": "You could just answer my questions directly.", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02agu4", "parent_id": "t1_c02ags4", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 2, "controversiality": 0, "archived": true, "link_id": "t3_5yt1d", "retrieved_on": 1427425846, "id": "c02ags4", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02ags4", "parent_id": "t1_c02agr5", "body": "you're wrong, and I cannot be bothered to reformulate my explanation yet another time. Please go to the Python IRC channel for a thorough explanation of why you are completely wrong, although I doubt ad hominems will work there.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02agr5", "score_hidden": false, "controversiality": 0, "archived": true, "ups": -2, "link_id": "t3_5yt1d", "retrieved_on": 1427425846, "id": "c02agr5", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02agqu", "body": "The way \"lst[:]\" is coded and \"del lst[:]\" are handled by completely different code in the interpreter.\n\nYou fail at interpreter design.", "author_flair_css_class": null}], "subreddit": "programming", "ups": 3, "name": "t1_c02agqu", "controversiality": 0, "archived": true, "link_id": "t3_5yt1d", "retrieved_on": 1427425846, "score_hidden": false, "id": "c02agqu", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02agpn", "body": "    x = [1, 2, 3, 4, 5]\n    x[1:4] # x[1] = 2, x[2] = 3, and x[3] = 4, so [2, 3, 4]\n    x[:] # x[0 (start)] = 1, (...) and x[(last)] = 5, so [1,2,3,4,5]\n\nSee? You get a clone, but it's not because lst[:] is explicitly coded to mean \"clone\". As you can see, it envelops all elements, thus why del lst[:] clears a list.  ", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "name": "t1_c02agpn", "controversiality": 0, "author_flair_text": null, "ups": -1, "link_id": "t3_5yt1d", "retrieved_on": 1427425847, "body": "I am wrong that somelist[:] allocates an entirely new list for the return value?\n\nThat is \"clone\". http://en.wikipedia.org/wiki/Cloning_(programming)\n\nIt does not just create a reference to the existing items, it creates a shallow copy of the whole thing. ", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02agow", "id": "c02agpn", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 5, "controversiality": 0, "archived": true, "link_id": "t3_5yt1d", "retrieved_on": 1427425847, "id": "c02agow", "author_flair_text": null, "distinguished": null, "edited": true, "name": "t1_c02agow", "parent_id": "t1_c02agob", "body": " &gt; No, [:] is the pythonic way of cloning a slicable sequence.\n\nYou are wrong. I'm sorry, but go ask #python if you want a second opinion. It DOES end up with a list that is equal to the list it came from, but it does NOT mean \"clone this list\". It means \"create a slice from (start) to (end)\", which has the same effect.\n\n&gt; Further, slicing always returns a new list. Except with del.\n\nThis is far more convenient and intuitive. ", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02agob", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": -4, "link_id": "t3_5yt1d", "retrieved_on": 1427425847, "body": " No, [:] is the pythonic way of cloning a slicable sequence. \n\nFurther, slicing **always returns a new list**. Except with del.", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02agne", "id": "c02agob", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02agne", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 6, "link_id": "t3_5yt1d", "retrieved_on": 1427425848, "id": "c02agne", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02agmz", "body": "no, you are wrong. it does not mean \"clone the list\". it just happens to do that because you select a new list composed from (start) to (end) of somelist. this behaviour is completely correct.", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "Bogtha", "created_utc": "1193021827", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 0, "author": "IHaveAnIdea", "created_utc": "1193022946", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "Bogtha", "created_utc": "1193024023", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 0, "author": "IHaveAnIdea", "created_utc": "1193024320", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "Bogtha", "created_utc": "1193025277", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193026468", "ups": -1, "gilded": 0, "link_id": "t3_5yt1d", "retrieved_on": 1427425830, "score": -1, "id": "c02ahz9", "author": "IHaveAnIdea", "archived": true, "distinguished": null, "edited": false, "body": "This thread is a giant echo chamber.", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02ahz9", "parent_id": "t1_c02ahwb", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": 2, "name": "t1_c02ahwb", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yt1d", "retrieved_on": 1427425831, "score_hidden": false, "body": "I was pointing out that you are criticising `del` for not acting like a function when it isn't actually a function.  I was also pointing out that letting it be used like a function is the point of confusion.\n\nYou replied *\"Yeah, that's what I was saying\"*, which I took to mean that you agreed with me and that it looking like a function was the point of confusion.\n\nSo did you misunderstand my previous comment, or did I misunderstand your reply?  There's nothing wrong with `del somelist[:]` unless you think `del` is a function, which it isn't.\n\nAnd can you please avoid the term \"unpythonic\" in this discussion?  You seem to be using it as a synonym for \"that which I dislike\" rather than anything linked to the \"personality\" of the Python language/community.\n", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02ahtr", "id": "c02ahwb", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 0, "controversiality": 0, "archived": true, "link_id": "t3_5yt1d", "retrieved_on": 1427425832, "id": "c02ahtr", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02ahtr", "parent_id": "t1_c02ahsw", "body": "How many times have I said it in this thread?\n\nBecause it's un-pythonic and backwards.", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02ahsw", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 2, "link_id": "t3_5yt1d", "retrieved_on": 1427425833, "body": "Then why are you complaining about `del somelist[:]` as well as `del(somelist[:])`?", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02ahq6", "id": "c02ahsw", "author_flair_css_class": null}], "subreddit": "programming", "ups": 0, "name": "t1_c02ahq6", "controversiality": 0, "archived": true, "link_id": "t3_5yt1d", "retrieved_on": 1427425834, "score_hidden": false, "id": "c02ahq6", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02ahmw", "body": "Yeah, that's what I was saying.", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 2, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yt1d", "retrieved_on": 1427425835, "body": "&gt; `del(somelist[:])`, if `del` were any other python function\n\n`del` isn't a function, it's a keyword.  You aren't evaluating the slice and passing it to a function, you are operating on the slice itself with the `del` keyword.\n\nThen only real misfeature here is that you can use `del` as if it were a function, and that is not idiomatic Python.\n", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02ahmw", "parent_id": "t1_c02agmz", "id": "c02ahmw", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": -2, "controversiality": 0, "archived": true, "link_id": "t3_5yt1d", "retrieved_on": 1427425848, "id": "c02agmz", "author_flair_text": null, "distinguished": null, "edited": true, "name": "t1_c02agmz", "parent_id": "t1_c02agm6", "body": "  to me somelist[:] has always meant \"clone the list\".\n\ndel(somelist[:]), if del were any other python function, would be evaluated as:\n\n1. clone somelist\n2. delete this new clone\n\nwhat the heck?!? del with slicing is just ass-backwards from everything else in python.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 5, "controversiality": 0, "archived": true, "link_id": "t3_5yt1d", "retrieved_on": 1427425848, "id": "c02agm6", "author_flair_text": null, "distinguished": null, "edited": true, "name": "t1_c02agm6", "parent_id": "t3_5yt1d", "body": "somelist[:] is the subsection of somelist which contains all its elements. You agree that this should delete the range 2:4 in the list, right?\n\n    del somelist[2:4]\n\nWell somelist[:] means \"the complete subsection of somelist\", so deleting that means it clears the list.", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "Poromenos", "created_utc": "1193011538", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -1, "author": "IHaveAnIdea", "created_utc": "1193011927", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "Poromenos", "created_utc": "1193012543", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -1, "author": "IHaveAnIdea", "created_utc": "1193013048", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "Poromenos", "created_utc": "1193033895", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -1, "author": "IHaveAnIdea", "created_utc": "1193035183", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "Poromenos", "created_utc": "1193058793", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "ups": -1, "archived": true, "name": "t1_c02amh9", "gilded": 0, "link_id": "t3_5yt1d", "retrieved_on": 1427425773, "score": -1, "body": "What the fuck?", "author": "IHaveAnIdea", "created_utc": "1193082131", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "score_hidden": false, "parent_id": "t1_c02ajnf", "id": "c02amh9", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 1, "name": "t1_c02ajnf", "controversiality": 0, "archived": true, "link_id": "t3_5yt1d", "retrieved_on": 1427425809, "score_hidden": false, "id": "c02ajnf", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02aiks", "body": "Oh, I see, you're trolling. Good game, good game.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02aiks", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": -1, "link_id": "t3_5yt1d", "retrieved_on": 1427425823, "body": "No, this is dereferencing:\n\n    a=1\n    referenced_a=[a]\n    de_referenced_a=referanced_a[0]", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02aihn", "id": "c02aiks", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 1, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yt1d", "retrieved_on": 1427425824, "body": "No, I'm pretty sure \"deleting\" means \"deleting\". You're thinking \"dereferencing\".", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02aihn", "parent_id": "t1_c02agyj", "id": "c02aihn", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": -1, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yt1d", "retrieved_on": 1427425844, "body": "   Of course \"deleting\" doesn't mean deleting but rather decreasing the reference count for an object. When I have a list of primitive types which are not used by reference then how much sense does it make to remove them from the list with the del operator?\n\nAh well. I guess I'll just accept del.   ", "archived": true, "distinguished": null, "edited": true, "name": "t1_c02agyj", "parent_id": "t1_c02agxb", "id": "c02agyj", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 3, "name": "t1_c02agxb", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yt1d", "retrieved_on": 1427425844, "score_hidden": false, "body": "  Oh, no, I know, it seemed odd to me at the beginning as well, I just admitted that it eschewed purity in favor of a more practical design instead of being all stubborn about it :/  \r\n\r\nAnyway, del doesn't actually evaluate the slice, it just looks at what you want it to delete and does it. ", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02aguz", "id": "c02agxb", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": -1, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yt1d", "retrieved_on": 1427425845, "body": "Hey, it's not as black and white as you think.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02aguz", "parent_id": "t1_c02agtj", "id": "c02aguz", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 3, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yt1d", "retrieved_on": 1427425845, "body": "  \"Delete everything in a list\" clears it?! How preposterous! That's just bad language design right there, good thing internet language designer IHaveAnIdea is on the job. ", "archived": true, "distinguished": null, "edited": true, "name": "t1_c02agtj", "parent_id": "t3_5yt1d", "id": "c02agtj", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 2, "gilded": 0, "link_id": "t3_5yt1d", "retrieved_on": 1427425836, "score": 2, "body": " there are three operations on things like lists, hashes, and attributes - get, set, and del\n\nget -&gt; foo[key]\n\nset -&gt; foo[key] = 5\n\ndel -&gt; del foo[key]\n\nthese are all handled differently by the interpreter (syntax), because they _have to_ be. the get case is just an expression, but in the del/set case (which are not expressions), you don't want to look up the object, you want to mutate whatever is holding the reference to the object.\n\nlist slicing is really just a syntax case which builds a slice object and then calls the normal mapping functions with that slice object, so having 'del foo[:]' clear foo makes complete sense. if you still think it's un-pythonic, then go dig through the python docs about \\_\\_getitem\\_\\_ \\_\\_setitem\\_\\_ \\_\\_delitem\\_\\_ and you'll understand (they're in the language reference).\n\nif del is still confusing to you, think of it as set, but will a null reference (in fact, that's how it's implemented in CPython)\n      ", "author": "mindslight", "created_utc": "1193020659", "distinguished": null, "edited": true, "id": "c02ahjh", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02ahjh", "parent_id": "t3_5yt1d", "score_hidden": false, "author_flair_css_class": null}
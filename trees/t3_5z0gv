
{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193236882", "ups": 2, "gilded": 0, "link_id": "t3_5z0gv", "retrieved_on": 1427425580, "score": 2, "body": "Uh, been there, done that, last week.", "author": "davidw", "author_flair_text": null, "distinguished": null, "edited": false, "id": "c02b1a4", "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02b1a4", "parent_id": "t3_5z0gv", "score_hidden": false, "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427425553, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02b3e7", "gilded": 0, "link_id": "t3_5z0gv", "downs": 0, "score": 3, "score_hidden": false, "body": "  A place to start for a possible GUI primitive is one described by Alan Kay: [\"a smart rectangle that can contain other smart rectangles\"](http://c2.com/cgi-bin/wiki?MiscKayBits).\n\nOkay, great. We can go and implement our GUI with this, right? Slow down, Tiger. Let's see you ship your smart-rectangle GUI app on the Mac. Eventually an emo kid with [thick-rimmed glasses](http://programming.reddit.com/info/2zg0y/comments/c2zhzs) from Seattle will open up his MacBook and write in his blog, \"If I hold down Command+Option and click while saying 'zipadee doo dah', Finder does frob whereas FooApp does zot. USELESS!\" This will be echoed in a resounding chorus of \"USELESS!\" from throughout the Mac community (those Mac users take pride in \"thinking different\") and your application will never gain any traction. [Not in a million billion years.](http://members.aol.com/bek0911/images/i have u now gitaroo man......jpg)\n\nSteve Jobs invested millions of dollars in usability research and the result is _the_ last word in how a computer can and should be used. And you want to throw all that hard work away just for some theoretical purity? (heavy, ObQwe1234-level sarcasm) That's why computer science isn't real science. That being the case, as anyone who's actually implemented a GUI for real-world use knows, there _has to be a one-to-one mapping between your GUI objects and ones in the underlying window environment_. It must respond to keyboard and mouse events as the native widget does. It must draw itself as the native widget does. It must fire secondary events: onClick, onUnclick, onDoubleClick, onClickWithPepperoniAndCheese, etc. _just as the native widget does_.\n\nSo to come up with a nice neat set of abstractions for these you have to generalize across the various GUI environments (where they are the same, and specialize where they are different from one another), and also produce a whole lot of controls for your library that take into account all the nuances associated with those controls in their respective native environments.\n\nThis is why GUI programming sucks, and will never get better. Even if you constrain yourself to one environment (as VB does for Windows, or Cocoa for Mac) it will be this way because the major GUI environments were designed by usability-research focus-group testing (or else just scabbing from the Mac), not formalized abstractions of UI widgets. That, combined with a general MySpace-using populace rendered absolutely craven by the marketing departments of Apple, Microsoft, and others, ensures the continued entrenchitude of said GUI environments, making it difficult for alternatives potentially more useful to different sets of people to get a foothold. (Look at the sad story of the AutoCAD interface for example. In the old days it was simple, yet powerful -- from a draftsman's perspective; now it's yet another MFCWinCloneApp.)", "author": "bitwize", "created_utc": "1193253473", "distinguished": null, "edited": true, "author_flair_text": null, "subreddit": "programming", "ups": 3, "parent_id": "t3_5z0gv", "id": "c02b3e7", "author_flair_css_class": null}
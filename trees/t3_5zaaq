{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 8, "author": "null_vector", "created_utc": "1193575319", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 11, "author": "annekat", "created_utc": "1193580327", "children": [{"controversiality": 0, "retrieved_on": 1427425049, "subreddit_id": "t5_2fwo", "created_utc": "1193687945", "ups": 1, "gilded": 0, "link_id": "t3_5zaaq", "downs": 0, "score": 1, "body": "[deleted]", "author": "[deleted]", "author_flair_text": null, "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit": "programming", "name": "t1_c02c0ts", "parent_id": "t1_c02bsk1", "score_hidden": false, "id": "c02c0ts"}], "subreddit_id": "t5_2fwo", "ups": 11, "name": "t1_c02bsk1", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zaaq", "retrieved_on": 1427425156, "score_hidden": false, "body": "Why, how could anyone be confused by that?", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02bsdv", "id": "c02bsk1", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 8, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zaaq", "retrieved_on": 1427425158, "body": "Taken from the comments on page not the article.\n\n&gt;Something interesting about D. Having just installed Leopard I googled for the D Programming Language with Leopard and came up w/ an apple developer article [1] that lead me to dig further into the new DTrace utility [2] from Sun.\n&gt; \n&gt; Apparently D is either written in, or extensible by the D Programming Language. So there\u2019s a relatively big win for a new(-ish) language, if anyone was wondering about its utility/maturity.\n&gt; \n&gt; [1] http://developer.apple.com/leopard/overview/\n&gt; \n&gt; [2] http://www.sun.com/bigadmin/content/dtrace/\n\nI think he might be just a little bit confused.\n\nD != D", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02bsdv", "parent_id": "t3_5zaaq", "id": "c02bsdv", "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427425158, "subreddit_id": "t5_2fwo", "created_utc": "1193575319", "ups": 1, "gilded": 0, "link_id": "t3_5zaaq", "downs": 0, "score": 1, "body": "[deleted]", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "id": "c02bsdw", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02bsdw", "parent_id": "t3_5zaaq", "score_hidden": false, "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 7, "author": "[deleted]", "created_utc": "1193578590", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 0, "author": "joesb", "created_utc": "1193588723", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": 2, "gilded": 0, "link_id": "t3_5zaaq", "retrieved_on": 1427425137, "score": 2, "body": "[deleted]", "author": "[deleted]", "created_utc": "1193602516", "distinguished": null, "edited": true, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02bu0u", "parent_id": "t1_c02bt08", "score_hidden": false, "id": "c02bu0u"}], "subreddit": "programming", "ups": 0, "name": "t1_c02bt08", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zaaq", "retrieved_on": 1427425150, "score_hidden": false, "body": "&gt; And this sounds like he thinks the original C++ compiler was part of the C preprocessor instead of a preprocessor.\n\nI'm not even a native English speaker but I believe that in proper English you use 'the' when you say \"the X of Y\" and you also use 'the' when you talk about an object that you have already mentioned before.\n\nSo it is appropriate to say \"the pre-processor of C\".\n\nAnd he could have said \"...to be consistent with both C and **that C pre-processor he implemented and which we talked about earlier** .\" but I believe it is okay to use 'the' here.\n", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02bshj", "id": "c02bt08", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "author_flair_text": null, "name": "t1_c02btip", "gilded": 0, "link_id": "t3_5zaaq", "retrieved_on": 1427425143, "score": -3, "score_hidden": false, "body": "Templates do not use *The C Preprocessor* but they sure are a form of preprocessing source code.", "author": "ochs", "created_utc": "1193596412", "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "ups": -3, "parent_id": "t1_c02bshj", "id": "c02btip", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 7, "name": "t1_c02bshj", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zaaq", "retrieved_on": 1427425157, "score_hidden": false, "body": "[deleted]", "archived": true, "distinguished": null, "edited": true, "parent_id": "t3_5zaaq", "id": "c02bshj", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "OMouse", "created_utc": "1193584278", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "ayrnieu", "created_utc": "1193621485", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193626479", "name": "t1_c02bvwr", "gilded": 0, "link_id": "t3_5zaaq", "retrieved_on": 1427425112, "score": 3, "score_hidden": false, "body": "&gt;Standardized languages, I suppose you mean. \n\nActually no. This problem is prevalent in standardized anything though...somehow standardizing something adds two or three extra bureacratic slow-downs.\n\nYou can see the problem in the unstandardized languages Perl and Python. It takes time to communicate changes and gather opinions and the opinions gathered may be wrong.\n\n&gt;Undstandardized one-implementation languages change regularly. \n\nNot as often as we'd like to think.\n\nThe problem is the amount of people using a language. They become used to the current state of the language and will fight against any change because it may break many applications that they've written. This happens to any language, standardized or unstandardized.", "author": "OMouse", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 3, "parent_id": "t1_c02bvic", "id": "c02bvwr", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 2, "controversiality": 0, "archived": true, "link_id": "t3_5zaaq", "retrieved_on": 1427425117, "id": "c02bvic", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02bvic", "parent_id": "t1_c02bsq2", "body": "&gt; and other languages\r\n\r\nStandardized languages, I suppose you mean.  Standardized languages for which anything interesting must be a change to the language and not an extension to it, I suppose you mean.\r\n\r\nUndstandardized one-implementation languages change regularly. Standardized languages which have impressive growths of features-that-don't-need-the-language-to-change: Common Lisp, Scheme, Forth.\r\n\r\nAn outlier: GHC.  But for practical purposes all Haskell programmers use an unstandardized language with the same name as the closely related standardized language.  (Eventually the standard will leap into some parity.)", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 2, "controversiality": 0, "archived": true, "link_id": "t3_5zaaq", "retrieved_on": 1427425154, "id": "c02bsq2", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02bsq2", "parent_id": "t3_5zaaq", "body": "Another problem with C, C++ and other languages is that it's hard to change anything because of the committee/bureaucracy crap involved.", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 4, "author": "cypherx", "created_utc": "1193589872", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 7, "author": "mudgen", "created_utc": "1193601989", "children": [{"controversiality": 0, "retrieved_on": 1427425132, "subreddit_id": "t5_2fwo", "created_utc": "1193606989", "ups": 17, "gilded": 0, "link_id": "t3_5zaaq", "downs": 0, "score": 17, "id": "c02buev", "author": "cypherx", "archived": true, "distinguished": null, "edited": true, "body": "I agree with the basic premise that a cleaner language will make it easier to write a good compiler. However, Bosco makes so many errors in the details that I suspect he isn't overly familiar with his subject matter. \n\n1) Bosco says: \"Not many languages can bootstrap. C can.\"\n\nWrong. Every Turing Complete programming language with I/O (or atleast some way of encoding source code) can be self-hosting.  It's really no big deal.\n\n2) Bosco says: \"The idea is that you\u2019d run a Python interpreter that would run the Python-Python interpreter, which in turn, would be able run Python programs. But very very slowly. However, once you got the Python-Python interpreter to work you could modify the source code to the Python-Python interpreter (which is written in Python not C), and try out different ways of interpreting Python programs.\"\n\nHe doesn't seem to understand PyPy. First of all, PyPy's core language isn't really Python, but a restricted subset called RPython. Furthermore, PyPy is about code transformation, not interpretation. Ideally PyPy will execute Python programs much faster than CPython.\n\n3) Bosco says: \"Bjarne Strousoup originally wrote the C++ compiler in the pre-processor of C.\"\n\nAgain, wrong. Bjarne wrote a compiler called Cfront which generated C code as an IL. Note, Cfront was a *compiler* (written in C++, by the way), and not a C pre-processor macro. \n\n4) Bosco says: \"C++ inherited a grammar that had to be consistent with both C and the C pre-processor.\"\n\nC compatibility wasn't incidental but rather a design choice from the very beginning. \n\n5) Bosco says: \"Combine this with the development of templates, which also exploits the preprocessor to add language extensions to C\"\n\nUgh. This is just terrible. Templates have nothing to do with C. Templates have nothing to do with the preprocessor. \n\nI respect Bosco's excitement about D and interest in language design. However, I would strongly advise he hold off on blogging until he learns a bit more. This level of inaccuracy is just embarassing.   \n\nNote: as an aside...if we're talking about clean grammars aiding compiler writers, D is hardly a model language. It's only clean when compared with C++.   ", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02buev", "parent_id": "t1_c02btz3", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "name": "t1_c02btz3", "controversiality": 0, "author_flair_text": null, "ups": 7, "link_id": "t3_5zaaq", "retrieved_on": 1427425137, "body": "Well do you care to enlighten us then?", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02bt3f", "id": "c02btz3", "author_flair_css_class": null}], "subreddit": "programming", "ups": 4, "name": "t1_c02bt3f", "controversiality": 0, "archived": true, "link_id": "t3_5zaaq", "retrieved_on": 1427425149, "score_hidden": false, "id": "c02bt3f", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5zaaq", "body": "Lots of errors, big and small. Author doesn't quite know what he's talking about. ", "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427425144, "subreddit_id": "t5_2fwo", "created_utc": "1193595962", "ups": 1, "gilded": 0, "link_id": "t3_5zaaq", "downs": 0, "score": 1, "body": "[deleted]", "author": "[deleted]", "author_flair_text": null, "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit": "programming", "name": "t1_c02bthc", "parent_id": "t3_5zaaq", "score_hidden": false, "id": "c02bthc"}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 1, "gilded": 0, "link_id": "t3_5zaaq", "retrieved_on": 1427425143, "score": 1, "id": "c02btk8", "author": "[deleted]", "created_utc": "1193597044", "distinguished": null, "edited": false, "body": "[deleted]", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02btk8", "parent_id": "t3_5zaaq", "score_hidden": false, "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427425142, "subreddit_id": "t5_2fwo", "author_flair_text": null, "name": "t1_c02btm9", "gilded": 0, "link_id": "t3_5zaaq", "downs": 0, "score": 16, "score_hidden": false, "id": "c02btm9", "author": "WalterBright", "created_utc": "1193597771", "distinguished": null, "edited": true, "archived": true, "subreddit": "programming", "ups": 16, "parent_id": "t3_5zaaq", "body": "The fruit of a philosophy that the user experience trumps implementation difficulty can be a language that is practically impossible to implement. The other consequences of this are:\r\n\r\n1) Implementations will have varying levels of conformance, making writing portable source code difficult.\r\n\r\n2) Long waits (many years) by customers for implementations of various features.\r\n\r\n3) A shrinking number of implementations, reducing competition among compiler vendors.\r\n\r\n4) A dearth of ancilliary tools that can process source code correctly.\r\n\r\nOne large goal in the design of the D programming language is to make it easy to create compilers for it, thus encouraging the development of a diverse ecosystem of alternative compilers and source code analysis tools. We'll see how well this turns out. ", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1193613037", "ups": 1, "gilded": 0, "link_id": "t3_5zaaq", "retrieved_on": 1427425126, "score": 1, "body": "&gt; One of the holy grails of language design is to design a language rich enough so that one can [practically] write the compiler in the language in which it compiles for.\n\nUmm, not really. For general-purpose languages it kind of falls out trivially.", "author": "shaurz", "author_flair_text": null, "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit": "programming", "name": "t1_c02buue", "parent_id": "t3_5zaaq", "score_hidden": false, "id": "c02buue"}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "easytiger", "created_utc": "1193672016", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "easytiger", "created_utc": "1193672129", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c02c237", "gilded": 0, "link_id": "t3_5zaaq", "retrieved_on": 1427425033, "score": 1, "created_utc": "1193699803", "id": "c02c237", "author": "WalterBright", "archived": true, "distinguished": null, "edited": false, "body": "It'll interoperate with any C libs written with a compatible compiler - DMC for DMD for Windows, gcc for DMD for Linux. If you're using a different C compiler, it's the same problem as linking together objects from different C compilers.", "subreddit_id": "t5_2fwo", "score_hidden": false, "parent_id": "t1_c02bywa", "ups": 1, "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02bywa", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5zaaq", "retrieved_on": 1427425074, "body": " http://www.digitalmars.com/d/faq.html#omf\r\n\r\nSo no? Hmmm ", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02byvh", "id": "c02bywa", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02byvh", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 1, "link_id": "t3_5zaaq", "retrieved_on": 1427425074, "body": " Does D interoperate with C libs and system libs written in C like c++ out of interest? ", "archived": true, "distinguished": null, "edited": true, "parent_id": "t3_5zaaq", "id": "c02byvh", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "curtisb", "created_utc": "1193529682", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "KayEss", "created_utc": "1193561651", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "curtisb", "created_utc": "1193593767", "children": [{"controversiality": 0, "retrieved_on": 1427425116, "subreddit_id": "t5_2fwo", "archived": true, "gilded": 0, "link_id": "t3_5z934", "downs": 0, "score": 1, "score_hidden": false, "body": "In the distribution you will find a file `bin/Mahlee.ST.js` which contains a pure JavaScript implementation of the API. Using that as a base it would be possible to use something like Google Gears if it's available on the browser.\n\nThat way you'd get multi-threading if available, and single threading if not using the exact same program structure.\n\nIf you wanted to look at that route it's something I'd be interested in helping with.", "author": "KayEss", "created_utc": "1193623105", "distinguished": null, "edited": false, "id": "c02bvmk", "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c02btee", "name": "t1_c02bvmk", "author_flair_css_class": null}], "subreddit": "programming", "ups": 1, "score_hidden": false, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z934", "retrieved_on": 1427425146, "body": "Looks interesting.  Of course one of my constraints is that I need to run on unmodified browser JavaScript implementations.\n", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02btee", "parent_id": "t1_c02brx3", "id": "c02btee", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 2, "name": "t1_c02brx3", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z934", "retrieved_on": 1427425165, "score_hidden": false, "id": "c02brx3", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02bq2b", "body": " You might like to take a look at how [Mahlee](http://www.kirit.com/Categories:/Mahlee\u2122) does futures in JavaScript. ", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "doublec", "created_utc": "1193567025", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": 1, "gilded": 0, "link_id": "t3_5z934", "retrieved_on": 1427425149, "score": 1, "id": "c02bt3h", "author": "curtisb", "created_utc": "1193589876", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "score_hidden": false, "name": "t1_c02bt3h", "parent_id": "t1_c02bs4d", "body": "That's interesting stuff.  At Google we use a JavaScript compiler for obfuscation/compression/typechecking, so we could add a facility like Narrative JavaScript.  On the other hand, I've intentionally been avoiding as much Google JavaScript infrastructure as possible because I've found it so unwieldy to the development process.\n\nThe \"callAsap\" functionality is something that I've not seen in the futures literature, although, admittedly my exposure's been pretty superficial so far.  Since I need to run on standard browser JavaScript, I can't block when a future is accessed.  So instead I just have a way to schedule a future function call for when the future(s) passed as arguments become available.  I still need a way to handle errors and timeouts.  Without blocking I can't use a regular try/catch block, so I'm thinking the best way to do that might be with a futures-based \"catch\" function and \"fallback\" values.\n", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "name": "t1_c02bs4d", "controversiality": 0, "archived": true, "ups": 3, "link_id": "t3_5z934", "retrieved_on": 1427425161, "id": "c02bs4d", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bq2b", "body": "You might like to have a look at [my post](http://www.bluishcoder.co.nz/2006/09/futures-and-promises-in-javascript.html) on futures and promises in Javascript.\n\nMore recently, there is also [Strands](http://www.xucia.com/#Strands).", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02bq2b", "ups": 3, "controversiality": 0, "archived": true, "link_id": "t3_5z934", "retrieved_on": 1427425188, "score_hidden": false, "id": "c02bq2b", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t3_5z934", "body": " I've experimented a little bit with futures in JavaScript.  Basically I want a handle to the \"result\" of an asynchronous XMLHttpRequest that hasn't completed yet.  So, for example, I could say something like:\n\n\tfunction arrayIntersection(array1, array2) { ... }\n\tfunction showPeople(peopleArray) { ... }\n\n\tvar futureActiveUsers = activeUsersApi.sendRequest();    // sends an XMLHttpRequest\n\tvar futureFriends = friendsApi.sendRequest();            // sends another XMLHttpRequest\n\tvar futureActiveFriends = \n\t    Future.callAsap(arrayIntersection, futureActiveUsers, futureFriends);\n\tFuture.callAsap(showPeople, futureActiveFriends);\n\nThe future object I've actually implemented is much simpler than this, just because I haven't needed to do anything quite so complicated.  Just replacing hand-coded callbacks with code that looks like ordinary function composition feels like a win to me, though.\n ", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 50, "author": "lorenb", "created_utc": "1193115994", "children": [{"controversiality": 0, "retrieved_on": 1427425724, "subreddit_id": "t5_2fwo", "archived": true, "ups": -5, "gilded": 0, "link_id": "t3_5ywhh", "downs": 0, "score": -5, "id": "c02aq6x", "author": "[deleted]", "created_utc": "1193116187", "distinguished": null, "edited": true, "body": "So basically, you'd like a high-level language (say Ruby) to replace C that is:\n\n* Only something that C does\n* Only something that C does\n* A unicorn\n\nGood luck ;)", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02aq6x", "parent_id": "t1_c02aq6e", "score_hidden": false, "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 53, "author": "Fork82", "created_utc": "1193116469", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 6, "author": "dmpk2k", "created_utc": "1193124830", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 8, "author": "Fork82", "created_utc": "1193125588", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 23, "author": "dmpk2k", "created_utc": "1193126286", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 4, "author": "Fork82", "created_utc": "1193127550", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "dmpk2k", "created_utc": "1193128033", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "Fork82", "created_utc": "1193128195", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "dmpk2k", "created_utc": "1193129037", "children": [{"controversiality": 0, "retrieved_on": 1427425707, "subreddit_id": "t5_2fwo", "created_utc": "1193137421", "ups": 3, "gilded": 0, "link_id": "t3_5ywhh", "downs": 0, "score": 3, "body": "Just in case you missed khookie's post:\nhttp://jan.kneschke.de/projects/lua/\n\nLooks very promising - I might have a crack at it tonight.", "author": "Fork82", "archived": true, "distinguished": null, "edited": false, "id": "c02arhb", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02arhb", "parent_id": "t1_c02ar2m", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": 3, "name": "t1_c02ar2m", "controversiality": 0, "archived": true, "link_id": "t3_5ywhh", "retrieved_on": 1427425713, "score_hidden": false, "id": "c02ar2m", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02ar0z", "body": "A band-aid solution. Workable, and arguably even has some advantages (and disadvantages). That doesn't fix one of the other real killers though:\n\nThe start-up time for the process. \n\nI've found in the past that going from CGI to FastCGI results in not just one but often _two_ orders of magnitude speedup. You have the loading and forking -- which is surprisingly slow -- initialization and reestablishing a connection with the DB (and if the DB is sanely hosted on another machine that's also more load on it and the network), et cetera.\n\nCGI is a flat no if you're expecting anything beyond a few visits a day or generating static HTML content that rarely changes, something that doesn't apply to what I do.\n\nIf CGI were an adequate solution I would have been writing to stdout long ago.   ", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "name": "t1_c02ar0z", "controversiality": 0, "archived": true, "ups": 2, "link_id": "t3_5ywhh", "retrieved_on": 1427425713, "id": "c02ar0z", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02ar0p", "body": "You could run a process with the relevant data cached, and have this process talk to the CGI processes over a socket (I haven't given it much thought - this may well be a useless approach). ", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 3, "name": "t1_c02ar0p", "controversiality": 0, "archived": true, "link_id": "t3_5ywhh", "retrieved_on": 1427425713, "score_hidden": false, "id": "c02ar0p", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02aqzn", "body": " Unfortunately, I can't use CGI. It's too slow.\n\nOne thing besides the generally nice language that attracts me to Lua is that the implementation is quite fast. Throw in LuaJIT and it's even faster. Now use CGI and...\n\nOh snap. I'm down to a few requests a second again with high load and no caching in memory. Very 1990s. That quite defeats the purpose of using Lua in the first place. :( ", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425708, "subreddit_id": "t5_2fwo", "archived": true, "ups": 3, "gilded": 0, "link_id": "t3_5ywhh", "downs": 0, "score": 3, "id": "c02arg8", "author": "khookie", "created_utc": "1193136874", "distinguished": null, "edited": false, "body": "Fork82, you might want to try http://jan.kneschke.de/projects/lua/", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02arg8", "parent_id": "t1_c02aqzn", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": 4, "name": "t1_c02aqzn", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywhh", "retrieved_on": 1427425714, "score_hidden": false, "body": "   For my own application, I wrote most of the CGI stuff myself (although I stole the CGI variable parsing from a Lua package - forgotten which one), and also wrote my own database engine (an append-only CSV file with an indexing file for seeking directly to the relevant bits - very simple but also very fast).\n\nI haven't moved it to FastCGI yet - I'll probably re-implement that part myself (although it sounds tricky - and the performance is fine at the moment).   ", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02aqx9", "id": "c02aqzn", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "Gotebe", "created_utc": "1193130233", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 5, "author": "[deleted]", "created_utc": "1193137806", "children": [{"controversiality": 0, "retrieved_on": 1427425706, "subreddit_id": "t5_2fwo", "created_utc": "1193139231", "ups": 1, "gilded": 0, "link_id": "t3_5ywhh", "downs": 0, "score": 1, "body": "I'm sure the OP does care about what people consider to be major shortcomings of the languages suggested.  He can decide for himself whether or not it is relevant to him.", "author": "Wriiight", "archived": true, "distinguished": null, "edited": false, "id": "c02arl3", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02arl3", "parent_id": "t1_c02ari0", "score_hidden": false, "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "Gotebe", "created_utc": "1193139247", "children": [{"controversiality": 0, "retrieved_on": 1427425677, "subreddit_id": "t5_2fwo", "created_utc": "1193158010", "ups": 1, "gilded": 0, "link_id": "t3_5ywhh", "downs": 0, "score": 1, "body": "[deleted]", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "id": "c02ats9", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02ats9", "parent_id": "t1_c02arl4", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": 2, "name": "t1_c02arl4", "controversiality": 0, "archived": true, "link_id": "t3_5ywhh", "retrieved_on": 1427425706, "score_hidden": false, "id": "c02arl4", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02ari0", "body": "Yes, you are right, and I'm sorry for not being on topic.\n\nBut if it's true, I won't get over this, not sub-par, but, to me, downright broken, interface to SQL. It's out of line, regardless of me being a Blub programmer. \n\nI think my complaint is correct and if it makes any of developers of that lib think about it a little bit, I achieved something (except playing smartass, as you rightfully note).", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02ari0", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 5, "link_id": "t3_5ywhh", "retrieved_on": 1427425707, "id": "c02ari0", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02ar4r", "body": "The OP never mentions SQL; this thread is *not* strictly about languages per se, but rather languages that fit the OP's criteria.  Furthermore, to judge a language on *second-hand* knowledge of *one* of it's libraries sounds like something a Blub programmer would do.", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "chollida1", "created_utc": "1193152211", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "Gotebe", "created_utc": "1193153375", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "chollida1", "created_utc": "1193153689", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "brianary", "created_utc": "1193155125", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "chollida1", "created_utc": "1193162351", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 5, "author": "MarshallBanana", "created_utc": "1193171285", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "chollida1", "created_utc": "1193172591", "children": [{"controversiality": 0, "retrieved_on": 1427425639, "subreddit_id": "t5_2fwo", "archived": true, "ups": 2, "gilded": 0, "link_id": "t3_5ywhh", "downs": 0, "score": 2, "id": "c02aws2", "author": "MarshallBanana", "created_utc": "1193182179", "distinguished": null, "edited": false, "body": "I think what I said was implied by the original posters. Obviously they were not saying that Javascript is immature because it does not support parameterized SQL.", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02aws2", "parent_id": "t1_c02avt5", "score_hidden": false, "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "Gotebe", "created_utc": "1193219144", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "chollida1", "created_utc": "1193236782", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193239009", "name": "t1_c02b1is", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425577, "score": 1, "score_hidden": false, "body": "Ah, ok, I see it doesn't sound great, especially when taken out of context like that ;-).\n\nI *do* [speak](http://programming.reddit.com/info/5ywhh/comments/c02ar4r) against SQL by concatenation from the very start, though.\n\nI guess I should have emphasized that better from the very beginning.", "author": "Gotebe", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c02b19k", "id": "c02b1is", "author_flair_css_class": null}], "subreddit": "programming", "ups": 1, "name": "t1_c02b19k", "controversiality": 0, "archived": true, "link_id": "t3_5ywhh", "retrieved_on": 1427425580, "score_hidden": false, "id": "c02b19k", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02b01g", "body": "&gt; In fact, I'd say a language deserves no looking at if the surrounding libraries don't do it. In this day and age, it's better they didn't exist at all.\n\nIts this statement I took issue with.  From your own mouth:)  No dishonesty intended:)  \n\nCheers\n", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 1, "name": "t1_c02b01g", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywhh", "retrieved_on": 1427425596, "score_hidden": false, "body": "I said it's immature to do SQL using string concatenation *and not* parametrization. I *did not* say it's immature because you don't have an SQL lib with parametrization.\n\nI think you're not being honest here, and just trying to wiggle your way out.", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02avt5", "id": "c02b01g", "author_flair_css_class": null}], "subreddit": "programming", "ups": 1, "name": "t1_c02avt5", "controversiality": 0, "archived": true, "link_id": "t3_5ywhh", "retrieved_on": 1427425653, "score_hidden": false, "id": "c02avt5", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02avmw", "body": "&gt; A language should either not have SQL support at all, or have parameterized SQL. There is no middle ground here.\n\nAgreed, I never said a language should have SQL support but no parameterized SQL support.\n\nI just said that I believe its wrong to say a language must have parameterized SQL support or its \"immature\" or wrong.", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193204219", "name": "t1_c02azec", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425605, "score": 0, "score_hidden": false, "id": "c02azec", "author": "Gotebe", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 0, "parent_id": "t1_c02avmw", "body": "Yes, PHP blunder is *the* reason why I'm so upset. And now, seeing it repeated, oh, my!", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 5, "name": "t1_c02avmw", "controversiality": 0, "archived": true, "link_id": "t3_5ywhh", "retrieved_on": 1427425653, "score_hidden": false, "id": "c02avmw", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02audb", "body": "&gt; It's nice that you think so but it is subjective. Not every language needs this.\n\nA language should either *not have SQL support at all*, or have parameterized SQL. There is no middle ground here.\n\nThe only exception is C APIs, and even that is a bit shaky because it will only tempt the PHP developers to just bridge in the C API like they did with mysql, and created the largest source of web vulnerabilities ever in one fell swoop.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 2, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywhh", "retrieved_on": 1427425670, "body": " &gt; It's not subjective. \n\nIt's nice that you think so but it is subjective.  Not every language needs this.\n\n&gt;If a language doesn't support parameterized SQL, that's a symptom of shocking immaturity.\n\nOr a language that isn't intended to do sql.  Many DSL's and lesser known languages are valuable programming languages and they don't have an SQL support.   ", "archived": true, "distinguished": null, "edited": true, "name": "t1_c02audb", "parent_id": "t1_c02atdo", "id": "c02audb", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02atdo", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5ywhh", "retrieved_on": 1427425683, "id": "c02atdo", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02at55", "body": "He's right, though. It's not subjective. If a language doesn't support parameterized SQL, that's a symptom of shocking immaturity.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 2, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywhh", "retrieved_on": 1427425687, "body": "Well then we disagree, no harm in that. Even though I disagree with you I'm glad to see your pasionate about your ideals:)", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02at55", "parent_id": "t1_c02at3j", "id": "c02at55", "author_flair_css_class": null}], "subreddit": "programming", "ups": 1, "name": "t1_c02at3j", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywhh", "retrieved_on": 1427425687, "score_hidden": false, "body": "No, no, and no!\n\nSorry, it's much more than a need. I explained why is absence of parametrized SQL inexcusable. It's not about me at all.\n\nIt's really about a language being immature. Yes, a language, not a library. Because if people who work in a language think string concatenation is enough (or, god forbid, ok), it's a sign of a complete lack of any competence in the field. That's why I wrote that it's better SQL lib didn't exist at all.\n\nIf one doesn't know how something is done, she just shouldn't do it, and not flaunt ignorance around. That's *immature*.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02asxl", "id": "c02at3j", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 2, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywhh", "retrieved_on": 1427425688, "body": "&gt; I'd say a language deserves no looking at if the surrounding libraries don't do it.\n\nNot everyone uses SQL, that might be a requirement for you but your needs don't match everyone else's.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02asxl", "parent_id": "t1_c02ar4r", "id": "c02asxl", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425675, "subreddit_id": "t5_2fwo", "created_utc": "1193159206", "ups": 1, "gilded": 0, "link_id": "t3_5ywhh", "downs": 0, "score": 1, "id": "c02aty9", "author": "procrastitron", "archived": true, "distinguished": null, "edited": false, "body": "Generating embedded SQL to access a database is broken in the first place. It's a completely unstructured way to code. It's basically a form of reflection, but using a completely new language. Yes, parameterized SQL is better than just concatenating strings. However you're still generating your program logic as strings, you just have extra hand holding while you do it.\n\nMicrosoft (believe it or not) is on the right track with Linq, but the same ideas can be adopted to other languages. You wouldn't have as tight an integration as Linq does, but it would still be a hell of a lot better than using SQL strings.", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02aty9", "parent_id": "t1_c02ar4r", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": 1, "name": "t1_c02ar4r", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywhh", "retrieved_on": 1427425712, "score_hidden": false, "body": "I am particularly sensitive to absence of parametrized SQL. It's a complete no-no and a show stopper.\n\nIn fact, I'd say a *language* deserves no looking at if the surrounding libraries don't do it. In this day and age, it's better they didn't exist *at all*.\n\nWhy such staunchness? Because it's *the way* to program SQL databases. It's efficient, comprehensive wrt type conversions and quite safe. Programmatic SQL by string concatenation isn't any of that, it's plain amateurish.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02aqx9", "id": "c02ar4r", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 11, "author": "a1k0n", "created_utc": "1193148789", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "dmpk2k", "created_utc": "1193161072", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "a1k0n", "created_utc": "1193166863", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 2, "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425654, "score": 2, "body": "Very much obliged. :D", "author": "dmpk2k", "created_utc": "1193171047", "distinguished": null, "edited": false, "id": "c02avlr", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02avlr", "parent_id": "t1_c02auzy", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02auzy", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 3, "link_id": "t3_5ywhh", "retrieved_on": 1427425662, "body": "I dunno, about a day or so.  I had plenty experience embedding Lua into things already, and we had a large support library already built up.\n\nHere's some (untested) code to get you started:  [C++ glue](http://a1k0n.net/code/fcgilua/example.cpp.txt)  | [Lua code](http://a1k0n.net/code/fcgilua/example.lua.txt)\n\nThat's derived from what we use in production, so it does work in general.  FastCGI is an absolute bitch to debug, though.", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02au6h", "id": "c02auzy", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02au6h", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 2, "link_id": "t3_5ywhh", "retrieved_on": 1427425672, "id": "c02au6h", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02asgu", "body": "Thanks for the code-snippets. Right now I'm only considering Lua for a personal project, so I'd rather not reinvent the wheel if I can get away with it. :)\n\nRoughly how long did it take you to write the FastCGI interface?", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 11, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywhh", "retrieved_on": 1427425695, "body": "We use Lua for our web app, but we don't use Kepler.  I rolled my own FastCGI interface which was really easy.  \n\nBut yes, LuaSQL not supporting proper escaping is totally bonkers; I always add my own escaping function (which just calls mysql_escape_string in our case and returns back to Lua).  And I wrote my own wrapper to execute() to support Perl-style \"where blah=?,foo=?\" type stuff.  It isn't very hard to write.  \n\nBut you're not going to get away with using standalone Lua to do much of anything without providing some functionality in C.\n\nHaha, in fact this is the code we use in production (there's a subtle hint at my frustration with the lack of this feature in LuaSQL):\n\n    static int lua_mysql_escape_string(lua_State *L)\n    {\n        char *fuckyou;\n        const char *s = lua_tostring(L, 1);\n        unsigned n = lua_strlen(L, 1);\n        fuckyou = malloc(2*n+1);\n        mysql_escape_string(fuckyou, s, n);\n        lua_pushstring(L, fuckyou);\n        free(fuckyou);\n        return 1;\n    }\n\n    LUASQL_API int luasql_libopen_mysql (lua_State *L) {\n        [...]\n        lua_register(L, \"db_escape\", lua_mysql_escape_string);\n        [...]\n    }\n\nAnd here's a simplified version of the Lua code we use for formatting queries.\n\n    local function dbquote(thing)\n        if(type(thing) == \"string\") then\n            return \"'\"..db_escape(thing)..\"'\"\n        elseif type(thing) == \"number\" then\n            return thing\n        elseif type(thing) == \"nil\" then\n            return \"null\"\n        else\n            error('Trying to use a '..type(thing)..' as a SQL argument!')\n        end\n    end\n\n    function db.format(fmt, ...)\n        local n=0\n        local args = {...}\n        return string.gsub(fmt, \"?\", function() n=n+1 return dbquote(args[n]) end)\n    end\n\n^ that last bit should probably be changed to use Lua 5.1's select() function instead of making an args table.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02asgu", "parent_id": "t1_c02aqx9", "id": "c02asgu", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 23, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywhh", "retrieved_on": 1427425714, "body": "I've been exploring doing webdev with Lua, but I keep running into the wall that is Kepler. Two things bother me about it, and these are just the parts I've looked at:\n\n* LuaSQL doesn't have parameterized SQL that I can find. The examples given on the webpage are _begging_ for SQL injection attacks. Perl and Python (and PHP with PearDB for quite a while now) do it, everyone with the vaguest clue knows about it, but LuaSQL doesn't have it. This is **big**, and has made me very leery of Kepler. It doesn't help I can't do prepare statements either.\n\n* CGILua appears to have no way to run a persistent process with state, e.g. something like FastCGI. Oh, it can interface with FastCGI, but from what I'm seeing in the source it recreates an environment, reloads the damn script and re-executes it fresh for every request. That removes one of the main advantages of having a persistent process. I humbly submit that this is braindead.\n\nIf I want to use Kepler, I'm going to have to write my own wrapper for execute() to try and stave off vulnerabilities, and I'll have to throw out much of CGILua and just use the SAPI bindings. It's not too much trouble, and I'm thinking of doing it anyway, but it's not out of the box either. It makes me wonder what other surprising design decisions I haven't noticed yet. \n\nAlso, if I wanted something like Rails or Django, forget it. Kepler is working on that for 1.2, but 1.1 isn't finished yet, and 1.2 looks like it's several years away.\n\nIt's a pity, but that's how I see it. I'd be delighted to learn otherwise though.     ", "archived": true, "distinguished": null, "edited": true, "name": "t1_c02aqx9", "parent_id": "t1_c02aqvw", "id": "c02aqx9", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 8, "name": "t1_c02aqvw", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywhh", "retrieved_on": 1427425715, "score_hidden": false, "body": " I'm actually doing some non-trivial web development in Lua at the moment, and it is suprisingly painless. Web development seems to lead to a massive bunch of iterators - which work very well in Lua (where iterators are much more pleasant than a traditional C-style for-loop). ", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02aqu6", "id": "c02aqvw", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 20, "author": "[deleted]", "created_utc": "1193127724", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 5, "author": "norkakn", "created_utc": "1193149558", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 12, "author": "[deleted]", "created_utc": "1193150125", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02asqc", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425691, "score": 10, "score_hidden": false, "body": "(and then there's stuff like [pymite](http://pymite.python-hosting.com/), of course.)", "author": "[deleted]", "created_utc": "1193150840", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 10, "parent_id": "t1_c02asms", "id": "c02asqc", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193156179", "name": "t1_c02atj7", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425681, "score": 2, "score_hidden": false, "body": "One of the places I found Python was Battlefield 2. Don't know if that space is like  the space which the OP was shooting at... after all, he did say static-linking.\n\nBTW, looked much like glue code.", "author": "lbruno", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 2, "parent_id": "t1_c02asms", "id": "c02atj7", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02au3y", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425673, "score": -2, "score_hidden": false, "id": "c02au3y", "author": "macoafi", "created_utc": "1193160435", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": -2, "parent_id": "t1_c02asms", "body": "I don't know much about Windows, but I'm fairly sure any *n?x has Python by default, so you wouldn't have to include it in the installer.", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02asms", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 12, "link_id": "t3_5ywhh", "retrieved_on": 1427425692, "id": "c02asms", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02ask6", "body": "&gt; Python is &lt; 2MB?\r\n\r\nThe core library is, yes.  The exact size depends on what version you use, and what libraries you include.  And I don't think that was an absolute requirement.\r\n\r\n(including a full Python interpreter and the necessary support libraries adds 1-2 MB to a typical software installer, depending on the same factors.  might be a problem, usually isn't.) \r\n\r\nBut you seem to be missing that the post I replied to implied that Python \"haven't seen any industrial use\" in this space.  That's rubbish, of course. ", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 5, "controversiality": 0, "archived": true, "link_id": "t3_5ywhh", "retrieved_on": 1427425693, "id": "c02ask6", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02ask6", "parent_id": "t1_c02aqzy", "body": "Python is &lt; 2MB?", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -1, "author": "dmpk2k", "created_utc": "1193153786", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193160543", "ups": 4, "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425673, "score": 4, "body": "&gt; You're proposing he take a various versions of a language and start ripping out pieces of its library, and this fulfills his criteria?\n\nNope.  I'm saying that the exact size depends on what Python version he uses and what libraries he needs.  Since he's already using C, I'm sure he can figure out how to link with only the portions of the Python C library that he actually needs.", "author": "[deleted]", "author_flair_text": null, "distinguished": null, "edited": true, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02au4b", "parent_id": "t1_c02at5n", "score_hidden": false, "id": "c02au4b"}], "subreddit": "programming", "name": "t1_c02at5n", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": -1, "link_id": "t3_5ywhh", "retrieved_on": 1427425687, "body": "  You're proposing he take a various versions of a language and start ripping out pieces of its library, and this fulfills his criteria? Maybe use something else instead then? \n\nBy the reference to alternatives not widely used by industry, I was referring to some of the compiling schemes and ML dialects. I don't know how you connected that from the first paragraph to the third paragraph. Do you really think I'm not aware that Python has been packed into, say, a number of games?\n\nSounds like you're a bit too biased for your own good here, really.     ", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02aqzy", "id": "c02at5n", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02aqzy", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 20, "link_id": "t3_5ywhh", "retrieved_on": 1427425714, "body": "&gt; Tangentally, I'm seeing some people suggest Python. Good lord, right tool for the job, guys...\r\n\r\nPython's widely used in this domain.  Sounds like you're a bit too biased for your own good here, really.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02aqu6", "id": "c02aqzy", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02ati5", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425681, "score": 1, "id": "c02ati5", "author": "reddittidder", "created_utc": "1193156000", "distinguished": null, "edited": false, "body": "Re: Web development, there is Kepler, but your point is well taken.", "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c02aqu6", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": 6, "name": "t1_c02aqu6", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywhh", "retrieved_on": 1427425716, "score_hidden": false, "body": "  I'd concur with that. When I think small, portable, and interfacing well with C, Lua is one of the first things that pops to mind. Tcl might be an alternative, although it's heftier. All the other alternatives I can think of haven't seen any industrial use.\n\nI've also found Lua to have a fairly low value of suck for a common dynamically-typed language when used for embedding. By comparison, I wouldn't use it for something like web development, because the libraries are deliberately kept slim; no batteries-included to be found here.\n\nTangentally, I'm seeing some people suggest Python. Good lord, right tool for the job, guys... ", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02aq83", "id": "c02aqu6", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02aq83", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 53, "link_id": "t3_5ywhh", "retrieved_on": 1427425724, "body": " The Lua programming language is small (~150kB), and is designed to interface with C (as one of it's main design goals). It is also one of the fastest high level dynamic languages. For these reasons it is used in many modern commercial games.\n\nYou can embed Lua in a C program (most common usage), you can run it as an ordinary interpreter, or you can create a stand-alone executable with \"srlua\". ", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02aq6e", "id": "c02aq83", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193116500", "name": "t1_c02aq84", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425724, "score": 9, "score_hidden": false, "id": "c02aq84", "author": "khookie", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 9, "parent_id": "t1_c02aq6e", "body": "Check Lua - it fulfils 2 &amp; 3 extremely well, you might also want to look at Luajit.\n\nI'm fairly sure there are other tools you can use to make it standalone.", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 17, "author": "Bogtha", "created_utc": "1193116657", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193117472", "ups": -3, "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425722, "score": -3, "score_hidden": false, "body": "+1 on Python.", "author": "Odd_Bloke", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02aqbl", "parent_id": "t1_c02aq8p", "id": "c02aqbl", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "novagenesis", "created_utc": "1193146608", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -1, "author": "Bogtha", "created_utc": "1193148139", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193149613", "ups": 1, "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425693, "score": 1, "body": "Eh, ok.  I have always been meaning to learn python, and never got around to it.  I still prefer something that can compile to an equivalent object as C but that's wishful thinking.", "id": "c02askj", "author": "novagenesis", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02askj", "parent_id": "t1_c02ase8", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": -1, "name": "t1_c02ase8", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywhh", "retrieved_on": 1427425695, "score_hidden": false, "body": "Ah, well in that case, you don't want ctypes, that's the other way around, calling C from Python.  Take a look at [the embedding section](http://docs.python.org/ext/embedding.html) of the documentation.  It's not too bad, but it really depends on what you want to do.\n", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02as7i", "id": "c02ase8", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "nglynn", "created_utc": "1193153854", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 0, "author": "novagenesis", "created_utc": "1193154155", "children": [{"controversiality": 0, "retrieved_on": 1427425682, "subreddit_id": "t5_2fwo", "created_utc": "1193155271", "ups": 1, "gilded": 0, "link_id": "t3_5ywhh", "downs": 0, "score": 1, "body": "To be honest I've never used it, but I got the impression it actually links the python interpreter into the C executable so no python install should be required on the users end.", "author": "nglynn", "archived": true, "distinguished": null, "edited": false, "id": "c02ateb", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02ateb", "parent_id": "t1_c02at81", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": 0, "name": "t1_c02at81", "controversiality": 0, "archived": true, "link_id": "t3_5ywhh", "retrieved_on": 1427425685, "score_hidden": false, "id": "c02at81", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02at6b", "body": "That's kinda cool... If that's all polished, it'd be relatively trivial to make a wrapper around any python functionality you want to use in C.\n\nHow hard is the redistributable part?  Do you just have the recipient install python or sneak a python installer into your installshield?", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 1, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywhh", "retrieved_on": 1427425685, "body": " Not sure how up to date this is but worth a look: [http://www.linuxjournal.com/article/8497](http://www.linuxjournal.com/article/8497) ", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02at6b", "parent_id": "t1_c02as7i", "id": "c02at6b", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "gte910h", "created_utc": "1193173509", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "novagenesis", "created_utc": "1193230478", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "gte910h", "created_utc": "1193257474", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "novagenesis", "created_utc": "1193315267", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "gte910h", "created_utc": "1193335586", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "novagenesis", "created_utc": "1193335850", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "gte910h", "created_utc": "1193356091", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "novagenesis", "created_utc": "1193400628", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193686942", "name": "t1_c02c0pe", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425050, "score": 1, "score_hidden": false, "id": "c02c0pe", "author": "gte910h", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c02bg9n", "body": "\n\"\"\n    You embed the python interpreter in C, then you can make python calls from c using strings of python code passed to the interpreter.\n\"\"\n\"That works I guess...I'd still rather peer level, but sure.\"\n\nI actually think that'd make a nice OSS project.... :o) A generic C&lt;-&gt;python library interface.....", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02bg9n", "ups": 1, "controversiality": 0, "archived": true, "link_id": "t3_5ywhh", "retrieved_on": 1427425315, "score_hidden": false, "id": "c02bg9n", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bdgq", "body": "&gt; You embed the python interpreter in C, then you can make python calls from c using strings of python code passed to the interpreter.\n\nThat works I guess...I'd still rather peer level, but sure.\n\nYou're right on pyrex though...  Not sure how I read otherwise...\n\nAnd I guess I misread xpcom.  it really looked like it was tied to extensions.  It seems pretty cool, then.", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02bdgq", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 1, "link_id": "t3_5ywhh", "retrieved_on": 1427425351, "body": "\"Except weave seems to allow inline -C- from within python. How can you really reverse that?\"\n\nYou embed the python interpreter in C, then you can make python calls from c using strings of python code passed to the interpreter. Think embedded SQL.\n\n\"Pyrex also appears to be specific to being run under Python\"\n\nFrom what I understand, it makes C code...and need not be under the interpreter.\n\n\"XPCOM (and I could be wrong here, I don't quite get it) seems to only be about implementing mods for mozilla.\"\n\nNo, its more general, just like COM objects on windows OS's. \n\nI don't know what \"as complete peers\" means though. For instance, to use a C++ and a C library together, you have to put a C interface on the C++ library to call into both from C.\n\nOn windows, you can make a COM object from a python program using py2exe:\nhttp://www.py2exe.org/index.cgi/Py2exeAndWin32com\n\nOn unix you'll have to embed the machine. Deal with that. It's really not a big deal. Here is how: http://www.linuxjournal.com/article/3641\n\nIf you'd like to make a library  that is used by other C code, then embed the machine in a C library and have that library called from the other C code. Swig will make it so you can call C code from the python. \n", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02baw0", "id": "c02bdgq", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02baw0", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 1, "link_id": "t3_5ywhh", "retrieved_on": 1427425385, "body": " Sounds pretty excellent. \n\nExcept weave seems to allow inline -C- from within python.  How can you really reverse that?\n\nPyrex also appears to be specific to being run under Python as a parent language.  \n\nXPCOM (and I could be wrong here, I don't quite get it) seems to only be about implementing mods for mozilla.  \n\nYou can embed python into C (I'm told).  You can embed C into python.  I'd really like to see languages usable as complete peers.  ", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02baug", "id": "c02baw0", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425385, "subreddit_id": "t5_2fwo", "created_utc": "1193335856", "ups": 1, "gilded": 0, "link_id": "t3_5ywhh", "downs": 0, "score": 1, "body": "btw, scroll down on the pyrex link to get to the explaination.\n\nAlso you can just embed python into your C program: http://www.python.org/doc/ext/embedding.html", "author": "gte910h", "archived": true, "distinguished": null, "edited": false, "id": "c02baw2", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02baw2", "parent_id": "t1_c02baug", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02baug", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 1, "link_id": "t3_5ywhh", "retrieved_on": 1427425385, "body": "Well you have several choices if you must:\n\nXPCOM (Cross platform com):\nhttp://developer.mozilla.org/en/docs/Creating_a_Python_XPCOM_component\n\nPyrex (converts your python to C):\nhttp://www.suttoncourtenay.org.uk/duncan/accu/integratingpython.html#c-api\n\nAnd you may be able to cobble something together with weave: http://conferences.oreillynet.com/cs/os2002/view/e_sess/2919\n\n", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02b87d", "id": "c02baug", "author_flair_css_class": null}], "subreddit": "programming", "ups": 1, "name": "t1_c02b87d", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywhh", "retrieved_on": 1427425420, "score_hidden": false, "body": "why?  Because someone might want a majority of a program to be built in an ELF-compilable language.  If you can compile a python function into C (or any language that creates object files) you can gain use of it in any other language of the same type.  ", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02b3y5", "id": "c02b87d", "author_flair_css_class": null}], "subreddit": "programming", "ups": 1, "name": "t1_c02b3y5", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywhh", "retrieved_on": 1427425546, "score_hidden": false, "body": "Yes, it does. Why would you try to do the opposite? I'm assuming he'd write the upper level code in python and use C for components if necessary, i.e. use the high level language for the high level stuff, and his known low level language for the low level stuff.\n\nAnd it doesn't really convert it, as much as make an interface wrapper.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02b0le", "id": "c02b3y5", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02b0le", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5ywhh", "retrieved_on": 1427425589, "id": "c02b0le", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02avxi", "body": "That converts a C function to python, not the other way around.", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": 1, "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425385, "score": 1, "body": "Oh yeah, when you need it to go faster, you don't even need to go back to C:\n\nhttp://www-128.ibm.com/developerworks/linux/library/l-psyco.html", "author": "gte910h", "created_utc": "1193336204", "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02baxi", "parent_id": "t1_c02avxi", "score_hidden": false, "id": "c02baxi"}], "subreddit": "programming", "ups": 1, "name": "t1_c02avxi", "controversiality": 0, "archived": true, "link_id": "t3_5ywhh", "retrieved_on": 1427425651, "score_hidden": false, "id": "c02avxi", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02as7i", "body": "Oh yes it is. You use swig: http://www.swig.org/tutorial.html", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 3, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywhh", "retrieved_on": 1427425698, "body": "  Say someone had a C program and wanted to interface with python for a single piece of functionality... is that trivial?  ", "archived": true, "distinguished": null, "edited": true, "name": "t1_c02as7i", "parent_id": "t1_c02aq8p", "id": "c02as7i", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 4, "author": "captainfwiffo", "created_utc": "1193146911", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193153821", "ups": 1, "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425685, "score": 1, "body": "[deleted]", "author": "[deleted]", "author_flair_text": null, "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02at61", "parent_id": "t1_c02as8l", "score_hidden": false, "id": "c02at61"}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 4, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywhh", "retrieved_on": 1427425697, "body": "Also, Pyrex for interfacing with C.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02as8l", "parent_id": "t1_c02aq8p", "id": "c02as8l", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02aq8p", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 17, "link_id": "t3_5ywhh", "retrieved_on": 1427425723, "body": "If you want to give Python a try:\n\n1.  See [py2exe](http://www.py2exe.org/index.cgi/FAQ)  for Windows and [py2app](http://svn.pythonmac.org/py2app/py2app/trunk/doc/index.html) for OS X.\n\n2.  Not sure about this, I don't deploy to Windows.\n\n3.  See [the ctypes package](http://docs.python.org/lib/module-ctypes.html) in the standard library.\n", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02aq6e", "id": "c02aq8p", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 26, "author": "null_vector", "created_utc": "1193117343", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 8, "author": "daydreamdrunk", "created_utc": "1193119729", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02aqqk", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425718, "score": 11, "score_hidden": false, "id": "c02aqqk", "author": "[deleted]", "created_utc": "1193123284", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 11, "parent_id": "t1_c02aqi7", "body": "You can ditch the qualifier *deceptively*.  I had to bite my tongue (pen? keyboard?) yesterday when there was a post about proper (as in not taking stack space) tail calls and Python.\n\nYou get this *for free* with Lua.", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 13, "author": "null_vector", "created_utc": "1193125683", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 6, "author": "dmpk2k", "created_utc": "1193128315", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 7, "author": "null_vector", "created_utc": "1193140581", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 8, "author": "LaurieCheers", "created_utc": "1193142244", "children": [{"controversiality": 0, "retrieved_on": 1427425692, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02asmv", "gilded": 0, "link_id": "t3_5ywhh", "downs": 0, "score": 3, "score_hidden": false, "body": "Yep, Lua started popping up regularly from the Lua 3 release. It was one of those well known 'secrets' of the trade.", "author": "d_ahura", "created_utc": "1193150138", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 3, "parent_id": "t1_c02arsr", "id": "c02asmv", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 8, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywhh", "retrieved_on": 1427425703, "body": "[Grim Fandango](http://en.wikipedia.org/wiki/Grim_Fandango) used Lua as a scripting language, and was released in 1998. The language must have existed at least a year before that.\r\n\r\nAnd yup, now I check the [Lua wikipedia page](http://en.wikipedia.org/wiki/Lua_programming_language), it says it was created in 1993.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02arsr", "parent_id": "t1_c02aro3", "id": "c02arsr", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193159980", "ups": 4, "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425674, "score": 4, "id": "c02au1x", "author": "dmpk2k", "archived": true, "distinguished": null, "edited": true, "body": " &gt; I'ld rather not get off on a tangent.\n\nCome on... _nudge nudge_ How about an imaginary beer?\n\nThe reason I ask is that 2000 was the 3.2/4.0 era, and there have been a number of fairly substantial changes since then. I'd like to know how much of that experience is still relevant, before I go off and do something a bit more involved with Lua. ", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02au1x", "parent_id": "t1_c02aro3", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02aro3", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 7, "link_id": "t3_5ywhh", "retrieved_on": 1427425705, "id": "c02aro3", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02ar1b", "body": " &gt; Which version?\n\nWow.  It must have been about fall of 2000.  You'll forgive me if I cannot remember.  I realize Lua was released before that but you won't find many english references to it much earlier than that.  Unless I'm totally wrong, which is definitely possible.\n\n&gt; Elaborate on that?\n\nI'ld rather not get off on a tangent.\n\nFind any non-trivial application written in Lua and look at the structure and the readability of the code.  I tried to find an example but I had trouble finding a non-trivial open source Lua application. ", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 6, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywhh", "retrieved_on": 1427425713, "body": "&gt; which I believe was about the time it was released.\n\nWhich version?\n\n&gt; Lua just gets extremely ugly when you take it past what it was originally made for.\n\nElaborate on that?", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02ar1b", "parent_id": "t1_c02aqw2", "id": "c02ar1b", "author_flair_css_class": null}], "subreddit": "programming", "ups": 13, "name": "t1_c02aqw2", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywhh", "retrieved_on": 1427425715, "score_hidden": false, "body": "I've used Lua extensively in the past as an extension language for the company game engine.  I started using Lua right about the time it first showed up on Flipcode which I believe was about the time it was released.  It's great for what it was made for.\n\nBut trying to write an entire application in Lua is _not pretty_.  I've done it.  Lua just gets extremely ugly when you take it past what it was originally made for.  \n\nJust an aside, tail recursion by default is not exactly a plus.  Sometimes I'd actually like to see the stack.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02aqi7", "id": "c02aqw2", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 8, "name": "t1_c02aqi7", "controversiality": 0, "archived": true, "link_id": "t3_5ywhh", "retrieved_on": 1427425720, "score_hidden": false, "id": "c02aqi7", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02aqb8", "body": "I have much love for Python, myself. But I'd give Lua more of a chance. It's deceptively elegant.", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 26, "controversiality": 0, "archived": true, "link_id": "t3_5ywhh", "retrieved_on": 1427425722, "id": "c02aqb8", "author_flair_text": null, "distinguished": null, "edited": true, "name": "t1_c02aqb8", "parent_id": "t1_c02aq6e", "body": "  I've looked for something similar myself. Lua basically handles all this but I just don't care much for it.\n\nMy opinion? Python.\n\npy2exe and py2app(never used this) should handle 1. Check it out. The executable itself is small, but you basically have to distribute the entire python runtime plus any extensions you use. For one of my apps, with my own c++ extensions, boost::python libs, wxwidgets and other shared libraries it brings it to about 17 MiB. wxWidgets is huge though and takes up the majority of that.  HelloWorld goes to about 3.5 MiB. 2 MiBs of that is the Python DLL on Windows.\n\nAs for 3, Python is nice for the straight CPython Extension API and Boost::Python with C++.\n\nMy $0.02  ", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425722, "subreddit_id": "t5_2fwo", "created_utc": "1193117621", "ups": 2, "gilded": 0, "link_id": "t3_5ywhh", "downs": 0, "score": 2, "body": "Well, either you want to develop a tiny program only that links lots of external stuff (use C), or you want to develop something complex, at which point the size of a language's runtime is unimportant.\n\nTake a look at C++ (but only ever use a few features, or you go to hell) or Java, as they're quite fast and portable to those platforms you mention (plus Java startup has improved *a lot* lately).  Otherwise you're stuck with languages with runtimes, either embedded interpreters or something like MLton or OCaml (which is probably a good bet).", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "id": "c02aqc9", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02aqc9", "parent_id": "t1_c02aq6e", "score_hidden": false, "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 36, "author": "punchjudy", "created_utc": "1193119052", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c02aqom", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425719, "score": 12, "score_hidden": false, "body": "That sounds awesome actually... I guess I didn't dig deep enough into it. Thanks.", "author": "lorenb", "created_utc": "1193122478", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 12, "parent_id": "t1_c02aqgg", "id": "c02aqom", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "dsandler", "created_utc": "1193147387", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 14, "author": "mlambir", "created_utc": "1193150017", "children": [{"controversiality": 0, "retrieved_on": 1427425687, "subreddit_id": "t5_2fwo", "created_utc": "1193152872", "ups": -4, "gilded": 0, "link_id": "t3_5ywhh", "downs": 0, "score": -4, "body": "Are you actually suggesting that PHP and Javascript are similar? About the only thing they have in common is syntax.", "author": "Zak", "archived": true, "distinguished": null, "edited": false, "id": "c02at16", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02at16", "parent_id": "t1_c02asmf", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02asmf", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 14, "link_id": "t3_5ywhh", "retrieved_on": 1427425692, "id": "c02asmf", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02asaz", "body": "i'm thinking more on the lines of PHP-Javascript", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193158248", "ups": 4, "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425677, "score": 4, "body": "apple", "id": "c02atth", "author": "llimllib", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02atth", "parent_id": "t1_c02asaz", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02asaz", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 2, "link_id": "t3_5ywhh", "retrieved_on": 1427425697, "body": " &gt;Sorry everybody else for being a Haskell fanboy, but hey, this is reddit. Don't like it? Try digg.\n\nreddit __:__ haskell __::__ digg __:__ ?\n\nCan't be perl, Slashdot has that all locked up. Ruby maybe? ", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02aqgg", "id": "c02asaz", "author_flair_css_class": null}], "subreddit": "programming", "ups": 36, "name": "t1_c02aqgg", "controversiality": 0, "archived": true, "link_id": "t3_5ywhh", "retrieved_on": 1427425721, "score_hidden": false, "id": "c02aqgg", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02aq6e", "body": " I'd just like to point out that you might have dismissed haskell too soon, specifically GHC. It satisfies all your criteria. Static linking is all it does, there's never any runtime library to install. Hello world is about 500K on my machine, medium size apps are usually 4-10 megs. The C interface is very well regarded and easy. GHC will even compile your c files for you as part of it's own make process (it uses GCC as a backend.) However, the \"conceptual\" interface between haskell and C can sometimes be awkward. Maybe you dismissed haskell because its not so great for the apps you write, but since every other language you listed is functional, I'm betting you're receptive to the idea.\n\nSo take another look. Sorry everybody else for being a Haskell fanboy, but hey, this is reddit. Don't like it? Try digg. ", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193119857", "ups": 3, "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425720, "score": 3, "id": "c02aqih", "author": "awj", "archived": true, "distinguished": null, "edited": false, "body": "As someone else has mentioned, you might want to look at OCaml. As far as I know it has all of the features you listed and is also pretty speedy.", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02aqih", "parent_id": "t1_c02aq6e", "score_hidden": false, "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 8, "author": "tashbarg", "created_utc": "1193120723", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "fab13n", "created_utc": "1193140904", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193167626", "ups": 2, "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425660, "score": 2, "body": " Well, I don't know Lua really well (it's a long time I used it) but there are several points with tcl I think Lua can't compete.\n\n1. Tcl includes a really powerful library (networking out of the box)\n2. Tcl can do metaprogramming really easy\n3. Tcl is a good choice for DSLs\n\nAnd what do you mean with \"compactness\"?\nLua-runtime is smaller? Sure. Lua can't do much without additional libraries (leaning wide out of the window now). \n\nI wrote useful programs in tcl within minutes, something I can't imagine doing in Lua.\nDon't get me wrong, Lua is great as a scripting language in an application, but it's of no great use outside of your applicatin. It's designed to support an application, not to program them in it. ", "author": "tashbarg", "archived": true, "distinguished": null, "edited": true, "id": "c02av46", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02av46", "parent_id": "t1_c02aros", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 2, "name": "t1_c02aros", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywhh", "retrieved_on": 1427425705, "score_hidden": false, "body": "Except for its proper handling of unicode, and it's symbiosis with Tk, Tcl lags far behind Lua with every respect (expressiveness, compactness, speed, C-friendliness...)", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02aqkb", "id": "c02aros", "author_flair_css_class": null}], "subreddit": "programming", "ups": 8, "name": "t1_c02aqkb", "controversiality": 0, "archived": true, "link_id": "t3_5ywhh", "retrieved_on": 1427425719, "score_hidden": false, "id": "c02aqkb", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02aq6e", "body": "I would suggest a look at tcl. I know, it's old, but it seems a really good fit for your requirements. If you're on OSX it's preinstalled and you can get going immediately.\n\nWith Starpacks you can get a statically linked interpreter with your program and everything you throw at it in one file. It also has really good Unicode support and interfaces extremely well with C. You can include Tk and get a full featured GUI.\n", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 22, "author": "cgibbard", "created_utc": "1193121490", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 15, "author": "goalieca", "created_utc": "1193122970", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 15, "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425718, "score": 15, "body": "Yeah, but based on how his message is worded, I'm assuming he's looking for something which puts some more distance between the conceptual model and the hardware. Python has some neat features, but it's still an imperative language.", "author": "cgibbard", "created_utc": "1193123372", "distinguished": null, "edited": false, "id": "c02aqqs", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02aqqs", "parent_id": "t1_c02aqq0", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02aqq0", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 15, "link_id": "t3_5ywhh", "retrieved_on": 1427425718, "body": " Haskell has more of a learning curve for people than say python. Truth be told it is an entirely different paradigm.  Very effective but slower out the gate.", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02aqm4", "id": "c02aqq0", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 6, "author": "halu", "created_utc": "1193141479", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "cgibbard", "created_utc": "1193154209", "children": [{"controversiality": 0, "retrieved_on": 1427425536, "subreddit_id": "t5_2fwo", "archived": true, "ups": 2, "gilded": 0, "link_id": "t3_5ywhh", "downs": 0, "score": 2, "id": "c02b4nz", "author": "halu", "created_utc": "1193263296", "distinguished": null, "edited": false, "body": "No (in fact, almost all the programming I do tends to be hobby), it has historical reasons, to do with being grown up on assembly and so on. You would be surprised how much you can do in, say, 50 kilobytes, even under Windows. There are people doing generative 3D art in *four kilobytes*, complete with soundtracks, just for the sake of showing that it is possible... \r\n\r\nAnother thing I don't like is that today's desktop systems aren't *much* more responsive than similar systems many years ago, despite the fact that the power of the underlying hardware changed by severel orders of magnitude. And I contribute this phonemenon *in part* to the general bloat in software (\"we have powerful machines, so who cares?\").\r\n\r\nAlso, in the case *I was* writing programs for embedded stuff, I would still prefer using Haskell for it. And I see no theoretical reasons for not being able to do so (there is JHC after all, with a 6.5k \"hello world\", just not mature enough for real use).", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02b4nz", "parent_id": "t1_c02at8a", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02at8a", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 2, "link_id": "t3_5ywhh", "retrieved_on": 1427425685, "id": "c02at8a", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02arqa", "body": "Are you writing programs for embedded architectures? Statically linking in GUI libraries can take some space, yeah, but personally I've never really paid all *that* much attention to the size of executables. I'm curious as to what might cause such a reaction.\n\n(Myself, I probably wouldn't really worry about the size until the executables were at least ~100MiB a piece, but I'm pretty sure nothing like that has ever happened to me.)", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 6, "controversiality": 0, "archived": true, "link_id": "t3_5ywhh", "retrieved_on": 1427425704, "id": "c02arqa", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02arqa", "parent_id": "t1_c02aqm4", "body": "While Haskell is absolutely great, I do not consider the footprint (w/GHC) small at all. Which makes me quite sad by the way. 2MB for a simple program is pretty much the antithesis of \"small footprint\" for me... And when I started learning Haskell, I tried to link with wxWindows, and got a 14MB executable, which was again quite a horrible experience (ok, since then I learned that running `strip` usually halves the executable sizes, but still...)", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 6, "author": "skew", "created_utc": "1193149933", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1193152951", "name": "t1_c02at1j", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425687, "score": 3, "score_hidden": false, "body": "Well, I was actually including the total overhead for an empty program, but of course the size varies a bit by architecture.\n\nIf you want to pass something by reference, I think you have to allocate some memory (using `malloc` or `alloca` or similar) on the Haskell side, then use `poke` to set the value at the pointer and pass that through to the C function. So there's a little boilerplate there. There are tools like c2hs to help avoid some of that.", "author": "cgibbard", "archived": true, "distinguished": null, "edited": true, "author_flair_text": null, "subreddit": "programming", "ups": 3, "parent_id": "t1_c02asm5", "id": "c02at1j", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02asm5", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 6, "link_id": "t3_5ywhh", "retrieved_on": 1427425693, "body": "Is it even that big? The runtime on my system is 340k (libHSrts_thr.a for 6.6 on 32 bit x86). A random small program (a little .h parser) compiles to 460k, stripping to 300k.\n\nThe main that that annoys me is that the FFI has no direct support for passing structures by reference. It's also hard to compile Haskell as a shared library for plugging into some other program, except on macs.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02aqm4", "id": "c02asm5", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 22, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywhh", "retrieved_on": 1427425719, "body": "Haskell satisfies all of those. Binaries are statically linked by default, and the runtime is 1.5-2.8MB. GHC will compile C code directly into your app if you specify .c files on the commandline, or link in object files, and the FFI allows calling between C and Haskell code with a minimum of fuss. (You might need to write a bit of marshalling code if you have some compound data structures you need to access on the Haskell side, or else there are tools to help generate bindings from C headers.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02aqm4", "parent_id": "t1_c02aq6e", "id": "c02aqm4", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 34, "author": "crux_", "created_utc": "1193121647", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 14, "author": "lorenb", "created_utc": "1193122944", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 9, "author": "dmpk2k", "created_utc": "1193125321", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 9, "author": "Fork82", "created_utc": "1193137527", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193171811", "name": "t1_c02avp5", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425653, "score": 2, "score_hidden": false, "id": "c02avp5", "author": "apgwoz", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 2, "parent_id": "t1_c02arhj", "body": "PLT also has the mostly scheme FFI too! You don't even have to write C to interface with C!", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02arhj", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 9, "link_id": "t3_5ywhh", "retrieved_on": 1427425707, "id": "c02arhj", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02aqv5", "body": "I highly recommend PLT Scheme also. A very large number of libraries, as well as a nice implementation.", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425704, "subreddit_id": "t5_2fwo", "archived": true, "ups": 7, "gilded": 0, "link_id": "t3_5ywhh", "downs": 0, "score": 7, "id": "c02arq7", "author": "lothair", "created_utc": "1193141452", "distinguished": null, "edited": false, "body": "And stalin! Though that's pretty painful to use.", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02arq7", "parent_id": "t1_c02aqv5", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02aqv5", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 9, "link_id": "t3_5ywhh", "retrieved_on": 1427425715, "body": "There's also Bigloo and Gambit-C if you decide to go the Scheme route.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02aqpy", "id": "c02aqv5", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193147510", "name": "t1_c02asbc", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425696, "score": 10, "score_hidden": false, "body": " Heh, I was trying to resist the immediate urge to proselytise my current language of choice (Chicken) - but I had to admit it seems to fit your wishlist pretty well, so I'm glad someone else mentioned it.\n\nJust a quick tip - there are a lot of extremely useful [eggs](http://www.call-with-current-continuation.org/eggs/) for Chicken, but I think you may find the way it can use C/C++ code (eg. via the  [easyffi](http://chicken.wiki.br/easyffi) egg) particularly interesting.\n\nAnd as dmpk2k says, don't completely discount either Bigloo or Gambit-C either - both (very roughly speaking) work in the same way as Chicken, compiling via C. I like Chicken better than either, but if Chicken wasn't around then I'd certainly use one of them (probably Gambit-C, as I think Marc Feeley [dislikes R6RS](http://article.gmane.org/gmane.lisp.scheme.gambit/1577) as much or more than [Felix does](http://groups.google.com/group/comp.lang.scheme/msg/b74977eea9b01460) :)). ", "author": "depleater", "archived": true, "distinguished": null, "edited": true, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 10, "parent_id": "t1_c02aqpy", "id": "c02asbc", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02aqpy", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 14, "link_id": "t3_5ywhh", "retrieved_on": 1427425718, "body": "hot damn, chicken scheme looks pretty sweet.  Thanks for the link.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02aqml", "id": "c02aqpy", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02aqml", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 34, "link_id": "t3_5ywhh", "retrieved_on": 1427425719, "id": "c02aqml", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02aq6e", "body": "Have you looked at [chicken scheme](http://www.call-with-current-continuation.org/)? It's a full-featured scheme that compiles to C.\n\nI'm partial to O'Caml myself, but interfacing with C requires a decent amount of glue that I haven't really learned well yet.\n\nI've also started using Scala, which runs on the JVM. (Can also run on CLR/Mono, I think.) I imagine that it's possible to monkey together a workflow that generates smallish static executables via GCJ; binding to C is via the normal java way.\n\nIn any case, these languages offer some nice \"change the way you think\" advantages as well as the \"type less and segfault less\" ones that come with any of the higher-level languages people are suggesting.", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -4, "author": "martinbishop", "created_utc": "1193121894", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 11, "author": "lorenb", "created_utc": "1193122548", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193156945", "ups": 2, "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425679, "score": 2, "body": "Perhaps THAT should have been your one requirement :)", "author": "martinbishop", "author_flair_text": null, "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02atmk", "parent_id": "t1_c02aqoz", "score_hidden": false, "id": "c02atmk"}], "subreddit": "programming", "name": "t1_c02aqoz", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 11, "link_id": "t3_5ywhh", "retrieved_on": 1427425718, "body": "C is portable.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02aqn4", "id": "c02aqoz", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": -1, "author": "username223", "created_utc": "1193122693", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c02ardy", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425708, "score": -8, "score_hidden": false, "id": "c02ardy", "author": "[deleted]", "created_utc": "1193135761", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": -8, "parent_id": "t1_c02aqpf", "body": "How stupid do you have to be to not understand what reddit meant when they asked you to pick a username?", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193148502", "ups": 1, "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425695, "score": 1, "id": "c02asfv", "author": "b0dhi", "archived": true, "distinguished": null, "edited": false, "body": "I still don't think he does :p", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02asfv", "parent_id": "t1_c02aqpf", "score_hidden": false, "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "martinbishop", "created_utc": "1193156921", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193172810", "ups": 1, "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425653, "score": 1, "body": "[deleted]", "id": "c02avu4", "author": "[deleted]", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02avu4", "parent_id": "t1_c02atmj", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "author_flair_text": null, "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425007, "score": 1, "created_utc": "1193724758", "score_hidden": false, "id": "c02c41e", "author": "username223", "archived": true, "distinguished": null, "edited": false, "body": "kick burning stupid in my face, why don't you...", "subreddit": "programming", "ups": 1, "parent_id": "t1_c02atmj", "name": "t1_c02c41e", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 3, "controversiality": 0, "archived": true, "link_id": "t3_5ywhh", "retrieved_on": 1427425679, "id": "c02atmj", "author_flair_text": null, "distinguished": null, "edited": true, "name": "t1_c02atmj", "parent_id": "t1_c02aqpf", "body": "Perhaps you missed the point.  None of his \"requirements\" seem to require C at all. Any turing complete language would fit in his original paragraph.  He's looking for high level languages for all the wrong reasons.  He should be looking at high level languages for speed of development and advanced abstraction capabilities.\n\nJudging by my original comments score, I'm guessing I didn't make my point too well, however.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": -1, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywhh", "retrieved_on": 1427425718, "body": "Precisely how stupid do you have to be to make this comment?  Assume for a moment that the OP wants to interface to some existing library.  What are the odds that it has an assembly- or binary-only interface, as opposed to a C one?  Now do you understand how clueless your comment is?", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02aqpf", "parent_id": "t1_c02aqn4", "id": "c02aqpf", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02aqn4", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": -4, "link_id": "t3_5ywhh", "retrieved_on": 1427425719, "body": "Funny, you could replace C with Assembly in your post and it would have the same meaning, or C with binary, for that matter...", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02aq6e", "id": "c02aqn4", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 6, "author": "boredzo", "created_utc": "1193122349", "children": [{"controversiality": 0, "retrieved_on": 1427425718, "subreddit_id": "t5_2fwo", "created_utc": "1193122851", "name": "t1_c02aqpr", "gilded": 0, "link_id": "t3_5ywhh", "downs": 0, "score": 3, "score_hidden": false, "body": "I already use Obj-C pretty extensively (with mingw on the windows side).  I was curious about the more exotic languages that I've been hearing about, but thanks for the suggestions.  I'm going to be looking more into python...", "author": "lorenb", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 3, "parent_id": "t1_c02aqod", "id": "c02aqpr", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02aqod", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 6, "link_id": "t3_5ywhh", "retrieved_on": 1427425719, "body": "On the Mac only, I suggest Cocoa/Obj-C or Cocoa/Python (PyObjC). Obj-C sits directly on top of C\u2014all the C bits are unchanged, so everything you know still works just the same as it always has. Python's easier to write in, but I don't know how well it integrates with Cocoa, having never done it.\n\nThe downside to Cocoa in any language is that then you can't ship it on Windows as well, unless you feel like maintaining two sets of chrome. Also, for Python, I have no idea about the small footprint. I think Python apps can be a bit big.", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02aq6e", "id": "c02aqod", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c02aqr2", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425718, "score": 10, "score_hidden": false, "body": "The priorities you list are some of the essential design goals behind Lua.\n\nAnother is simplicity (both of the language and of implementation).\n\nLua is among the fastest of its kind, usually less than an order of magnitude slower than C.", "author": "schwarzwald", "created_utc": "1193123511", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 10, "parent_id": "t1_c02aq6e", "id": "c02aqr2", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 4, "author": "JohnMichael", "created_utc": "1193125866", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "archived": true, "ups": 3, "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425702, "score": 3, "body": "Or (although I haven't used it) [ECL](http://ecls.sourceforge.net/).", "author": "rkts", "created_utc": "1193143279", "distinguished": null, "edited": false, "id": "c02arvs", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02arvs", "parent_id": "t1_c02aqwe", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425701, "subreddit_id": "t5_2fwo", "created_utc": "1193144181", "ups": 3, "gilded": 0, "link_id": "t3_5ywhh", "downs": 0, "score": 3, "body": "I love Corman Lisp! I interfaced a Corman Lisp program with OpenGL recently, so I can vouch for the usability of the C interface. Also, Lisp is  the classic wierd new language.", "author": "pTymN", "archived": true, "distinguished": null, "edited": false, "id": "c02aryc", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02aryc", "parent_id": "t1_c02aqwe", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02aqwe", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 4, "link_id": "t3_5ywhh", "retrieved_on": 1427425715, "id": "c02aqwe", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02aq6e", "body": "[Corman Lisp](http://www.cormanlisp.com/) satisfies those requirements, if Common Lisp is a language you'd be interested in.  I'm not sure how small executables the more established commercial CL implementations deliver, but they  too fit at least the other requirements.\n", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 27, "author": "WalterBright", "created_utc": "1193126488", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 6, "author": "FeepingCreature", "created_utc": "1193133027", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 5, "author": "kokey", "created_utc": "1193135817", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "dvogel", "created_utc": "1193145532", "children": [{"controversiality": 0, "retrieved_on": 1427425681, "subreddit_id": "t5_2fwo", "created_utc": "1193155957", "ups": 3, "gilded": 0, "link_id": "t3_5ywhh", "downs": 0, "score": 3, "id": "c02athv", "author": "FeepingCreature", "archived": true, "distinguished": null, "edited": false, "body": "No, it's not haskell :)\n\nIt does have high-order functions via delegates (dynamic closures), though that's tricky as you can't return delegate literals unchanged (because the stack frame pointer won't be valid anymore).\n\nAlthough, there's ways to work around that by copying the stack.", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02athv", "parent_id": "t1_c02as2n", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 3, "controversiality": 0, "archived": true, "link_id": "t3_5ywhh", "retrieved_on": 1427425700, "id": "c02as2n", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02as2n", "parent_id": "t1_c02are5", "body": "It doesn't give you the high-level constructs though, does it? e.g. list comprehensions, high-order functions, and implicit parallelism. ", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425695, "subreddit_id": "t5_2fwo", "created_utc": "1193148387", "ups": 4, "gilded": 0, "link_id": "t3_5ywhh", "downs": 0, "score": 4, "id": "c02asfc", "author": "MarshallBanana", "archived": true, "distinguished": null, "edited": false, "body": "&gt; but the syntax gives you all the useful goodies from new languages.\n\nNo, it doesn't, and that's where it fails. It has some newer features, but overall, it's just more C.", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02asfc", "parent_id": "t1_c02are5", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 5, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywhh", "retrieved_on": 1427425708, "body": "D looks great, in theory it should compile down to what you'd expect from C, but the syntax gives you all the useful goodies from new languages.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02are5", "parent_id": "t1_c02ar8v", "id": "c02are5", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 6, "name": "t1_c02ar8v", "controversiality": 0, "archived": true, "link_id": "t3_5ywhh", "retrieved_on": 1427425710, "score_hidden": false, "id": "c02ar8v", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02aqxi", "body": "Agreed - small footprint (starts at about 100k-150k with static linkage), C-like, links to C libraries, pretty fast too.\nThen again, that's a fanboy speaking :3", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 16, "author": "MarshallBanana", "created_utc": "1193148307", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "FeepingCreature", "created_utc": "1193155999", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "MarshallBanana", "created_utc": "1193159435", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "FeepingCreature", "created_utc": "1193160664", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 4, "author": "dmpk2k", "created_utc": "1193162406", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "FeepingCreature", "created_utc": "1193165762", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "dmpk2k", "created_utc": "1193170986", "children": [{"controversiality": 0, "retrieved_on": 1427425643, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02awg2", "gilded": 0, "link_id": "t3_5ywhh", "downs": 0, "score": 1, "score_hidden": false, "body": "I see. I hadn't thought of it like that.\nThanks for your explanation :)\n\n--feep", "author": "FeepingCreature", "created_utc": "1193179137", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c02avl8", "id": "c02awg2", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 1, "controversiality": 0, "archived": true, "link_id": "t3_5ywhh", "retrieved_on": 1427425654, "id": "c02avl8", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02avl8", "parent_id": "t1_c02auu8", "body": "&gt; What's wrong with D's template metaprogging? I've always seen that as one of the strong points of D.\n\nPersonal preference. There's little doubt that D's template metaprogramming knocks C++'s silly, but I don't like template metaprogramming _in the first place_. You no doubt have different priorities. If it works for you, right on.\n\nI don't like template metaprogramming because it lives in its own little world; the language has effectively been chopped in two. There's the half that the plebeians use at runtime, and the half where the arcane library authors live during compile-time. The two languages and worlds share some things in common but generally have little to do with each other.\n\nTake a look at Forth, with its compile and immediate modes which you can switch from anywhere, arbitrarily and whenever. If you want you can rewrite large chunks of the compiler whenever you please, which is fantastically powerful, yet it'll blend in smoothly with the rest of the language. Then there are functional languages where, not really having mutable state, the question of compile-time/run-time is mostly irrelevant.\n\nBut as I said, if it works for you, right on. It's just a tool.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02auu8", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5ywhh", "retrieved_on": 1427425664, "id": "c02auu8", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02audg", "body": "re: closures, see my answer above.\n\nWhat's wrong with D's template metaprogging? I've always seen that as one of the strong points of D. :honestly confused:\n\nAgreed on the type inference; though it's way better than C++'s, it still has a ways to go.\n\nD certainly includes low-level features, I just disagree with your sentiment that this implies that it can't have high-level constructs as well. Sorry if I misunderstood.\n --feep", "author_flair_css_class": null}], "subreddit": "programming", "ups": 4, "name": "t1_c02audg", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywhh", "retrieved_on": 1427425670, "score_hidden": false, "body": "Copying the stack to emulate closures (which it won't) isn't high-level, nor is using assembly to create and use new stacks for coroutines.\n\nAnd then there's that template metaprogramming. Type inference leaves a lot to be desired as well.\n\nD is a low-level language, which is fine in its own way. I've taken a bit of a shine to naked asm blocks, for example.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02au4t", "id": "c02audg", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 6, "author": "MarshallBanana", "created_utc": "1193164722", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02auu9", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425664, "score": 1, "score_hidden": false, "id": "c02auu9", "author": "FeepingCreature", "created_utc": "1193165765", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c02aunw", "body": "Fair.\n\nThis gets into the whole \"Should libraries (standard libraries?) be part of the language comparison\" discussion.\n\nPersonally, I'd rather coroutines be part of the language as well. Failing that, I'll settle for a syntax that's still significantly nicer than anything C++ has to offer, without the speed hit many real dynamic languages take.\n -feep", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02aunw", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 6, "link_id": "t3_5ywhh", "retrieved_on": 1427425666, "id": "c02aunw", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02au4t", "body": "Exactly like in C, in other words. Which was my whole point. It's nice if these things are *part of the language*, and not emulated or implemented.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 0, "name": "t1_c02au4t", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywhh", "retrieved_on": 1427425673, "score_hidden": false, "body": "Closures can be emulated by copying the stack (as I said before).\nCoroutines can be written in the language, thanks to the inline assembler. I've done so before.\nCan I have the rest of the list, please?\n --feep", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02atze", "id": "c02au4t", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 3, "name": "t1_c02atze", "controversiality": 0, "archived": true, "link_id": "t3_5ywhh", "retrieved_on": 1427425675, "score_hidden": false, "id": "c02atze", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02ati4", "body": "Real closures, coroutines, lots of dynamic language functionality, it's a long list.", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 1, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywhh", "retrieved_on": 1427425681, "body": "Interesting. What high-level features, specifically, are you missing? Just curious.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02ati4", "parent_id": "t1_c02asey", "id": "c02ati4", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c02atzm", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425675, "score": 5, "body": "I'd argue it's C++ ++. \n\nD doesn't have much to do with C, but the language and community are heavily influenced by C++. For better or worse (I'd argue worse) it shows.", "id": "c02atzm", "author": "dmpk2k", "created_utc": "1193159464", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 5, "parent_id": "t1_c02asey", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02asey", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 16, "link_id": "t3_5ywhh", "retrieved_on": 1427425695, "body": "D is just C+=2, really. It's more C where no more is needed.\n\nIn this day and age, you either write in C, or you write in something significantly more high-level, and that isn't what D is.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02aqxi", "id": "c02asey", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425688, "subreddit_id": "t5_2fwo", "archived": true, "ups": 2, "gilded": 0, "link_id": "t3_5ywhh", "downs": 0, "score": 2, "id": "c02asyc", "author": "eegreg", "created_utc": "1193152324", "distinguished": null, "edited": false, "body": "If you are too timid to use the real deal, then D is an easy replacement for C with no downside.  It will let you work at a higher level than C (but not as high as other languages mentioned).", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02asyc", "parent_id": "t1_c02aqxi", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02axcl", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425631, "score": 1, "score_hidden": false, "body": "[deleted]", "author": "[deleted]", "created_utc": "1193187873", "distinguished": null, "edited": true, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c02aqxi", "id": "c02axcl", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02aqxi", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 27, "link_id": "t3_5ywhh", "retrieved_on": 1427425714, "id": "c02aqxi", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02aq6e", "body": "Looks like the D programming language http://www.digitalmars.com/d/ meets your requirements.", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193126867", "name": "t1_c02aqya", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425714, "score": 5, "score_hidden": false, "body": "The [Io programming language](http://iolanguage.com/about/) is a nice dynamic language that is small and interfaces well with C.  \n\nI'm not sure there is a super easy way to create a standalone binary, but I know that the VM is created by eval'ing much of the core Io code from a C string.  You could probably do something similar if there isn't already a tool to do this.", "author": "uedauhes", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 5, "parent_id": "t1_c02aq6e", "id": "c02aqya", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c02ar1f", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425713, "score": 6, "score_hidden": false, "id": "c02ar1f", "author": "icefox", "created_utc": "1193128367", "distinguished": null, "edited": true, "archived": true, "subreddit_id": "t5_2fwo", "ups": 6, "parent_id": "t1_c02aq6e", "body": "  Just curious what is so magical about 2MB?  Lets say I give you something that adds 5MB, but you can develop your application in three months rather then five.  Do those 3MB really matter then?  The average user is used to downloading *hundreds* of MB of patches from Microsoft not to mention the many ways they get their music.  Your question of size is completely wrong in my opinion.  Your first and foremost question should be how well the language lets you develop applications.  Once you figure that out then if it is also small in size that is a bonus.", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193136974", "ups": 3, "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425708, "score": 3, "id": "c02argd", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "body": "Python is nice, and you can search for some tools that help compile code to executables.\r\n\r\nI think you can do the same with Perl, but (for other reasons) I'm sure you'll love Perl if you come from a C background.\r\n\r\nCommon Lisp is awesome, and is backed with SBCL (derived form CMUCL), which is a damn good implementation. By the way, take a look at this [lisp tutorial](http://www.gigamonkeys.com/book/).\r\n\r\nI think Scheme is more of an academic language than anything else: I love it, but wouldn't want to use it for something practical. ", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02argd", "parent_id": "t1_c02aq6e", "score_hidden": false, "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 11, "author": "madman1969", "created_utc": "1193139687", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "LaurieCheers", "created_utc": "1193142618", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 10, "author": "novagenesis", "created_utc": "1193146703", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 4, "author": "deong", "created_utc": "1193148971", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 6, "author": "novagenesis", "created_utc": "1193149879", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "LaurieCheers", "created_utc": "1193155894", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193161405", "name": "t1_c02au81", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425672, "score": -1, "score_hidden": false, "id": "c02au81", "author": "novagenesis", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": -1, "parent_id": "t1_c02athi", "body": "So it's not really a feature of the language as much as a feature of the precompile.  It sounds nice, but also entirely unrelated to the overall features of the language.\n\nAll you have to do is a one-run precompile (easy perl one-liner) that converts ConstFactorial(n) to the answer...\n\nEven in more complex cases, it seems the only great thing is compile-time integration of more complex macro features...\n\nWith C, worst case scenario, you could have a program build ConstFactorial into a .h for you... You'd probably have to call it more like:\n\nConstFactorial_5, but it doesn't change the underlying language..just a really nice precompiler.  I'd love to see that kind of feature in precompilation in lots of languages.  I don't think it forgives C++'s ease of abuse, nor does it invalidate my original claim that a lot of other languages achieve C++'s features in a less dangerous fashion.\n\n", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 2, "controversiality": 0, "archived": true, "link_id": "t3_5ywhh", "retrieved_on": 1427425681, "id": "c02athi", "author_flair_text": null, "distinguished": null, "edited": true, "name": "t1_c02athi", "parent_id": "t1_c02aslv", "body": "The example is recursively computing a factorial at compile-time. I don't know about Fortran, but I'm pretty sure C can't support this. (Macros can't have loops or recursion.)\r\n\r\nC++0x will allow a much nicer syntax for this, too -\r\n\r\n    constexpr int ConstFactorial(int f)\r\n    {\r\n        if ( f == 0 )\r\n            return 1;\r\n        else\r\n            return f*ConstFactorial(f-1);\r\n    }\r\n\r\n    int main()\r\n    {\r\n        cout &lt;&lt; ConstFactorial(5) &lt;&lt; endl;\r\n        return 0;\r\n    }\r\n\r\n\r\nOf course, you could get the same end-result by calculating the factorial by hand and putting the result into a C or Fortran program as a constant... but that rather misses the point.   ", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02aslv", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 6, "link_id": "t3_5ywhh", "retrieved_on": 1427425693, "id": "c02aslv", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02ashp", "body": "It comes down to whether you want to produce ugly code to improve speed.  Higher level languages are supposed to sacrifice speed for ease of coding and reduction of bugs.\n\nI am curious.  Is that level of speed impossible in C and Fortran?  If so, *why*?  \n\nIf not, why does the fact that C++ can do something C can do an argument forgiving C++ \"warts\" as they compare to higher level languages and their slower elegance?", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1193156524", "name": "t1_c02atku", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425680, "score": 3, "score_hidden": false, "id": "c02atku", "author": "lbruno", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 3, "parent_id": "t1_c02ashp", "body": "Interesting, many thanks; not an useless example after all.\n\n.oO(although I don't have a big need for Factorial, I like the technique).", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02ashp", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 4, "link_id": "t3_5ywhh", "retrieved_on": 1427425695, "body": "&gt; Some languages can achieve the same functionality levels as C++ without being abused.\n\n    #include &lt;iostream&gt;\n    using namespace std;\n\n    template &lt;int N&gt;\n    struct Factorial \n    {\n        enum { value = N * Factorial&lt;N - 1&gt;::value };\n    };\n\n    template &lt;&gt;\n    struct Factorial&lt;0&gt; \n    {\n        enum { value = 1 };\n    };\n\n    int main()\n    {\n        cout &lt;&lt; Factorial&lt;5&gt;::value &lt;&lt; endl;\n        return 0;\n    }\n\nOf course, this is a useless example, but it's the same technique used by libraries such as Blitz++ to provide extremely fast (faster than Fortran) implementations of certain array and matrix operations that are extremely important in a wide range of applications.\n\nThe guys behind C++ aren't stupid, and the language isn't complex because they were somehow too incompetent to see how to solve their problems in a better way.  Most of the real ugliness of C++ is a consequence of a conscious decision to allow potentially useful things like this.  Whether you feel the ends justify the means is a matter of opinion, but I wouldn't go around saying that other languages can do the same things as C++ without all the warts.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02as7w", "id": "c02ashp", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 6, "author": "Aidenn0", "created_utc": "1193158131", "children": [{"controversiality": 0, "retrieved_on": 1427425670, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02auc5", "gilded": 0, "link_id": "t3_5ywhh", "downs": 0, "score": 3, "score_hidden": false, "body": "&gt; There is nothing in C++ that can't be abused any more than (for example) Lisp macros.\n\nPerhaps.  I find it easier to abuse C++ code than Lisp Macros...\n\nYou have to be willful to do something horribly evil in Lisp.  In C++ it might just happen, and you shrug and toss a black box over it.\n\nAnd ECL has always interested me..I've also always been lazy ;)", "author": "novagenesis", "created_utc": "1193162106", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 3, "parent_id": "t1_c02atsz", "id": "c02auc5", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02atsz", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 6, "link_id": "t3_5ywhh", "retrieved_on": 1427425677, "body": "C++ is actually a reasonable language for bottom-up development.  The problem is that people treat it like C with objects.  If you want a language that is C with objects, use Java.\n\nThere is nothing in C++ that can't be abused any more than (for example) Lisp macros.\n\nImagine if you gave all the (formerly C++ now java) least-common-denominator code-monkeys out there some subset of the meta-programming tools that are available in Common Lisp.  They would abuse it and make code that doesn't work and is uninteligible.   My proof of this is what happened with C++.  Templates are a creative way to add powerful meta-programing while keeping the code C-like. \n\nYou may argue that ading meta-programming to a C-like language is a bad idea, but C++ has done a reasonable job of it.\n\nBoost has some neat stuff in it that showcases what you can do.  I kind of feel like they are turning Greenspun's Tenth rule on its head by creating a standard, formally specified, stable, fast implementation of Common Lisp (and then some).\n\nThe problem with C++ isn't any of its language features, the problem is that it is deceptively familiar to someone used to C which is little more than structured assembly.  (I also think C++ is a bit ugly, but I usually end my lines with a half-dozen parans, so that may just be personal preference))))))\n\nSo in summary: don't hate the game, hate the playa\n\nOh, and to say something on the main topic, take a look at [ECL](http://http://ecls.sourceforge.net/) I normally use [CLISP](http://clisp.cons.org) as I don't have the requirement of generating stand-alone executables, but ECL was nice and improving at a good clip the last time I checked it out.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02as7w", "id": "c02atsz", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02as7w", "ups": 10, "controversiality": 0, "archived": true, "link_id": "t3_5ywhh", "retrieved_on": 1427425698, "score_hidden": false, "id": "c02as7w", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02artt", "body": "Linus Torvald doesn't like it...oh, and it's popular ;)\n\nThough, honestly... C++ is easily abused.  Some languages can achieve the same functionality levels as C++ without being abused.  I've honestly never tried Objective C so I can't give my 2c on that.", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425624, "subreddit_id": "t5_2fwo", "created_utc": "1193188827", "name": "t1_c02axxe", "gilded": 0, "link_id": "t3_5ywhh", "downs": 0, "score": 6, "score_hidden": false, "id": "c02axxe", "author": "madman1969", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 6, "parent_id": "t1_c02artt", "body": "I think it's down to personal experiences. I started using C++ in '93 for OS/2 &amp; HP/UX cross-platform development and around '95 I moved on to developing Windows applications with MFC. During that period C++ was the only OO language that most developers had come across &amp; most of them produced reams of awful C-like code based on an incomplete understanding of OO concepts. Also during that period C++ was still very much a 'work in progress', with most of the features and standard libraries we take for granted not yet in place, i.e. Boost, STL, etc. We will not discuss the abomination that is MFC.\nC++ suffers from being a member of the first generation of mainstream OO languages with a mixture of manual memory management, pointers, classes/templates/interfaces and multiple inheritance. It's noticeable that Java and C# both avoid manual memory management, pointers and multiple inheritance.\nNowadays, people initially learn an OO-compliant language, i.e. Python, Java or C#, rather than a procedural one, i.e. Pascal or C, and it's noticeable in the better grasp they have of OO concepts &amp; hence the quality of code they produce. I think that the need for C++ is diminishing over time, most embedded device development and Linux kernel development is still in C and enterprise-level applications are increasingly being developed in a concoction of Java/PHP/Ruby/Perl/C#, a trend I can only see increasing overtime. Over the next 5 years C and C++ are going to drop into same category as ADA, SmallTalk and other niche-specific languages.\nBack to today and if I need to do some 'heavy lifting' I drop down to C rather than C++, for anything else Java, C# or Python are more than up to the job. ", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02artt", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 3, "link_id": "t3_5ywhh", "retrieved_on": 1427425703, "id": "c02artt", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02arlr", "body": "&gt; At all costs avoid the temptation to use\r\n&gt; C++, ironically its probably the worst\r\n&gt; path to take when moving from C development\r\n\r\nThat's an interesting thing to say... it's an extremely popular path. What would you say is so bad about it?  ", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425695, "subreddit_id": "t5_2fwo", "created_utc": "1193148605", "ups": 7, "gilded": 0, "link_id": "t3_5ywhh", "downs": 0, "score": 7, "body": "As much as I love Objective-C, I wouldn't recommend it for cross-platform development. It's not compiler support that's the problem, it's class library support. On Windows you're pretty much stuck with GNUstep, which in my experience is byzantine, ugly and buggy.", "author": "MarshallBanana", "archived": true, "distinguished": null, "edited": false, "id": "c02asg9", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02asg9", "parent_id": "t1_c02arlr", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02arlr", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 11, "link_id": "t3_5ywhh", "retrieved_on": 1427425706, "id": "c02arlr", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02aq6e", "body": "I've been a C developer since 1986 &amp; I've faced the same problem, except back in the early '90s.\nI'm afraid its case of trading off compromises. If you want to avoid the massive library/large footprint issue, then that immediately discounts .Net (or Mono), Java, Ruby, Python. \nYou haven't mentioned if your applications have a GUI, so I'll assume otherwise. \nYour best choice given the two platforms is Objective C, it's the native development language for the Mac &amp; it's supported via GCC on the Windows platform. This choice would also simplify the process of interfacing with existing C code.\nIf you want a left-field solution, you should have a look at the D programming language, http://www.digitalmars.com/d/, you might find it a better fit than Objective C.\nAt all costs avoid the temptation to use C++,  ironically its probably the worst path to take when moving from C development.", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425702, "subreddit_id": "t5_2fwo", "created_utc": "1193143677", "name": "t1_c02arwl", "gilded": 0, "link_id": "t3_5ywhh", "downs": 0, "score": 4, "score_hidden": false, "body": " Squeak Smalltalk satisfies #1 out of the box.  #2 can be achieved using one of the advanced stripping packages.  (The image can be &lt; 150k)  #3, I have no experience with, but I know it can be done.  (The Croquet project interfaces Squeak with OpenGL.)   \n\nI do most of my work in VisualWorks Smalltalk nowadays, and the C interface is pretty dandy.  You aim a tool at the header files and a dynamically loaded library, and the header is compiled and the glue code is written by the program.  ", "author": "stcredzero", "archived": true, "distinguished": null, "edited": true, "author_flair_text": null, "subreddit": "programming", "ups": 4, "parent_id": "t1_c02aq6e", "id": "c02arwl", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 5, "author": "fromagewiz", "created_utc": "1193143827", "children": [{"controversiality": 0, "retrieved_on": 1427425649, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02avyi", "gilded": 0, "link_id": "t3_5ywhh", "downs": 0, "score": 3, "score_hidden": false, "body": "Tcl basically was made for embedding, quite similar to Lua. Its nearly trivial to embed a basic Tcl interpreter (it gets a bit more tricky if you use the event loop). There are some complete Tcl environments as dlls (e.g. the Tcl/Tk firefox plugin).\nA bonus in contrast to for example Python is the mature threading api and the smaller footprint (about 1 Meg for Tcl, with smaller versions existing), and lots of other nice features.\nPython works as an embeddable language, we use it for a commercial project, but has a lot of small warts and uglieness in its C-API and on the portability front, especially when your trying to do multiple threads.\nTcl sure is not perfect though and has its warts, and has not all those nice whizzbang features you might find in OCaml or Haskell. A big bonus for sure is portability. \n\nLinking C code with OCaml basically sucks, tried it, it works but your basically forced to bend your mind around it, not too nice. \n\nFor totally weirdo stuff, try tcltcc to compile C code on the fly as in memory ..\n(see http://wiki.tcl.tk/20123 for example )\n\n", "author": "schlenk", "created_utc": "1193173722", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 3, "parent_id": "t1_c02arx9", "id": "c02avyi", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02arx9", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 5, "link_id": "t3_5ywhh", "retrieved_on": 1427425702, "body": " Tcl very much fits that bill; there are several flavors of standalones, and it plays nicely with C.  Bonus, there's a fairly responsive comp.lang.tcl (and http://wiki.tcl.tk/) community out there, too. ", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02aq6e", "id": "c02arx9", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1193143973", "name": "t1_c02arxu", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425701, "score": 5, "score_hidden": false, "id": "c02arxu", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 5, "parent_id": "t1_c02aq6e", "body": "If you want to try functional programming, you may want to look into Haskell, Scheme, or OCaml. All can be compiled to static binaries. Of the three, Haskell probably has the largest runtime, but it still fits within your criteria. I have not tried interfacing to C with Scheme or OCaml (though it is possible), but I have in Haskell, using its very nice foreign function interface.\n\nFor a nice imperative scripting language, you might want to look into Lua or Io. If you try Io, I should warn you that it is still relatively new and under heavy active development.", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": -1, "author": "rebel", "created_utc": "1193144288", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "archived": true, "ups": 1, "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425697, "score": 1, "id": "c02as95", "author": "[deleted]", "created_utc": "1193146988", "distinguished": null, "edited": false, "body": "[deleted]", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02as95", "parent_id": "t1_c02aryq", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02asah", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425697, "score": 2, "score_hidden": false, "id": "c02asah", "author": "novagenesis", "created_utc": "1193147268", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 2, "parent_id": "t1_c02aryq", "body": "&gt; It's also going to be no more than 10 to 20 percent slower than your c code for most things, esp string processing.\n\nThe fastest compiled languages boast being HALF as fast as C, and you claim Perl (which I use on a daily basis and runs mostly interpreted) comes within 20%?\n\nThe computer language shootout comparing average time of all benchmarks:\n\ngcc: 1.22 (mean)\nperl: 24.99 (mean)\n\n\nA compiled regular expression in Perl is still likely on the order of 10x slower (or more) than char-by-char array-function-referenced parsing in C.\n\nOf course, a regular expression can be written in 5 seconds, where the parsing in C might take an hour to write.\n\nThe one thing on C's side is that a perl regular expression tends to be faster than a C regular expression.\n\nPerl: 2.37\nC: 6.46\n\nOf course, C uses \"pcre.h\", which is just not as fast as direct perl compiled regular expressions... for one because you can't *compile* them to native code (correct me if I'm wrong) at runtime.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02aryq", "score_hidden": false, "controversiality": 0, "archived": true, "ups": -1, "link_id": "t3_5ywhh", "retrieved_on": 1427425701, "id": "c02aryq", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02aq6e", "body": "Perl can be embedded and is available for nearly every platform.  If you only embed the interpreter, it's small enough for todays applications, much smaller than most of the others.  It's also going to be no more than 10 to 20 percent slower than your c code for most things, esp string processing.\n\nThat or a forth if you really want something small.", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02as1e", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425700, "score": 0, "score_hidden": false, "body": "   Looking for something similar myself, I've become quite intrigued by [Clean](http://clean.cs.ru.nl/).\r\n\r\nNote that I've never actually tried it out,  but FWIW it seems to be a permanent top entry in the [computer language shootout](http://shootout.alioth.debian.org/).  Is probably worth a look.\r\n\r\n\r\n   ", "author": "csl", "created_utc": "1193145147", "distinguished": null, "edited": true, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 0, "parent_id": "t1_c02aq6e", "id": "c02as1e", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 5, "author": "logistix", "created_utc": "1193145692", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193164203", "name": "t1_c02aull", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425667, "score": 1, "score_hidden": false, "body": "None, really.  I love C.  And even if I had a fling with some other language, I seriously doubt I'd stop using C.  I'm just curious to try all the other stuff out there.", "author": "lorenb", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c02as39", "id": "c02aull", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02as39", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 5, "link_id": "t3_5ywhh", "retrieved_on": 1427425699, "id": "c02as39", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02aq6e", "body": "What are your C pain points? To paraphrase Stroustrup's comment on smalltalk: C is the best C.", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -7, "author": "bluGill", "created_utc": "1193145995", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02asgz", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425695, "score": 1, "score_hidden": false, "body": "Thanks for ruining computers forever, dude.", "author": "MarshallBanana", "created_utc": "1193148836", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c02as4v", "id": "c02asgz", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "novagenesis", "created_utc": "1193152237", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "bluGill", "created_utc": "1193159057", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "novagenesis", "created_utc": "1193162504", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "bluGill", "created_utc": "1193163366", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "novagenesis", "created_utc": "1193163500", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "bluGill", "created_utc": "1193172206", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "novagenesis", "created_utc": "1193230404", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "bluGill", "created_utc": "1193234763", "children": [{"controversiality": 0, "retrieved_on": 1427425574, "subreddit_id": "t5_2fwo", "created_utc": "1193240938", "name": "t1_c02b1qy", "gilded": 0, "link_id": "t3_5ywhh", "downs": 0, "score": 1, "score_hidden": false, "id": "c02b1qy", "author": "novagenesis", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c02b112", "body": "Ahhh... So having been abused, you want to avoid the occasion that might lead to you being abused again; understandable.\n\nThere are \"better tools\" than C out there, that simply don't have those features that make them usable as a replacement *for* C.\n\nYou can never totally replace C any more than you can totally replace ASM, but if you want a certain feature-set, very few \"better\" tools still have those features.\n\nAnd I'm afraid of what someone will come up with to code something in C, sometimes... ;)", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02b112", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 1, "link_id": "t3_5ywhh", "retrieved_on": 1427425584, "body": "&gt;So you have to see the value of a higher-level language having the reasonable compilation ability that C has. You probably also agree that raw speed isn't critical in most of your release programs.\r\n\r\nWhich is why I used SWIG a couple projects back so that I can mix python and C when/where I want to.   I just embed python in my released code.  \r\n\r\nUnfortunatly I'm currently on an embedded system that isn't powerful enough for python so someone wrote a scripting language much worse than C that we use instead.  I no longer dream of a better tool than C, because I'm afraid of what someone will come up with (the author of the mess doesn't understand why I hate it - he thinks it is better than C) ", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02b0l6", "id": "c02b112", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02b0l6", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5ywhh", "retrieved_on": 1427425589, "id": "c02b0l6", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02avqr", "body": "&gt; code that I'm not going to ship out is ofent useful to write in something other than C because I can get it done 20 times faster\n\nExactly...in my experience, almost any code I write is a piece of code I might have to email to a non-tech-savvy person.  I pursuaded an entire department to install Perl and learn to run it command line (huge fuss) to help with hitting some insane time deadlines.  I want the \"20 times faster and 10 times easier to maintain\" on non-C programs, myself.\n\n&gt; Code that I'm going to ship out I write in C (or re-write - sometimes it is faster to write version 1 in python to learn how to do it, and than version 2 in C once I know how to do it, than to just write it in C in the first place)\n\nSo you *have* to see the value of a higher-level language having the reasonable compilation ability that C has.  You probably also agree that raw speed isn't critical in most of your release programs.\n\nA good programmer sees plenty of opportunities, but really dreams of a \"better tool for the job\" that lets them fully retire C.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02avqr", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 1, "link_id": "t3_5ywhh", "retrieved_on": 1427425653, "body": "&gt;but they'd sure as heck make my life 100x easier for any language I use, work or personal.\r\n\r\nWell our experiences are different I guess.  In my experience, code that I'm not going to ship out is ofent useful to write in something other than C because I can get it done 20 times faster, and it is 10 times easier to maintain (I don't use perl, if you do take care not to use the line noise parts) should someone want to use it again.\r\n\r\nCode that I'm going to ship out I write in C (or re-write - sometimes it is faster to write version 1 in python to learn how to do it, and than version 2 in C once I know how to do it, than to just write it in C in the first place).   However I write a lot of utilities to make the build process easier, and that code often isn't C.  For example, we have a database of information that we dump to a flat file for released code, no need to write the code that does the dump in C. \r\n\r\nI will agree that the 3 requirements are useful for shipping code.   I did not say they were useless, because they are useful.  However they are useless in the context of the question which is asking what language to learn, but constrains us to only situations where learning a new language doesn't give much benifit.  \r\n\r\nA good programmer should see plenty of opportunities to make life easier with a program that does some job for us.   When you constrain yourself to not seeing those opportunities, it is no surprize that the solution to those opportunities make no sense.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02aui4", "id": "c02avqr", "author_flair_css_class": null}], "subreddit": "programming", "ups": 2, "name": "t1_c02aui4", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywhh", "retrieved_on": 1427425669, "score_hidden": false, "body": "Not really an argument, no.\n\nMissing the huge part about \" and those requirements are completely *useless* in all possible situations unless you're going to ship the code out retail, and here's why...\"\n\nBut it's a stupid point to be arguing on.  I simply stated my point because I hear the argument \"those requirements are useless\" repeatedly, but they'd sure as heck make my life 100x easier for any language I use, work or personal.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02auhh", "id": "c02aui4", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02auhh", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5ywhh", "retrieved_on": 1427425669, "id": "c02auhh", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02audx", "body": "&gt;There is more than just code you ship out.\r\n\r\nIs that not clear enough?", "author_flair_css_class": null}], "subreddit": "programming", "ups": 2, "name": "t1_c02audx", "controversiality": 0, "archived": true, "link_id": "t3_5ywhh", "retrieved_on": 1427425670, "score_hidden": false, "id": "c02audx", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02atxo", "body": "While your argument is valid, I just read your previous post 5 times over and don't see it there.\n\nBesides, I feel inter-mingling of languages with standard languages is critical for multi-person jobs unless you want everyone on the same language.  Sometimes, even great programmers have to work in groups.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02atxo", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5ywhh", "retrieved_on": 1427425675, "id": "c02atxo", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02asxs", "body": "I did not toss them out the window without a good argument.  I argued that there are a lot of cases where they do not apply, and leaving them in when they do not apply is stupid.   There is a big difference.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02asxs", "ups": 2, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywhh", "retrieved_on": 1427425688, "score_hidden": false, "body": "A lot of people beg and plead for those 3 requirements.  You feel it's worth just tossing out the window without even a good argument.  Pitiable.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02as4v", "id": "c02asxs", "author_flair_css_class": null}], "subreddit": "programming", "ups": -7, "name": "t1_c02as4v", "controversiality": 0, "archived": true, "link_id": "t3_5ywhh", "retrieved_on": 1427425699, "score_hidden": false, "id": "c02as4v", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02aq6e", "body": "Your requirements are BS, so the only other answer I can give you with a straight face is C++ (which you should learn anyway, RAII, and STL can save you a lot of problems in your otherwise C programs, and OO is interesting).\r\n\r\nHowever as I said, your requirements are BS.   There is more than just code you ship out.   I write python scripts once in a while to transform data from one for to another, but the only code I ship is C/C++.  I could do that in C, but I can get the program working correctly 20 times faster in python, then I let it run on the data overnight (C would finish in a couple hours, but python is done by the time I get there so who cares?).\r\n\r\nLearning other languages can make you a better programmer in other ways.  Things that are hard to learn in C are easy to do in other languages, and then you bring them back to C, and 20 lines of odd code replaces 1000 lines as you would have done it before.", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c02as5c", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425699, "score": 1, "score_hidden": false, "body": " Haskell is ELF compliant with a reasonably sized footprint (same .o files as C).  It's a totally different mindset from C, but some things are very, very easy in it. \n\nIn what way does Haskell suffer from those problems?  There are libraries that ease the correlation between Haskell and C, and many of the data types are the same in the underlying system.", "author": "novagenesis", "created_utc": "1193146074", "distinguished": null, "edited": true, "archived": true, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c02aq6e", "id": "c02as5c", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c02asky", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425693, "score": 2, "score_hidden": false, "id": "c02asky", "author": "[deleted]", "created_utc": "1193149686", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 2, "parent_id": "t1_c02aq6e", "body": "[deleted]", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425677, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02ats0", "gilded": 0, "link_id": "t3_5ywhh", "downs": 0, "score": 2, "score_hidden": false, "id": "c02ats0", "author": "sbrown123", "created_utc": "1193157977", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 2, "parent_id": "t1_c02aq6e", "body": "Use D.\n\n1.  Compiles to a standalone binary.\n2.  Small footprint on par with C++ (in otherwords on slightly worse than C)\n3.  It has one of the best C interfaces I have seen as this documentation proves:\n\nhttp://www.digitalmars.com/d/interfaceToC.html", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 5, "author": "gte910h", "created_utc": "1193174087", "children": [{"controversiality": 0, "retrieved_on": 1427425649, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02aw0e", "gilded": 0, "link_id": "t3_5ywhh", "downs": 0, "score": 6, "score_hidden": false, "id": "c02aw0e", "author": "gte910h", "created_utc": "1193174460", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 6, "parent_id": "t1_c02avzm", "body": "Oh yeah, I was suggesting python.\n\nI'll also point out: LOOK AT LIBRARY AVAILABILITY when you pick a language.\n\nWhile lua might meat the nominal goals you just  stated, there is a python library (or library in a language it can easily interface to) for damn near everything. It's even part of .Net (yes, I went there).", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 5, "name": "t1_c02avzm", "controversiality": 0, "archived": true, "link_id": "t3_5ywhh", "retrieved_on": 1427425649, "score_hidden": false, "id": "c02avzm", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02aq6e", "body": "1. pyexe and pyapp have this. I've used py2exe a *lot*, and it works great. Py2app, never used. Here are even more ways to do it: http://effbot.org/zone/python-compile.htm\n\n2. A couple megs is the footprint for the compiled image. Not huge, and really even small enough for modern embedded work. It's good about only putting items in you need. Often smaller than some C++ programs installs due to the higher granularity of python libraries.\n\n3. http://www.swig.org/tutorial.html is the easy way. You can also make extensions manually and through a couple more automatic wrapper generators.\n\nThey aren't kidding about productivity gains. Not knowing python before I started, I managed to write a assembler I was working on  at work in about 1/3 the time the same thing would have taken in C. (I mainly do C, linux kernel / low-level embedded apps when not pythoning). All you need to get started is the dive into python PDF: http://diveintopython.org/download/diveintopython-pdf-5.4.zip\n\nWhatever you do, do *NOT* go to C++. While a useful language for some things, it is missing many of the gains of high level languages. While you're not used to interpreted languages yet, you will love the development speed of them once you start.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 50, "name": "t1_c02aq6e", "controversiality": 0, "archived": true, "link_id": "t3_5ywhh", "retrieved_on": 1427425724, "score_hidden": false, "id": "c02aq6e", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5ywhh", "body": "There have been quite a number of posts lately discussing some higher level language or another, and while I've been intrigued, I haven't really found one that would allow me to accomplish what I can with plain old C.  Perhaps I haven't done enough research, but I'm looking for a language with the following primary features: \n\n1. Standalone.  I'd like to be able to deliver a binary (in my case on Mac OS X and Windows) that doesn't require any massive libraries installed.  Ideally, I'd like to be able to statically link the runtime features of the language directly into my app.\n\n2. Small footprint.  Related to question 1... obviously statically linking the runtime would be pretty useless if the runtime is huge.  I'd like to see something that added 2 megs or less.\n\n3. Interface with C.  I have no problem writing glue code.  But I'd like the interface to be fast, and relatively clean.\n\nI'm willing to do the work, and I'm eager to play with all of the incredible features of these high level languages that so many people rave about... but it would be nothing more than an academic exercise if I can't bundle up my app into a nice pretty package at the end of the day.  I've looked into scheme, *ml, haskell, erlang and a handful of others, but they all seem to suffer from the same problems.  Any tips?\n", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "washort", "created_utc": "1193117163", "children": [{"controversiality": 0, "retrieved_on": 1427425719, "subreddit_id": "t5_2fwo", "created_utc": "1193121343", "name": "t1_c02aqls", "gilded": 0, "link_id": "t3_5ywhh", "downs": 0, "score": -8, "score_hidden": false, "body": "python.", "author": "IHaveAnIdea", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": -8, "parent_id": "t1_c02aqal", "id": "c02aqls", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02aqal", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 3, "link_id": "t3_5ywhh", "retrieved_on": 1427425723, "body": "Definitely Python. From a runtime perspective, it's C with foam padding.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5ywhh", "id": "c02aqal", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1193117322", "name": "t1_c02aqb6", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425722, "score": 1, "score_hidden": false, "body": "[deleted]", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t3_5ywhh", "id": "c02aqb6", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 11, "author": "unsigner", "created_utc": "1193127955", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 10, "author": "fab13n", "created_utc": "1193141451", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 5, "author": "nuclear_eclipse", "created_utc": "1193142460", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02asev", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425695, "score": 3, "score_hidden": false, "id": "c02asev", "author": "fab13n", "created_utc": "1193148279", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 3, "parent_id": "t1_c02artd", "body": "&gt; I should think that World of Warcraft would be enough of a supporting killer app \n\nI was referring to metalua, not Lua.", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425695, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02ashb", "gilded": 0, "link_id": "t3_5ywhh", "downs": 0, "score": 3, "score_hidden": false, "id": "c02ashb", "author": "MarshallBanana", "created_utc": "1193148906", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 3, "parent_id": "t1_c02artd", "body": "This disucssion is about MetaLua, not plain Lua.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 5, "name": "t1_c02artd", "controversiality": 0, "archived": true, "link_id": "t3_5ywhh", "retrieved_on": 1427425703, "score_hidden": false, "id": "c02artd", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02arq6", "body": "Umm, I should think that World of Warcraft would be enough of a supporting killer app for any language.  ;)\n\nEDIT: I missed the topic leap apparently =\\", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193158798", "name": "t1_c02atwg", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425676, "score": 3, "score_hidden": false, "id": "c02atwg", "author": "unsigner", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 3, "parent_id": "t1_c02arq6", "body": "Yes, Fabian, I follow your work on metalua closely, and have played with it - however I don't feel bold enough to use it in production code, of which we have 60k+ lines already. I can't wait for your 1.0 version!", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "dmpk2k", "created_utc": "1193162775", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c02av6w", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425659, "score": 2, "score_hidden": false, "body": "Not tested, but it's extremely probable that it does: it generates exactly the same bytecode as the Lua 5.1 compiler.\n\nThere is one possible exception: Metalua contains 3 additional primitives (Label/Goto, and Stat to put a statement where an expression is expected), mainly useful for code generation. Their interaction with LuaJIT hasn't been studied.\n\nI definitely expect metalua to be LuaJIT compatible, eventually, but there are many things higher in the priority list.", "author": "fab13n", "created_utc": "1193168078", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 2, "parent_id": "t1_c02auf0", "id": "c02av6w", "author_flair_css_class": null}], "subreddit": "programming", "ups": 3, "name": "t1_c02auf0", "controversiality": 0, "archived": true, "link_id": "t3_5ywhh", "retrieved_on": 1427425669, "score_hidden": false, "id": "c02auf0", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02arq6", "body": "Does MetaLua play well with LuaJIT? I haven't been able to find an answer either way on this, except some old thing on the mailing lists.", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 10, "controversiality": 0, "archived": true, "link_id": "t3_5ywhh", "retrieved_on": 1427425704, "id": "c02arq6", "author_flair_text": null, "distinguished": null, "edited": true, "name": "t1_c02arq6", "parent_id": "t1_c02ar0k", "body": "&gt; It only needs macros to be \"Lisp done right\".\n\nYou're not the first one to feel that way: [http://metalua.luaforge.net] \n\nMetalua is not production ready yet, but is already quite usable. It mainly misses better error reporting (there's an ongoing effort to incorporate [converge](http://convergepl.org)'s breakthroughs in this area), some polish (multiple compilations aren't sandboxed properly, installation is a bit more than \"apt-get install metalua\", some API still lack a bit of consistency). Oh, and it misses a supporting killer app, of course. But it gives you all of Lisp's macro power, with all of Lua's strengths.\n\nEDIT: uh?! Can't get markdown to process my URLs... Metalua isn't the only piece of software that isn't production ready ;)", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02ar0k", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 11, "link_id": "t3_5ywhh", "retrieved_on": 1427425713, "body": "Definitely Lua.\r\n\r\nIt's much cleaner than Python, and higher-level IMHO - proper coroutines (instead of generators), proper closures, and the metatables mechanism which allows you to hook to important points of the runtime. It only needs macros to be \"Lisp done right\".", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5ywhh", "id": "c02ar0k", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "fredrikj", "created_utc": "1193131056", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c02arhx", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425707, "score": 2, "body": "[deleted]", "author": "[deleted]", "created_utc": "1193137751", "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "ups": 2, "parent_id": "t1_c02ar62", "score_hidden": false, "id": "c02arhx"}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193160887", "ups": 1, "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425673, "score": 1, "body": "what does python bring to the mix, save popularity?", "id": "c02au5o", "author": "zem", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02au5o", "parent_id": "t1_c02ar62", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 3, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywhh", "retrieved_on": 1427425711, "body": "The conclusion of this discussion is that we need a Lua/Python hybrid language.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02ar62", "parent_id": "t3_5ywhh", "id": "c02ar62", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 10, "author": "Megasphaera", "created_utc": "1193136824", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "novagenesis", "created_utc": "1193152022", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 4, "author": "Megasphaera", "created_utc": "1193154795", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "novagenesis", "created_utc": "1193156149", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "mykdavies", "created_utc": "1193160981", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "novagenesis", "created_utc": "1193163686", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "qwph", "created_utc": "1193176519", "children": [{"controversiality": 0, "retrieved_on": 1427425589, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02b0lu", "gilded": 0, "link_id": "t3_5ywhh", "downs": 0, "score": 1, "score_hidden": false, "id": "c02b0lu", "author": "novagenesis", "created_utc": "1193230615", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c02aw6l", "body": "I can handle RPN; it's not too different from lisp.  The whole stack mentality is taking a little while (figuring out 'sum of squares' took a lot more steps for me than the answer key in the tutorial...i'd love a great general understanding of stack manipulation)", "author_flair_css_class": null}], "subreddit": "programming", "ups": 2, "name": "t1_c02aw6l", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywhh", "retrieved_on": 1427425646, "score_hidden": false, "body": " Forth great is syntax RPN its you up put with can if . ", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02auj5", "id": "c02aw6l", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02auj5", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 2, "link_id": "t3_5ywhh", "retrieved_on": 1427425669, "id": "c02auj5", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02au63", "body": "Interesting stuff...I'm gonna have to look into Forth.  It's a unique language to me, but it seems that if you can define sub-languages so easily, it might be up my alley.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02au63", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 3, "link_id": "t3_5ywhh", "retrieved_on": 1427425672, "body": "There's a discussion at Lambda the Ultimate, especially this comment, which describes Forth as \"low floor, high ceiling\", which is a nice way of putting it:\nhttp://lambda-the-ultimate.org/node/2452#comment-36814", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02atj4", "id": "c02au63", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02atj4", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5ywhh", "retrieved_on": 1427425681, "id": "c02atj4", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02atbp", "body": "Hmm...touche.  I'd love to see references (my knowledge of Forth is minimal).", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 4, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywhh", "retrieved_on": 1427425683, "body": "  Forth often spans the breadth of scope from raw metal to complete expert systems, due to its minimalist syntax. Kind of like Lisp in that respect. So depending on your dictionaries, it can be incredibly high-level.\nedit: sorry, no references.", "archived": true, "distinguished": null, "edited": true, "name": "t1_c02atbp", "parent_id": "t1_c02aswj", "id": "c02atbp", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 1, "controversiality": 0, "archived": true, "link_id": "t3_5ywhh", "retrieved_on": 1427425689, "id": "c02aswj", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02aswj", "parent_id": "t1_c02arg2", "body": "Since when is Forth a high level language, though?", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02arg2", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 10, "link_id": "t3_5ywhh", "retrieved_on": 1427425708, "body": "   I haven't seen [Forth](http://en.wikipedia.org/wiki/Forth_(programming_language)) mentioned;  there's a nice little Forth called \n[atlast](http://www.fourmilab.ch/atlast/) that you can embed into your C programs, or vice-versa. ", "archived": true, "distinguished": null, "edited": true, "parent_id": "t3_5ywhh", "id": "c02arg2", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 6, "author": "malcontent", "created_utc": "1193137961", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c02arr8", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425704, "score": 6, "score_hidden": false, "id": "c02arr8", "author": "kogus", "created_utc": "1193141821", "distinguished": null, "edited": true, "archived": true, "subreddit_id": "t5_2fwo", "ups": 6, "parent_id": "t1_c02aric", "body": "Upmodded; Delphi is definitely underrated for Win32 development.  Regarding the OP's concerns: applications frequently compile to less than one meg, and the interfaces to C are decent.  It also has excellent wrappers for a lot of low-level Windows stuff that make it very powerful.  On the flip side, I have found it wanting when it comes to web development. ", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 4, "author": "Zak", "created_utc": "1193161275", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 4, "author": "onmytoes", "created_utc": "1193164245", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 3, "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425661, "score": 3, "id": "c02av0s", "author": "Syphor", "created_utc": "1193167037", "distinguished": null, "edited": false, "body": "I have to agree, having used Delphi from version 1.0 onward. The two points you mention happen to be exactly mirroring my two main dislikes with C++. And as a plus side on that second one, Delphi/Pascal's module system also means you don't get 400mb of precompiled header cache that has to be rebuilt if you change header order or something.", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02av0s", "parent_id": "t1_c02aulz", "score_hidden": false, "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "[deleted]", "created_utc": "1193251441", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193354585", "name": "t1_c02bdbv", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425353, "score": 1, "score_hidden": false, "body": "Just to provide a counterexample: FL Studio is written in Delphi, and it is very large and complex, and not all ugly, buggy, or fragile. FWIW.", "author": "nhomas", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c02b33i", "id": "c02bdbv", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02b33i", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5ywhh", "retrieved_on": 1427425557, "id": "c02b33i", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02aulz", "body": "I'm sure it's great, but thus far my experience with Delphi as a consumer has been negative. Every program I've used that has been written in Delphi has been ugly, buggy, and fragile. I always kind've had it next to VB classic in my head, since VB programs were the same way.", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02aulz", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 4, "link_id": "t3_5ywhh", "retrieved_on": 1427425667, "body": " Delphi (a.k.a. Object Pascal) is pretty much 1-to-1 with C in terms of features, plus there's the additional OOP layer.\n\n\"Bondage and discipline\" is something that was characteristic of Wirth's original Pascal from the early 1970s, not the whole Turbo Pascal branch of the family tree (which culminated in Delphi).\n\nI still prefer C for because it's a more standard language, but Delphi has two things going for it:\n\n* The fastest production compiler I have ever used by a factor of 100 (compile time is typically ZERO from a human perception point of view).\n\n* A clean and intuitive module system that puts C++ to shame. ", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02au7g", "id": "c02aulz", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 4, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywhh", "retrieved_on": 1427425672, "body": "Pascal is not generally considered to be one of the higher-level languages. Bondage and discipline is what comes to mind when I think of Pascal.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02au7g", "parent_id": "t1_c02aric", "id": "c02au7g", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02aric", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 6, "link_id": "t3_5ywhh", "retrieved_on": 1427425707, "id": "c02aric", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5ywhh", "body": "Delphi/Objectpascal lazarus/freepascal is what you are looking for.\n\nAs a bonus you get a RAD IDE.\n\nTry it.", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c02arwc", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425702, "score": 1, "score_hidden": false, "id": "c02arwc", "author": "dmaclay", "created_utc": "1193143605", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t3_5ywhh", "body": "Try Kawa, it's a scheme implementation for the JVM.  Not too fast, but it gives you easy access to all the JRE libraries.", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "[deleted]", "created_utc": "1193145223", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 5, "author": "MarshallBanana", "created_utc": "1193148931", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "[deleted]", "created_utc": "1193168436", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 2, "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425655, "score": 2, "id": "c02avie", "author": "MarshallBanana", "created_utc": "1193170469", "distinguished": null, "edited": false, "body": "It fulfills his three *limitations*, but it's not what he was *asking* for at all. Pascal is an ancient educational language. He was asking for a modern high-level language.\n\nI did giggle at the idea of Ada.", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02avie", "parent_id": "t1_c02av8h", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": 3, "name": "t1_c02av8h", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywhh", "retrieved_on": 1427425659, "score_hidden": false, "body": "Maybe. Depends on what kinds of trade-offs the O.P. is willing to make. It satisfies their 3 primary features very well. It falls down in not being functional, etc. like the examples he/she stated. Does have OO and other interesting capabilities of a very practical nature. So it could end up being more of a replacement for them, like D mentioned elsewhere, than a learning experience. In that sense, you are right. Could still be interesting for them to take a peek at though.\n\nI guess I won't follow that up by suggesting Ada.\n", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02ashf", "id": "c02av8h", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 5, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywhh", "retrieved_on": 1427425695, "body": "Congratulations on making the *worst suggestion ever*!", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02ashf", "parent_id": "t1_c02as1n", "id": "c02ashf", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 3, "controversiality": 0, "archived": true, "link_id": "t3_5ywhh", "retrieved_on": 1427425700, "id": "c02as1n", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02as1n", "parent_id": "t3_5ywhh", "body": "FreePascal might be worth looking at. Take a look at the \"advantages\" page to see if its goals really do agree with your needs or not:\n\nhttp://www.freepascal.org/advantage.var\n\n", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 18, "author": "gnuvince", "created_utc": "1193145747", "children": [{"controversiality": 0, "retrieved_on": 1427425672, "subreddit_id": "t5_2fwo", "archived": true, "ups": 5, "gilded": 0, "link_id": "t3_5ywhh", "downs": 0, "score": 5, "id": "c02au7e", "author": "hoijarvi", "created_utc": "1193161268", "distinguished": null, "edited": false, "body": "Another good one is Eiffel.\nhttp://smarteiffel.loria.fr/\n\nThe compiler generates C and standalone executables. ", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02au7e", "parent_id": "t1_c02as3j", "score_hidden": false, "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "obdurak", "created_utc": "1193169575", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 4, "author": "wnoise", "created_utc": "1193187234", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193208164", "ups": 0, "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425602, "score": 0, "id": "c02azlk", "author": "obdurak", "archived": true, "distinguished": null, "edited": true, "body": "  &gt;&gt; it also has a better syntax than SML and Haskell, in my opinion.\n\n&gt; Your aesthetic sense has been damaged from using it too much.\n\nmaybe\n\nhowever it seems that ghc suffers from congenital slowness\n\nthe other day I decided once again I should give it a good try - I wanted to see that new window manager written in haskell, xmonad.\n\nof course the ghc on my ubuntu was too old, so I had to recompile it.\n\nit took at least an hour.\n\nwhen I compile ocaml from scratch, it takes about 15 minutes.\n\nwhat's the name of a fast haskell compiler?  ", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02azlk", "parent_id": "t1_c02ax8m", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02ax8m", "ups": 4, "controversiality": 0, "archived": true, "link_id": "t3_5ywhh", "retrieved_on": 1427425633, "score_hidden": false, "id": "c02ax8m", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02avdw", "body": "camlp4 is a preprocessor that can essentially \"skin\" the language.  This is vital, because the original syntax sucks.\n\n&gt; (no printf in haskell)\n\nNot built-in, but:\nhttp://cvs.haskell.org/Hugs/pages/libraries/base/Text-Printf.html\n\n&gt; modules and higher-order modules (no modules in haskell); \n\nOf course it has modules.  It doesn't have higher-order modules, no.  You can embed the same functionality in other Haskell constructs, however.\n\nhttp://www.haskell.org/pipermail/haskell/2004-August/014463.html\n\n&gt; (for, while...) (not in haskell, but that's a feature, not a bug);\n\nRight.  Because you can implement them in Haskell, due to the laziness &amp; monadic magic.\n\n&gt; (haskell has no debugger at all);\n\nNo implementation comes with a standard debugger.  There are various research tools, but they have limitations.  O'Caml's debugger is truly fantastic though.\n\n&gt;it also has a better syntax than SML and Haskell, in my opinion.\n\nYour aesthetic sense has been damaged from using it too much.\n\n&gt; also you need to explicitly give the type of top-level bindings in haskell, which sucks. that's mandated by the type classes AFAIK.\n\nGenerally, you don't.  It's often considered good practice, as part of documenting.  It's generally only needed (in Haskell '98) to escape the monomorphism restriction.", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c02azk8", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425603, "score": 1, "score_hidden": false, "body": "Wow! Much of these comments are pretty far removed from reality; I always find myself in awe in these scenarios.", "author": "[deleted]", "created_utc": "1193207507", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c02avdw", "id": "c02azk8", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 3, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywhh", "retrieved_on": 1427425657, "body": "Also, Ocaml has : lots of nice libraries; an extremely powerful pre-processor, camlp4 (not in haskell); a good FFI; type-safe printf! (no printf in haskell); modules and higher-order modules (no modules in haskell); imperative control structures (for, while...) (not in haskell, but that's a feature, not a bug); perfect Unix support (you can write a full-featured shell with it) (not in haskell); object-oriented programming with multiple inheritance (still nto in haskell);labels and optional labels (not in haskell); type inference (in haskell); compiles to native code; a time-traveling debugger (haskell has no debugger at all); has been around for about 15 years (including its predecessors); is maintained by a team of world-class scientists; is used by smart people; and it is really, really fast.  i have written 5 to 10 fps machine vision routines in ocaml (no C!).\n\nit also has a better syntax than SML and Haskell, in my opinion.\n\nalso you need to explicitly give the type of top-level bindings in haskell, which sucks.  that's mandated by the type classes AFAIK.\nno such restriction in ocaml.\n\nhaskell is for academics; ocaml is for professionals.\n", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02avdw", "parent_id": "t1_c02as3j", "id": "c02avdw", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02as3j", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 18, "link_id": "t3_5ywhh", "retrieved_on": 1427425699, "id": "c02as3j", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5ywhh", "body": "I'll second the people who said [O'Caml](http://caml.inria.fr/ocaml/index.en.html):\n\n1. ocamlopt generates stand-alone, native executables.\n2. O'Caml fares very well in the language shootout in terms of speed and memory usage\n3. O'Caml has an FFI", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 7, "author": "[deleted]", "created_utc": "1193146428", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193147145", "ups": 5, "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425697, "score": 5, "body": "Wait, they did that already? Damn it! I wanted to do that :(", "id": "c02as9x", "author": "Figs", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02as9x", "parent_id": "t1_c02as6s", "score_hidden": false, "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": -1, "author": "sw17ch", "created_utc": "1193152717", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "finix", "created_utc": "1193157941", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "sw17ch", "created_utc": "1193164106", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 4, "author": "finix", "created_utc": "1193165118", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "sw17ch", "created_utc": "1193165609", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 4, "author": "finix", "created_utc": "1193167035", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "sw17ch", "created_utc": "1193167223", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "finix", "created_utc": "1193169498", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "sw17ch", "created_utc": "1193169826", "children": [{"controversiality": 0, "retrieved_on": 1427425653, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02avo7", "gilded": 0, "link_id": "t3_5ywhh", "downs": 0, "score": 2, "score_hidden": false, "id": "c02avo7", "author": "finix", "created_utc": "1193171628", "distinguished": null, "edited": true, "author_flair_text": null, "subreddit": "programming", "ups": 2, "parent_id": "t1_c02avff", "body": " I'd *guess* (can't speak for \"most circles\") that this gets passed along in general - think of e.g. multiple return points, later changes, the broader concept of RAII - but yes, this is a topic that should get specifically mentioned in relation to exceptions.\n\nedit: though of course, C++ *is* a horrendously complicated language with plenty of pitfalls, and there *are* ample of bad and/or outdated books, tutorials, tips, etc., around.\n\nUseful search phrase: \"exception safety\", \"exception safe code\". ", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02avff", "ups": 1, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywhh", "retrieved_on": 1427425656, "score_hidden": false, "body": "Alright. I'll give you that. =) Does that kind of thing get taught right along with the try/catch part of C++ in most circles?\n\nI've done my share of C++ in the past (though I haven't even begun to cover everything the language can do) and have managed (so far) to avoid needing/using try/catch.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02avdg", "id": "c02avff", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 1, "controversiality": 0, "archived": true, "link_id": "t3_5ywhh", "retrieved_on": 1427425657, "id": "c02avdg", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02avdg", "parent_id": "t1_c02av1n", "body": "I didn't mean to let any sharp edges slip into my tone.\n\nAnyway, it seems your only complaint is indeed with the lack of a GC. As for the \"someone wrote on top of it\", I just can reiterate that relying on `std::auto_ptr` is just like relying  on the hypothetical `finally`.", "author_flair_css_class": null}], "subreddit": "programming", "ups": 1, "name": "t1_c02av1n", "controversiality": 0, "archived": true, "link_id": "t3_5ywhh", "retrieved_on": 1427425661, "score_hidden": false, "id": "c02av1n", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02av0r", "body": "I'd listen to your argument if you took the edge off your tone... yes I read the RAII paper... but my gripe is with C++'s implementation, not anything else some one wrote on top of it.", "author_flair_css_class": null}], "subreddit": "programming", "ups": 4, "name": "t1_c02av0r", "controversiality": 0, "archived": true, "link_id": "t3_5ywhh", "retrieved_on": 1427425661, "score_hidden": false, "id": "c02av0r", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02auta", "body": "Have you clicked on the link I provided? RAII is more versatile and - get this - *less* error prone than `finally`.\n\nAnd you don't really need to \"rely on\" anything obscure - `std::auto_ptr` is in the standard-lib; boost is quasi-standard, and boost's smart pointers are among its parts that will be actual standard.\n\n**Relying on smart pointers is very similar to relying on `finally`.**\n\nOf course, your actual gripe might not be with C++'s exceptions but its lack of a standard GC.\n\nThat would be, on one hand, very understandable, but, on the other, I must say that I'm often astonished that GC-advocates often seem blissfully oblivious to the fact that a GC doesn't solve all resource management problems (not even all memory related ones).", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 0, "controversiality": 0, "archived": true, "link_id": "t3_5ywhh", "retrieved_on": 1427425664, "id": "c02auta", "author_flair_text": null, "distinguished": null, "edited": true, "name": "t1_c02auta", "parent_id": "t1_c02auqa", "body": "   So the scopedptr/autoptr hold a reference to the object that gets cleaned up when their destructors are called?\n\nI still don't like that you need to rely on Boost or something else. The problem is that it's far too easy to do what I wrote down. If C++ had \"finally\" along with try/catch then I wouldn't complain, but the fact that you need these other constructs to be safe is a problem with the implementation.   ", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 4, "score_hidden": false, "controversiality": 0, "archived": true, "link_id": "t3_5ywhh", "retrieved_on": 1427425665, "id": "c02auqa", "author_flair_text": null, "distinguished": null, "edited": true, "name": "t1_c02auqa", "parent_id": "t1_c02aul5", "body": "  &gt;I think I have this right:\n\nSorry, but I'd say absolutely not!\n\nFirst off, you probably meant `char const* str`. Which would be way cooler than your variant, if it weren't for the simple fact that you do *not ever* throw strings or ints or what have you when you want to throw an exception.\n\nAs for your actual point - try my corrected version of function *b*:\n\n    void b()\n    {\n      boost::scoped_ptr&lt;SomeLargeObject&gt; p(new SomeLargeObject);\n      someFunctionThatCausesAnException();\n    }\n\nwhich is the way to go (see also [RAII](http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization)) even if the following code won't ever throw. \n\nedit: if you don't have boost installed, `std::auto_ptr` will do as well. ", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425637, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02awvy", "gilded": 0, "link_id": "t3_5ywhh", "downs": 0, "score": 1, "score_hidden": false, "id": "c02awvy", "author": "[deleted]", "created_utc": "1193183402", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c02aul5", "body": "[deleted]", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193205062", "ups": 1, "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425604, "score": 1, "body": " D has an interesting way to get around stuff like this. I'm changing allocation/deallocation to lock/unlock for this example since D has garbage collection already:\n\n     void a(Mutex m)\n     {\n       try\n       {\n         b(m);\n       }\n       catch(Object o)\n       {\n         ...\n       }\n     }\n     \n     void b(Mutex m)\n     {\n       lock(m);\n       scope(exit) unlock(m);\n     \n       someFunctionThatCausesAnException();\n     }\n\nThe scope(exit) thing basically calls unlock(m) whenever the scope is left, regardless of whether it is normal or due to a thrown exception. Just one of the things about D that I find intriguing for imperative languages.\n\n[Edit: I just realized this is exactly like the Boost scoped_ptr mentioned already...]", "author": "[deleted]", "author_flair_text": null, "distinguished": null, "edited": true, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02azg7", "parent_id": "t1_c02aul5", "score_hidden": false, "id": "c02azg7"}], "subreddit": "programming", "name": "t1_c02aul5", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 1, "link_id": "t3_5ywhh", "retrieved_on": 1427425667, "body": "   I think I have this right:\n\n    void a()\n    {\n        try\n        {\n                b();\n        }\n        catch(char * str)\n        {\n                cout &lt;&lt; \"Exception raised: \" &lt;&lt; str &lt;&lt; '\\n';\n        }\n    }\n    \n    void b()\n    {\n        SomeLargeObject * p = new SomeLargeObject();\n\t\n        someFunctionThatCausesAnException();\n\t\n        delete p;\n    }\n\nthe point is, any dynamically allocated memory that is not freed BEFORE the exception is thrown will not be freed at all because we escape all the way down the stack until we have a exception handler. it's way to easy to have this type of circumstance.\n\nthis is just one of the evils of try/catch in a non-garbage collected language ", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02atrr", "id": "c02aul5", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 2, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywhh", "retrieved_on": 1427425678, "body": "Why would you say this?", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02atrr", "parent_id": "t1_c02at0k", "id": "c02atrr", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": -1, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywhh", "retrieved_on": 1427425687, "body": "Just please.. don't use exceptions in C++... they are straight from hell (if you believe in such a place).", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02at0k", "parent_id": "t1_c02as6s", "id": "c02at0k", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "author_flair_text": null, "name": "t1_c02bdc4", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425353, "score": 1, "score_hidden": false, "body": "&gt; I'm not sure how far he went with it, but Christopher Diggins made a library so that he could write C++ using scheme syntax. It looked just like a bunch of scheme s-expressions but it was actually plain old C++ code.\n\nI call BS. Link?", "author": "nhomas", "created_utc": "1193354662", "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "ups": 1, "parent_id": "t1_c02as6s", "id": "c02bdc4", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02as6s", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 7, "link_id": "t3_5ywhh", "retrieved_on": 1427425698, "body": "Learn C++.  You probably think that you know C++ but there is always more to learn and new approaches to it.  C++ is whatever language you want it to be.  I'm not sure how far he went with it, but Christopher Diggins made a library so that he could write C++ using scheme syntax.  It looked just like a bunch of scheme s-expressions but it was actually plain old C++ code.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5ywhh", "id": "c02as6s", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -4, "author": "schwarzedrache", "created_utc": "1193148408", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 7, "author": "jrnewton", "created_utc": "1193154585", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -2, "author": "schwarzedrache", "created_utc": "1193158094", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193159872", "ups": 5, "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425674, "score": 5, "body": "&gt; 2 megs or less.", "author": "jrnewton", "author_flair_text": null, "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02au1g", "parent_id": "t1_c02atsp", "score_hidden": false, "id": "c02au1g"}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02au1q", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425674, "score": 5, "score_hidden": false, "body": "&gt; Standalone. I'd like to be able to deliver a binary ", "author": "jrnewton", "created_utc": "1193159906", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 5, "parent_id": "t1_c02atsp", "id": "c02au1q", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02atsp", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": -2, "link_id": "t3_5ywhh", "retrieved_on": 1427425677, "body": "Java is slow! Java has a large memory footprint!\r\n\r\nCompared to what? Doing what? On what kind of system?\r\n\r\n ", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02atal", "id": "c02atsp", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 7, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywhh", "retrieved_on": 1427425684, "body": "&gt; Small footprint.\n", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02atal", "parent_id": "t1_c02asff", "id": "c02atal", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02asff", "score_hidden": false, "controversiality": 0, "archived": true, "ups": -4, "link_id": "t3_5ywhh", "retrieved_on": 1427425695, "id": "c02asff", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5ywhh", "body": "Im curious, why all the java hate. Well not hate, but java lack of mention? ", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "silveira", "created_utc": "1193158196", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193183538", "name": "t1_c02awwe", "gilded": 0, "link_id": "t3_5ywhh", "retrieved_on": 1427425637, "score": 1, "score_hidden": false, "id": "c02awwe", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c02att9", "body": "[deleted]", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02att9", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5ywhh", "retrieved_on": 1427425677, "id": "c02att9", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5ywhh", "body": "Python.", "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427425605, "subreddit_id": "t5_2fwo", "archived": true, "ups": 1, "gilded": 0, "link_id": "t3_5ywhh", "downs": 0, "score": 1, "body": "I'm fond of Haskell, but it's not a good choice for performance sensitive apps -- it sometimes achieves high performance, but optimizing it is still a little magical. O'Caml, on the other hand, offers a lot of the benefits -- abstraction, type inference, tail calls -- while being easy to optimize.\n", "author": "jsnx", "created_utc": "1193204221", "distinguished": null, "edited": false, "id": "c02azed", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02azed", "parent_id": "t3_5ywhh", "score_hidden": false, "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "goalieca", "created_utc": "1192780864", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 14, "author": "KayEss", "created_utc": "1192781959", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 8, "author": "null_vector", "created_utc": "1192783434", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "fnord123", "created_utc": "1192793917", "children": [{"controversiality": 0, "retrieved_on": 1427426037, "subreddit_id": "t5_2fwo", "created_utc": "1192797195", "ups": 3, "gilded": 0, "link_id": "t3_5ynb1", "downs": 0, "score": 3, "id": "c02a22o", "author": "null_vector", "archived": true, "distinguished": null, "edited": false, "body": "This was all I could find.\n\nhttp://blogs.codegear.com/abauer/2007/10/04/38829/\n\nThe relevant bit...\n\n&gt; Next discussion is more informal and is related to garbage collection\u2026 should be interesting.  Apparently there will be a minimal specification of garbage collection in the next standard (at least at this point).  Main sticking points are about obscured pointers, leak detection, and destructors.  No, no\u2026 GC, as defined in the original proposal, is not in.\n\nMaybe I'll find out today.  Stroustrup is giving a talk today at University of Houston on C++0X.  They have a live webcast( http://www.cs.uh.edu/events/2007.10.19_sec/webcast.shtml ) but I'm not sure if his talk is going to be included.\n\n", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02a22o", "parent_id": "t1_c02a1vp", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02a1vp", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 2, "link_id": "t3_5ynb1", "retrieved_on": 1427426039, "id": "c02a1vp", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02a1gm", "body": "&gt;I can understand people feeling one or another about what the default is(gc or no gc) but I don't get it not being mandatory.\n\nI wasn't at the Kona talks, but from what I've been told, GC will not be in the standard. It may be in a Technical Report. Of course, people can still link against libgc if they really want that functionality now.", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 4, "author": "sethg", "created_utc": "1192799906", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "Doctor", "created_utc": "1192803257", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "millstone", "created_utc": "1192816442", "children": [{"controversiality": 0, "retrieved_on": 1427426010, "subreddit_id": "t5_2fwo", "created_utc": "1192817602", "ups": 2, "gilded": 0, "link_id": "t3_5ynb1", "downs": 0, "score": 2, "body": "Now my head hurts.\n\nI so long for intelligent software development...", "author": "Doctor", "archived": true, "distinguished": null, "edited": false, "id": "c02a45f", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02a45f", "parent_id": "t1_c02a40e", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": 3, "name": "t1_c02a40e", "controversiality": 0, "archived": true, "link_id": "t3_5ynb1", "retrieved_on": 1427426011, "score_hidden": false, "id": "c02a40e", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02a2jl", "body": "It's broken in a number of places.\n\nA subtle example is uniquing-requirements on certain symbols, such as static variables in inline functions, or vtables themselves.  This requires the dynamic linker to do a surprising amount of work at launch time.  See [vague linkage](http://gcc.gnu.org/onlinedocs/gcc/Vague-Linkage.html).", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 2, "name": "t1_c02a2jl", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ynb1", "retrieved_on": 1427426030, "score_hidden": false, "body": "The principle which is, by the way, broken by stack maintenance required by the mere existence of exceptions.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02a29c", "id": "c02a2jl", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 4, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ynb1", "retrieved_on": 1427426034, "body": "One of the fundamental design principles of C++, as I understand it, is that \"you don't pay for what you don't use\", i.e., if you add feature X to the language, it has to be implemented in a way so that programs that never use X do not become less efficient.\n\nMaking garbage collection mandatory in C++ would incur a speed and/or memory-usage penalty for programs that continued to rely on explicit memory management.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02a29c", "parent_id": "t1_c02a1gm", "id": "c02a29c", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427426003, "subreddit_id": "t5_2fwo", "created_utc": "1192821487", "ups": 3, "gilded": 0, "link_id": "t3_5ynb1", "downs": 0, "score": 3, "id": "c02a4mk", "author": "KayEss", "archived": true, "distinguished": null, "edited": false, "body": "Personally I think it is a good thing that GC is not mandatory. There are some smart pointer libraries that are looking to add GC support to suitably typed (smart) pointers. I think this is the best of everything. GC where it makes your life easy and known de-allocation times where you need that.\n\nThe reason for the caveat with them on the lambdas is that my understanding of the issue is that some use cases for lambdas rely on GC. If those use cases can be covered by an optional GC system then great, but I've not seen any work on it one way or another.\n\nThe lack of a fixed point operator is a problem, but given the way that C++ has been moulded in the past it may be that somebody clever enough will be able to find a way to write it.\n\nC++ is one of those languages that people discover new things in rather than are told what is possible in.", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02a4mk", "parent_id": "t1_c02a1gm", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02a1gm", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 8, "link_id": "t3_5ynb1", "retrieved_on": 1427426044, "body": "&gt; mandatory garbage collection\n\nWhy is this a bad thing though?  I can understand people feeling one or another about what the default is(gc or no gc) but I don't get it not being mandatory.  \n\nThere are too many situations where speed is still absolutely key. \n\nBut upmodded for talking about C++ and 1) knowing what you're talking about and 2) keeping abreast of the current proposals.  Rare these days for reddit.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02a1dx", "id": "c02a1gm", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 14, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ynb1", "retrieved_on": 1427426047, "body": " There will be language support for lambdas, but no mandatory garbage collection nor (I think) a fixed point operator so it won't be able to do everything.\n\nI understand that local functions and external linkage requirements for template parameters should also get lifted which will also make many things easier. (Edit) I.e. local functions, and function local classes as template parameters.\n\nThe concepts _is_ a language level feature, and has to be such so Boost is really a red herring when discussing it. ", "archived": true, "distinguished": null, "edited": true, "name": "t1_c02a1dx", "parent_id": "t1_c02a1bu", "id": "c02a1dx", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427426044, "subreddit_id": "t5_2fwo", "created_utc": "1192783482", "ups": 8, "gilded": 0, "link_id": "t3_5ynb1", "downs": 0, "score": 8, "body": "I guess between all the programmers longing for more functional programming, aspect oriented programming, true threading support and more template tricks, the standardization groups are happy if they can keep most features contained in libraries. I've been actively following the [cpp-threads](http://www.decadentplace.org.uk/pipermail/cpp-threads/) group for the past two years, and the details in the already complex language are mind-boggling.\n\nA good overview of all the new features is the [Wikipedia entry](http://en.wikipedia.org/wiki/C%2B%2B0x).", "author": "anusrape", "archived": true, "distinguished": null, "edited": false, "id": "c02a1gq", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02a1gq", "parent_id": "t1_c02a1bu", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192791107", "ups": 4, "gilded": 0, "link_id": "t3_5ynb1", "retrieved_on": 1427426041, "score": 4, "score_hidden": false, "id": "c02a1rm", "author": "nglynn", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02a1rm", "parent_id": "t1_c02a1bu", "body": "&gt; lambda support\n\n[Take a look here](http://en.wikipedia.org/wiki/C%2B%2B0x#Lambda_functions_and_expressions)", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c02a1ue", "gilded": 0, "link_id": "t3_5ynb1", "retrieved_on": 1427426040, "score": 4, "score_hidden": false, "body": "garbage collection in c++ will never happen.\n\nthus, anything that requires gc will never be in the standard.\n", "author": "qwe1234", "created_utc": "1192793110", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 4, "parent_id": "t1_c02a1bu", "id": "c02a1ue", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "archived": true, "ups": 1, "gilded": 0, "link_id": "t3_5ynb1", "retrieved_on": 1427426030, "score": 1, "body": "I so hear you - I bang my head against C++'s limitations every day and I feel my product has outgrown it. And I'm talking millions of lines of code here, not a pet project.", "author": "Doctor", "created_utc": "1192803319", "distinguished": null, "edited": false, "id": "c02a2jt", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02a2jt", "parent_id": "t1_c02a1bu", "score_hidden": false, "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "[deleted]", "created_utc": "1192823853", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "[deleted]", "created_utc": "1192827192", "children": [{"controversiality": 0, "retrieved_on": 1427425993, "subreddit_id": "t5_2fwo", "archived": true, "ups": 1, "gilded": 0, "link_id": "t3_5ynb1", "downs": 0, "score": 1, "id": "c02a5fb", "author": "[deleted]", "created_utc": "1192827792", "distinguished": null, "edited": false, "body": "[deleted]", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02a5fb", "parent_id": "t1_c02a5cx", "score_hidden": false, "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "[deleted]", "created_utc": "1192828312", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "[deleted]", "created_utc": "1192830127", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192836299", "ups": 1, "gilded": 0, "link_id": "t3_5ynb1", "retrieved_on": 1427425983, "score": 1, "body": "[deleted]", "id": "c02a68a", "author": "[deleted]", "author_flair_text": null, "distinguished": null, "edited": true, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02a68a", "parent_id": "t1_c02a5pc", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 1, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ynb1", "retrieved_on": 1427425989, "body": "     join f = f &gt;&gt;= id\n\nThe point is the type signature. I should have used fmap instead of map earlier, so:\n\n    y = fmap (join (*)) lst\n\n    :type \\lst -&gt; fmap (join (*)) lst\n    forall a (f :: * -&gt; *). (Num a, Functor f) =&gt; f a -&gt; f a\n\nNote the more abstract function, denoted by its type signature. I'm just pointing it out, in the context of type classes :)", "archived": true, "distinguished": null, "edited": true, "name": "t1_c02a5pc", "parent_id": "t1_c02a5hk", "id": "c02a5pc", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02a5hk", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5ynb1", "retrieved_on": 1427425992, "id": "c02a5hk", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02a5cx", "body": "[deleted]", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 0, "controversiality": 0, "archived": true, "link_id": "t3_5ynb1", "retrieved_on": 1427425994, "id": "c02a5cx", "author_flair_text": null, "distinguished": null, "edited": true, "name": "t1_c02a5cx", "parent_id": "t1_c02a4w1", "body": "   However, abstraction is more than just convenience. Instead of:\n\n    y = map (x -&gt; x * x) lst\nyou get to write:\n\n    y = map (join (*)) lst\n\nThough, I assume you're writing Scala and not Haskell (since =&gt;) which doesn't yet have a join function. [However, I'm working on it.](http://projects.workingmouse.com/public/general-scala/trunk/src/scala/main/com/workingmouse/control/)   ", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 0, "name": "t1_c02a4w1", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ynb1", "retrieved_on": 1427426000, "score_hidden": false, "body": "[deleted]", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02a1bu", "id": "c02a4w1", "author_flair_css_class": null}], "subreddit": "programming", "ups": 1, "name": "t1_c02a1bu", "controversiality": 0, "archived": true, "link_id": "t3_5ynb1", "retrieved_on": 1427426047, "score_hidden": false, "id": "c02a1bu", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5ynb1", "body": "While typing and \"classes\" are useful i would really very much prefer TRUE lambda support, nested functions, and things to that effect. Boost just doesn't cut it IMO because it has to work within constraints of current c++. It drives me nuts to think that they are choosing a library for support in what should be a language feature.", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "japple", "created_utc": "1192783198", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 14, "author": "null_vector", "created_utc": "1192786470", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "obdurak", "created_utc": "1192795805", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192797340", "ups": 5, "gilded": 0, "link_id": "t3_5ynb1", "retrieved_on": 1427426036, "score": 5, "id": "c02a22y", "author": "null_vector", "archived": true, "distinguished": null, "edited": false, "body": "As chak already noted, ML and Haskell were part of the inspiration for the current proposal.", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02a22y", "parent_id": "t1_c02a1zs", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02a1zs", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 1, "link_id": "t3_5ynb1", "retrieved_on": 1427426038, "body": "I'm sorry, but doesn't all this rather smell like Ocaml or SML modules?\n\n    module type InputIterator = sig\n      type iter\n      type value\n      include Regular(struct type t = iter end)\n      val ( * ) : iter -&gt; unit\n      val incr : iter -&gt; iter\n      val ( ++ ) : iter -&gt; int -&gt; iter\n    end ", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02a1kx", "id": "c02a1zs", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427426029, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02a2r5", "gilded": 0, "link_id": "t3_5ynb1", "downs": 0, "score": 1, "score_hidden": false, "body": "[deleted]", "author": "[deleted]", "created_utc": "1192805068", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c02a1kx", "id": "c02a2r5", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 14, "name": "t1_c02a1kx", "controversiality": 0, "archived": true, "link_id": "t3_5ynb1", "retrieved_on": 1427426043, "score_hidden": false, "id": "c02a1kx", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02a1ga", "body": " The horrible syntax for one.\n\n    template &lt;class Iter&gt;\n    struct RandomAccessIteratorConcept\n    {\n      void constraints() {\n        function_requires&lt; BidirectionalIteratorConcept&lt;Iter&gt; &gt;();\n        function_requires&lt; LessThanComparableConcept&lt;Iter&gt; &gt;();\n        function_requires&lt; ConvertibleConcept&lt;\n          typename std::iterator_traits&lt;Iter&gt;::iterator_category,\n          std::random_access_iterator_tag&gt; &gt;();\n  \n        i += n;\n        i = i + n; i = n + i;\n        i -= n;\n        i = i - n;\n        n = i - j;\n        i[n];\n      }\n      Iter i, j;\n      typename std::iterator_traits&lt;Iter&gt;::difference_type n;\n   };\n\nversus something like\n\n    concept InputIterator&lt;typename Iter, typename Value&gt;\n    {\n      requires Regular&lt;Iter&gt;;\n      Value operator*(const Iter&amp;);\n      Iter&amp; operator++(Iter&amp;);\n      Iter operator++(Iter&amp;, int);\n    } \n\nEDIT: formatting", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02a1wr", "gilded": 0, "link_id": "t3_5ynb1", "retrieved_on": 1427426039, "score": 5, "id": "c02a1wr", "author": "anusrape", "created_utc": "1192794364", "distinguished": null, "edited": true, "body": "  Because language support of concepts yields much more clear compiler error messages! Have a look at the [ConceptGCC](http://www.generic-programming.org/software/ConceptGCC/) page:\n\n    #include &lt;list&gt;\n    #include &lt;algorithm&gt;\n    using namespace std;\n    \n    void f() {\n      list&lt;int&gt; l;\n      sort(l.begin(), l.end());\n    }\n\nyields\n\n    sort.cpp: In function 'void f()':\n    sort.cpp:7: error: no matching function for call to 'sort(std::_List_iterator&lt;int&gt;, std::_List_iterator&lt;int&gt;)'\n    &lt;path&gt;: note: candidates are: void std::sort(_Iter, _Iter) [with _Iter = std::_List_iterator&lt;int&gt;] &lt;where clause&gt;\n    sort.cpp:7: note:   no concept map for requirement 'std::MutableRandomAccessIterator&lt;std::_List_iterator&lt;int&gt; &gt;'  ", "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 5, "parent_id": "t1_c02a1ga", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 1, "controversiality": 0, "archived": true, "link_id": "t3_5ynb1", "retrieved_on": 1427426047, "id": "c02a1ga", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02a1ga", "parent_id": "t3_5ynb1", "body": "Why isn't [Boost::Concept Check](http://www.boost.org/libs/concept_check/using_concept_check.htm) enough?", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -7, "author": "erikd", "created_utc": "1192784260", "children": [{"controversiality": 0, "retrieved_on": 1427426044, "subreddit_id": "t5_2fwo", "created_utc": "1192784929", "name": "t1_c02a1j2", "gilded": 0, "link_id": "t3_5ynb1", "downs": 0, "score": 11, "score_hidden": false, "body": "A damn efficient pig, nonetheless.", "author": "panic", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 11, "parent_id": "t1_c02a1i4", "id": "c02a1j2", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192786941", "ups": 7, "gilded": 0, "link_id": "t3_5ynb1", "retrieved_on": 1427426043, "score": 7, "body": "Hello there, Mr. Troll.", "id": "c02a1lo", "author": "null_vector", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02a1lo", "parent_id": "t1_c02a1i4", "score_hidden": false, "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 15, "author": "nglynn", "created_utc": "1192789130", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192799917", "ups": 4, "gilded": 0, "link_id": "t3_5ynb1", "retrieved_on": 1427426034, "score": 4, "score_hidden": false, "id": "c02a29e", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02a29e", "parent_id": "t1_c02a1oz", "body": "[deleted]", "author_flair_css_class": null}], "subreddit": "programming", "ups": 15, "name": "t1_c02a1oz", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ynb1", "retrieved_on": 1427426041, "score_hidden": false, "body": "...Didn't stop your father did it?\n\nWho'd have thought trolling felt so good :-)\n\n*Edit: Thank you Mr. Grammar Nazi*", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02a1i4", "id": "c02a1oz", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02a3g1", "gilded": 0, "link_id": "t3_5ynb1", "retrieved_on": 1427426019, "score": 1, "score_hidden": false, "id": "c02a3g1", "author": "ccshan", "created_utc": "1192811105", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c02a1i4", "body": "That's the difference between artifacts (chairs) and natural kinds (pigs).  Kids know this, and if you don't, it's time for you to take a class on lexical semantics.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02a1i4", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": -7, "link_id": "t3_5ynb1", "retrieved_on": 1427426044, "body": "You can put lipstick on a pig, but its still a pig.\n", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5ynb1", "id": "c02a1i4", "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427426042, "subreddit_id": "t5_2fwo", "created_utc": "1192788283", "name": "t1_c02a1nl", "gilded": 0, "link_id": "t3_5ynb1", "downs": 0, "score": 20, "score_hidden": false, "id": "c02a1nl", "author": "chak", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 20, "parent_id": "t3_5ynb1", "body": "The similarity to Haskell is not by accident.  Have a look at [Jeremy Siek](http://ece.colorado.edu/~siek/)'s papers, especially [Essential Language Support for Generic Programming](http://ece.colorado.edu/~siek/pubs/pubs/2005/siek05_fg_pldi.pdf).  He clearly knows FL type systems very well.", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 9, "author": "chrisforbes", "created_utc": "1192792468", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c02a4ts", "gilded": 0, "link_id": "t3_5ynb1", "retrieved_on": 1427426001, "score": 4, "body": "[deleted]", "author": "[deleted]", "created_utc": "1192823371", "distinguished": null, "edited": true, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "ups": 4, "parent_id": "t1_c02a1te", "score_hidden": false, "id": "c02a4ts"}], "subreddit": "programming", "ups": 9, "name": "t1_c02a1te", "controversiality": 0, "archived": true, "link_id": "t3_5ynb1", "retrieved_on": 1427426040, "score_hidden": false, "id": "c02a1te", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5ynb1", "body": "`... smell like Haskell type classes`\n\nOh no! This is, in fact, a GoodThing. Haskell type classes are DoingItRight.\n\nNow if only MS could see this and extend .NET generic constraints to be equally flexible. Then we'd be cooking with gas.", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -14, "author": "qwe1234", "created_utc": "1192793074", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192822811", "ups": 3, "gilded": 0, "link_id": "t3_5ynb1", "retrieved_on": 1427426002, "score": 3, "body": "That's because you're educated stupid and can't compute a Time Cube.\n\nSeek in haste to attend a lecture by Dr. Gene Ray, Cubic and Wisest Human - His Wisdom is Awesome.", "author": "deepcleansingguffaw", "archived": true, "distinguished": null, "edited": false, "id": "c02a4rv", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02a4rv", "parent_id": "t1_c02a1uc", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": -14, "name": "t1_c02a1uc", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ynb1", "retrieved_on": 1427426040, "score_hidden": false, "body": "haskell type classes smell like c++ concepts.\n", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5ynb1", "id": "c02a1uc", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 8, "author": "redditacct", "created_utc": "1192797777", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "archived": true, "ups": 4, "gilded": 0, "link_id": "t3_5ynb1", "retrieved_on": 1427426031, "score": 4, "id": "c02a2iw", "author": "Doctor", "created_utc": "1192803064", "distinguished": null, "edited": false, "body": "Go study your NLP. You are visual, author is olfactory. ;-)", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02a2iw", "parent_id": "t1_c02a23v", "score_hidden": false, "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "[deleted]", "created_utc": "1192809954", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "curtisb", "created_utc": "1192810991", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "thurston51", "created_utc": "1192815290", "children": [{"controversiality": 0, "retrieved_on": 1427426003, "subreddit_id": "t5_2fwo", "created_utc": "1192821744", "name": "t1_c02a4np", "gilded": 0, "link_id": "t3_5ynb1", "downs": 0, "score": 1, "score_hidden": false, "id": "c02a4np", "author": "KayEss", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c02a3w9", "body": "Actually I meant it ironically. I think it's a perfectly good thing :)\n\nType classes are very useful and to be able to specify the interface required by a template in terms of operations rather than interface is a very useful thing as it allows the logical operations to be specified rather than just the subset that happens to be used in the implementation (as happens now) - talk about leaky abstraction!", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 3, "name": "t1_c02a3w9", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ynb1", "retrieved_on": 1427426013, "score_hidden": false, "body": "I agree. It smells like the submitter is slanting things by suggesting subversive tactics on the part of the C++ designers.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02a3fo", "id": "c02a3w9", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02a3xo", "gilded": 0, "link_id": "t3_5ynb1", "retrieved_on": 1427426012, "score": 1, "id": "c02a3xo", "author": "gsg", "created_utc": "1192815756", "distinguished": null, "edited": false, "body": "I'm with sigfpe on this one. However fitting as a metaphor, 'code smells' is a clunky, ugly and unnatural phrase.", "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c02a3fo", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 3, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ynb1", "retrieved_on": 1427426019, "body": "I first saw mention of [code smells](http://www.c2.com/cgi/wiki/Wiki?CodeSmell) on the C2 Wiki, where the phrase is attributed to Kent Beck.  And the metaphor is *supposed* to sound a little bit unpleasant.  A code smell is an indication of code that needs to be refactored or otherwise improved.\n\nI think the poster's use of smell in the title has nothing to do with the code smell usage and is just common English usage that's probably been around for centuries.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02a3fo", "parent_id": "t1_c02a3br", "id": "c02a3fo", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02a3br", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 1, "link_id": "t3_5ynb1", "retrieved_on": 1427426020, "body": "[deleted]", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02a23v", "id": "c02a3br", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 8, "controversiality": 0, "archived": true, "link_id": "t3_5ynb1", "retrieved_on": 1427426036, "id": "c02a23v", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02a23v", "parent_id": "t3_5ynb1", "body": "Can we just say \"seem\" or is it because there isn't a noun form of seems?   \n  \nNew C++ concepts seem like Haskell type classes.", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -4, "author": "skraps", "created_utc": "1192801889", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 6, "author": "millstone", "created_utc": "1192816727", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "skraps", "created_utc": "1192820583", "children": [{"controversiality": 0, "retrieved_on": 1427425924, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02aasa", "gilded": 0, "link_id": "t3_5ynb1", "downs": 0, "score": 0, "score_hidden": false, "body": "[deleted]", "author": "[deleted]", "created_utc": "1192914312", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 0, "parent_id": "t1_c02a4iz", "id": "c02aasa", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02a4iz", "ups": 1, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ynb1", "retrieved_on": 1427426006, "score_hidden": false, "body": " That's not all there is to it.  The particular c# feature I was referring to is the one that allows you to write code like this:\n\n    class Set&lt;T&gt; where T:IComparable { ... }\n\nYou can have the compiler check that a generic argument meets certain requirements.  In c#, the requirements are given as an interface.  In the new C++ stuff, the requirements are given as a 'concept'.  The only difference is that in c#, a class has to intentionally implement an interface (same with type classes in Haskell), but in the new C++ stuff, a class can conform to a concept without making any reference to the concept. ", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02a41e", "id": "c02a4iz", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02a41e", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 6, "link_id": "t3_5ynb1", "retrieved_on": 1427426011, "body": "Nah.  C#'s interfaces are already subsumed by C++'s multiple inheritance.  This \"concepts\" notion is entirely in the template-world of C++, which is entirely alien to C#.\n\nC#'s closest feature is generics, which are pretty much only used in C# for better type checking of collections.  C++'s templates do a lot more.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02a2ff", "id": "c02a41e", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02a2ff", "score_hidden": false, "controversiality": 0, "archived": true, "ups": -4, "link_id": "t3_5ynb1", "retrieved_on": 1427426032, "id": "c02a2ff", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5ynb1", "body": "This actually looks a lot more like c# interfaces than Haskell type classes.  They're both similar to begin with, but this seems more like a c# ripoff than a Haskell ripoff.", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -1, "author": "[deleted]", "created_utc": "1192807044", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "sard", "created_utc": "1192811255", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "[deleted]", "created_utc": "1192811667", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "skew", "created_utc": "1192830452", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "[deleted]", "created_utc": "1192997413", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "KayEss", "created_utc": "1193198906", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "[deleted]", "created_utc": "1193204730", "children": [{"controversiality": 0, "retrieved_on": 1427425600, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02azsk", "gilded": 0, "link_id": "t3_5ynb1", "downs": 0, "score": 1, "score_hidden": false, "body": "Concepts are used for static checking so there is no runtime effect.\n\nThey provide another type checking mechanism (by making formal the implicit type constraints that template functions (be they free standing or part of a template class) require) and concepts should also help to make errors more readable.", "author": "KayEss", "created_utc": "1193213316", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c02azfm", "id": "c02azsk", "author_flair_css_class": null}], "subreddit": "programming", "ups": 1, "name": "t1_c02azfm", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ynb1", "retrieved_on": 1427425604, "score_hidden": false, "id": "c02azfm", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02az16", "body": "Alright, that doesn't sound bad.  I just wonder how it'll work at runtime - does translation account for that as well?  The article mentions overloading, so I'm not sure about runtime.\n\nTemplates only expand stuff, so once it's compiled, nothing happens anymore (except what the duplicated-duplicated code does).", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 1, "name": "t1_c02az16", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ynb1", "retrieved_on": 1427425610, "score_hidden": false, "id": "c02az16", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02afnx", "body": "&gt;Simply implement the interface\n\nThat's exactly what concepts do - they describe the interface without the implementing class needing to be aware of it.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 1, "controversiality": 0, "archived": true, "link_id": "t3_5ynb1", "retrieved_on": 1427425860, "id": "c02afnx", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02afnx", "parent_id": "t1_c02a5qq", "body": "Or a wrapper that uses a string.  Of course that's why OOP should be done with functions and interfaces, not with classes and inheritance.\n\nSimply *implement* the interface (its functions) for the type string and you're all set.  Too bad that doesn't work in Java, C++, and friends.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 3, "name": "t1_c02a5qq", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ynb1", "retrieved_on": 1427425989, "score_hidden": false, "body": "string doesn't implement your fancy new interface, but you can define a concept that accepts string.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02a3iu", "id": "c02a5qq", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 0, "controversiality": 0, "archived": true, "link_id": "t3_5ynb1", "retrieved_on": 1427426018, "id": "c02a3iu", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02a3iu", "parent_id": "t1_c02a3h0", "body": "Why that?  If I call something with a typed/constrained parameter, I have to provide appropriate values.  This holds true for templates as well as for Java methods/classes.", "author_flair_css_class": null}], "subreddit": "programming", "ups": 2, "name": "t1_c02a3h0", "controversiality": 0, "archived": true, "link_id": "t3_5ynb1", "retrieved_on": 1427426018, "score_hidden": false, "id": "c02a3h0", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02a2zi", "body": "Interfaces put the burden on the callee, C++ concepts put it on the caller.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": -1, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ynb1", "retrieved_on": 1427426025, "body": "Why, it's just generic programming (ok, not really, but *templates*) with type constraints, i.e., restricted polymorphism.\n\nSeems like a pretty normal idea to me, good, but not outstanding in a way like it takes a genius (or a Haskell wizard).\n\nJava and probably C# also allow you to constrain type variables, like \"class &lt;T implements Bla&gt;\", which is very similar to TFA's concepts.  Whooohoo, interfaces are clearly something that turns my whole world upside down.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02a2zi", "parent_id": "t3_5ynb1", "id": "c02a2zi", "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427426012, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02a3xh", "gilded": 0, "link_id": "t3_5ynb1", "downs": 0, "score": 1, "score_hidden": false, "id": "c02a3xh", "author": "[deleted]", "created_utc": "1192815703", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t3_5ynb1", "body": "[deleted]", "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427426012, "subreddit_id": "t5_2fwo", "created_utc": "1192816084", "ups": 1, "gilded": 0, "link_id": "t3_5ynb1", "downs": 0, "score": 1, "body": "[deleted]", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "id": "c02a3z3", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02a3z3", "parent_id": "t3_5ynb1", "score_hidden": false, "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192816098", "name": "t1_c02a3z6", "gilded": 0, "link_id": "t3_5ynb1", "retrieved_on": 1427426012, "score": 1, "score_hidden": false, "id": "c02a3z6", "author": "[deleted]", "archived": true, "distinguished": null, "edited": true, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t3_5ynb1", "body": "[deleted]", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -2, "author": "Odysseus", "created_utc": "1192816174", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 4, "author": "[deleted]", "created_utc": "1192817490", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "Odysseus", "created_utc": "1192821881", "children": [{"controversiality": 0, "retrieved_on": 1427425998, "subreddit_id": "t5_2fwo", "created_utc": "1192825121", "ups": 2, "gilded": 0, "link_id": "t3_5ynb1", "downs": 0, "score": 2, "body": "&gt; My complaint is strictly with the syntax.\n\nEveryone has his or her [bikeshed](http://www.freebsd.org/doc/en_US.ISO8859-1/books/faq/misc.html#BIKESHED-PAINTING) :)", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "id": "c02a52f", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02a52f", "parent_id": "t1_c02a4o8", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": 3, "name": "t1_c02a4o8", "controversiality": 0, "archived": true, "link_id": "t3_5ynb1", "retrieved_on": 1427426003, "score_hidden": false, "id": "c02a4o8", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02a44s", "body": "My complaint is strictly with the syntax.  They have:\n\n    template&lt;typename T&gt;\n    requires Numeric&lt;T&gt;\n\nwhen they could just as well have:\n\n    template&lt;Numeric T&gt;\n\nAnd unless they have other plans for the **requires** keyword, it smells unnecessary, even recognizing that you could in this case **require** more than one **concept**.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 4, "controversiality": 0, "archived": true, "link_id": "t3_5ynb1", "retrieved_on": 1427426010, "id": "c02a44s", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02a44s", "parent_id": "t1_c02a3zh", "body": "&gt; And c++ grows farther from what made c beautiful.\n\nIf you think it's beautiful to be unable to define powerful and useful abstract data types, then I think we're just going to have to agree to disagree.  I find nothing beautiful about C's inability to define typesafe parameterized datatypes.", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "[deleted]", "created_utc": "1192828609", "children": [{"controversiality": 0, "retrieved_on": 1427425942, "subreddit_id": "t5_2fwo", "created_utc": "1192892228", "ups": 1, "gilded": 0, "link_id": "t3_5ynb1", "downs": 0, "score": 1, "body": "C has wabi-sabi.", "author": "pjdelport", "archived": true, "distinguished": null, "edited": false, "id": "c02a9dv", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02a9dv", "parent_id": "t1_c02a5iu", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02a5iu", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 0, "link_id": "t3_5ynb1", "retrieved_on": 1427425992, "id": "c02a5iu", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02a3zh", "body": "[deleted]", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02a3zh", "ups": -2, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ynb1", "retrieved_on": 1427426012, "score_hidden": false, "body": " And c++ grows farther from what made c beautiful.  Oh, the semantics here are nice.  But except for some ambiguity -- is Numeric a type or a typeclass? -- that is indeed quite familiar to c, this seems good:\n\n    template &lt;Numeric T&gt;\n\nAnd if there were any fear of ambiguity, they could do what once was done for structs:\n\n    template &lt;typename Numeric T&gt; ", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5ynb1", "id": "c02a3zh", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c02a4up", "gilded": 0, "link_id": "t3_5ynb1", "retrieved_on": 1427426001, "score": -3, "body": "[deleted]", "author": "[deleted]", "created_utc": "1192823568", "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "ups": -3, "parent_id": "t3_5ynb1", "score_hidden": false, "id": "c02a4up"}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "grauenwolf", "created_utc": "1193383011", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 4, "author": "avibryant", "created_utc": "1193384366", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "grauenwolf", "created_utc": "1193385012", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "mykdavies", "created_utc": "1193396759", "children": [{"controversiality": 0, "retrieved_on": 1427425315, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02bgau", "gilded": 0, "link_id": "t3_5z57p", "downs": 0, "score": 4, "score_hidden": false, "id": "c02bgau", "author": "mykdavies", "created_utc": "1193401211", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 4, "parent_id": "t1_c02bg1r", "body": "How odd. stkni just posted this article http://programming.reddit.com/info/5z5rk/comments/ which has a link to the following paper on just this topic by Christian Queinnec, a CS professor at Universit\u00e9 Pierre et Marie Curie:\n\nhttp://www.double.co.nz/pdf/inverting-back-the-inversion.pdf", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02bg1r", "ups": 2, "controversiality": 0, "archived": true, "link_id": "t3_5z57p", "retrieved_on": 1427425318, "score_hidden": false, "id": "c02bg1r", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bfjz", "body": "Seaside (seaside.st) is a continuation-based web framework that has been widely adopted in the Smalltalk world, and used to build some complex commercial apps. \n\nIt's difficult to find a rigourous exposition of the case for and against its use of continuations, but Avi Bryant has this to say about its use in building http://dabbledb.com - \"The degree to which a stateful component system increases the modularity, and thus the maintainability, of your code base is huge. That means that the richness and sophistication of the applications you can build goes way up. There is just no way that we could have built something with the complexity of Dabble -- at least I couldn't have -- with a kind of stateless, REST-ful style of web framework.\"", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 5, "author": "avibryant", "created_utc": "1193420128", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "grauenwolf", "created_utc": "1193421188", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "avibryant", "created_utc": "1193470814", "children": [{"controversiality": 0, "retrieved_on": 1427425210, "subreddit_id": "t5_2fwo", "archived": true, "score": 1, "link_id": "t3_5z57p", "downs": 0, "name": "t1_c02bof6", "created_utc": "1193508644", "score_hidden": false, "id": "c02bof6", "author": "grauenwolf", "author_flair_text": null, "distinguished": null, "edited": false, "gilded": 0, "subreddit": "programming", "ups": 1, "parent_id": "t1_c02bmpb", "body": "While I agree to a point, I still caution against not introducing any more server-side state than you absolutely need.\r\n\r\nAs an ASP programmer, I rank state as follows.\r\n\r\n1. JavaScript variables\r\n2. Query strings\r\n3. View State\r\n4. Session State\r\n5. Application globals\r\n\r\nFor me to put something in session state, I have to first prove that I cannot handle it in javaScript, query strings, or view state.\r\n\r\n(Note that cookies are not included because they kill performance. Cookies get auto-signon info and nothing else.)\r\n\r\nFor continuations, it seems to me one is jumping all the way to step 4 without considering steps 1-3.\r\n", "author_flair_css_class": null}], "subreddit": "programming", "ups": 2, "score_hidden": false, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z57p", "retrieved_on": 1427425233, "body": "Ok, so this is a scalability argument.  That's valid - on the same hardware, a stateless web application will almost certainly be able to support more concurrent users than a highly stateful one.\n\nOn the other hand, with the same development team, a stateful web application will acquire more and better features faster than a stateless one will.\n\nIf you're building a simple, high volume (ad-supported) web app/site, the economics of statelessness might make sense.  For a complex, subscription-based web application, development costs swamp hardware costs, and stateful strategies - high memory use, locking overhead, and all - are, in my experience, extremely worthwhile.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02bmpb", "parent_id": "t1_c02bijo", "id": "c02bmpb", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02bijo", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 1, "link_id": "t3_5z57p", "retrieved_on": 1427425285, "body": "&gt; What is a \"last page\" variable in the session if not state? And doesn't that state have precisely the same concurrency issues any more sophisticated representation might?\r\n\r\nYes, it would. My point was that you can get the same effect for a much lower memory cost. This doesn't change my position that you should avoid both methods if at all possible.\r\n\r\n&gt; As for \"they can even request the same page multiple times simutaneously\" - at least as a thought experiment, how bad would it be if all of the requests from a single user were serialized at the server?\r\n\r\nThere would be a high cost for enforcing that in terms of locking, which in turn impacts scalability. Ideally no web request should know about any other request.\r\n", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02biei", "id": "c02bijo", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 5, "name": "t1_c02biei", "controversiality": 0, "archived": true, "link_id": "t3_5z57p", "retrieved_on": 1427425287, "score_hidden": false, "id": "c02biei", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bfjz", "body": "What is a \"last page\" variable in the session if not state?  And doesn't that state have precisely the same concurrency issues any more sophisticated representation might?\n\nApplications have state, and the fact that they are delivered over the \"stateless\" HTTP protocol does not and cannot change that.  You can either store that state on the client and transmit it on every request, or you can store that state on the server and transmit an identifier (like a session key, but more specific) that opaquely represents it.  This latter is more efficient, more secure, and (I would claim) leads to more modular, maintainable, productive code.\n\nAs for \"they can even request the same page multiple times simutaneously\" - at least as a thought experiment, how bad would it be if all of the requests from a single user were serialized at the server?  That is, how many users will truly require and expect those requests to be processed concurrently, and in which cases?", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02bfjz", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 2, "link_id": "t3_5z57p", "retrieved_on": 1427425324, "id": "c02bfjz", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bfiy", "body": "Because it isn't stateful. Users can request pages in any order at any time. They can even request the same page multiple times simutaneously.\r\n\r\nThe continuation model is just begging for concurrency issues, let alone the high memory cost for storing all that state. And for what? A simple \"last page\" variable in the session is cheap.\r\n\r\nMaybe I'm missing something, but everywhere I look I see red flags.", "author_flair_css_class": null}], "subreddit": "programming", "ups": 4, "score_hidden": false, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z57p", "retrieved_on": 1427425326, "body": "Ok, I guess I'll bite.  Why is it a really bad idea?", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02bfiy", "parent_id": "t1_c02bfgu", "id": "c02bfiy", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02bfgu", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 2, "link_id": "t3_5z57p", "retrieved_on": 1427425326, "id": "c02bfgu", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5z57p", "body": "As soon as someone starts talking about mixing continuations and web sites, I walk away. While I can see some advantages to using continuations, pretending that web-page requests are stateful is a really bad idea.", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 6, "gilded": 0, "link_id": "t3_5z57p", "retrieved_on": 1427425295, "score": 6, "body": " ObQwe1234:\n\n&gt; why are functional programmers so confused? i'd honestly like to know.\n\n&gt; the stack is not a linked list and there's a very good technical reason why this is so. one intrinsic property of the stack is it never ever ever needs garbage collection. (neither does a programmer who knows what he's doing)", "author": "bitwize", "created_utc": "1193415664", "distinguished": null, "edited": true, "id": "c02bhsm", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02bhsm", "parent_id": "t3_5z57p", "score_hidden": false, "author_flair_css_class": null}
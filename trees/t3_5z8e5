{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 8, "author": "Mr_Smartypants", "created_utc": "1193484032", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "[deleted]", "created_utc": "1193484800", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -3, "author": "MarshallBanana", "created_utc": "1193486878", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 6, "author": "[deleted]", "created_utc": "1193487093", "children": [{"controversiality": 0, "retrieved_on": 1427425216, "subreddit_id": "t5_2fwo", "author_flair_text": null, "name": "t1_c02bo0m", "gilded": 0, "link_id": "t3_5z8e5", "downs": 0, "score": 2, "score_hidden": false, "id": "c02bo0m", "author": "throwaway1234", "created_utc": "1193503256", "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "ups": 2, "parent_id": "t1_c02bn6h", "body": "Objective-C is great with Cocoa. It's just a match made in heaven. In that respect, Cocoa has it right in that it never asks you to sort shit like this. It does it the way a good UI library should: automatically.\n\n Now, is Obj-C good for implementing deep down code? I'm not sure.", "author_flair_css_class": null}, {"controversiality": 0, "id": "c02brxw", "subreddit": "programming", "author_flair_text": null, "ups": 1, "gilded": 0, "link_id": "t3_5z8e5", "retrieved_on": 1427425165, "score": 1, "body": "In Cocoa, you can use an NSIndexSet, which is an ordered set of (huh!) indices. You can iterate through the indices in either order:\n\n\tfor (unsigned idx = [myIndexSet firstIndex], last = [myIndexSet lastIndex];\n\t     idx &lt;= last;\n\t     idx = [myIndexSet indexGreaterThanIndex:idx]\n\t) {\n\t\t//do magic\n\t}\n\nFor preparation, just slurp them with a loop like this:\n\n\tunsigned indices[], numIndices;\n\tNSMutableIndexSet *myIndexSet = [NSMutableIndexSet indexSet];\n\tfor (unsigned idx = 0U;\n\t     idx &lt; numIndices;\n\t     ++idx\n\t) {\n\t\t[myIndexSet addIndex:indices[idx]];\n\t}\n\nI leave it as an exercise for the reader to figure out how many indices you need to have for this to be truly more efficient than simply sorting the array. On the other hand, you can use an NSIndexSet throughout Cocoa, whereas you can't use an array of indices anywhere in Cocoa.\n", "author": "boredzo", "created_utc": "1193562346", "downs": 0, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "score_hidden": false, "parent_id": "t1_c02bn6h", "name": "t1_c02brxw", "author_flair_css_class": null}], "subreddit": "programming", "ups": 6, "name": "t1_c02bn6h", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z8e5", "retrieved_on": 1427425225, "score_hidden": false, "body": "[deleted]", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02bn67", "id": "c02bn6h", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 5, "author": "[deleted]", "created_utc": "1193513726", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -1, "author": "MarshallBanana", "created_utc": "1193514343", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "author_flair_text": null, "name": "t1_c02bp1i", "gilded": 0, "link_id": "t3_5z8e5", "retrieved_on": 1427425202, "score": 15, "score_hidden": false, "id": "c02bp1i", "author": "Mr_Smartypants", "created_utc": "1193516074", "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "ups": 15, "parent_id": "t1_c02bows", "body": "Presumably, so they would be in order...", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": -1, "name": "t1_c02bows", "controversiality": 0, "archived": true, "link_id": "t3_5z8e5", "retrieved_on": 1427425205, "score_hidden": false, "id": "c02bows", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bov7", "body": "Why?", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "name": "t1_c02bov7", "controversiality": 0, "author_flair_text": null, "ups": 5, "link_id": "t3_5z8e5", "retrieved_on": 1427425204, "body": "A few weeks ago.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02bn67", "id": "c02bov7", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02bn67", "ups": -3, "controversiality": 0, "archived": true, "link_id": "t3_5z8e5", "retrieved_on": 1427425226, "score_hidden": false, "id": "c02bn67", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bn4g", "body": "When did you ever sort an array of ints, honestly?", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "Mr_Smartypants", "created_utc": "1193489880", "children": [{"controversiality": 0, "retrieved_on": 1427425165, "subreddit_id": "t5_2fwo", "created_utc": "1193561939", "ups": 1, "gilded": 0, "link_id": "t3_5z8e5", "downs": 0, "score": 1, "body": "&gt; I don't get it. Objective-C has templates?\n\nI think that was his point: No.", "author": "boredzo", "author_flair_text": null, "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit": "programming", "name": "t1_c02brxf", "parent_id": "t1_c02bna1", "score_hidden": false, "id": "c02brxf"}], "subreddit": "programming", "ups": 3, "name": "t1_c02bna1", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z8e5", "retrieved_on": 1427425224, "score_hidden": false, "id": "c02bna1", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02bn4g", "body": "I don't get it.  Objective-C has templates?\n\nAnd, yes, I do get tired of copy, paste, s/float/double.", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 1, "gilded": 0, "link_id": "t3_5z8e5", "retrieved_on": 1427425222, "score": 1, "id": "c02bnfg", "author": "norkakn", "created_utc": "1193492966", "distinguished": null, "edited": false, "body": "You don't even need to do that in C.", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02bnfg", "parent_id": "t1_c02bn4g", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193508945", "name": "t1_c02boga", "gilded": 0, "link_id": "t3_5z8e5", "retrieved_on": 1427425210, "score": 2, "score_hidden": false, "id": "c02boga", "author": "crusoe", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 2, "parent_id": "t1_c02bn4g", "body": "Why use templates though? They're the only cure that static compile time typechecking allows. It's a bloated solution to a problem caused by static time typechecking. That, and typing lots and lots of casts.\n\nIf yer gonna staticly type a language at compile, could they at LEAST give us some type inferencing? \n\nMore dynamic languages allow you manipulate types more fluidly. And due a rich exception handling hierarchy, and other tools, you just write flexible code that can handle the errors elegantly. \n\nThe whole collection classes stink of Java 1.4 and previous doesn't exist in more dynamic languages like Python, SmallTalk, or ObjC. Nor do they need the hell that is a templating system.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "name": "t1_c02bn4g", "controversiality": 0, "archived": true, "ups": 3, "link_id": "t3_5z8e5", "retrieved_on": 1427425226, "id": "c02bn4g", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bn3p", "body": "[deleted]", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 29, "author": "millstone", "created_utc": "1193485374", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 5, "author": "shit", "created_utc": "1193505853", "children": [{"controversiality": 0, "retrieved_on": 1427425190, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02bpwl", "gilded": 0, "link_id": "t3_5z8e5", "downs": 0, "score": 4, "score_hidden": false, "id": "c02bpwl", "author": "millstone", "created_utc": "1193527749", "distinguished": null, "edited": true, "author_flair_text": null, "subreddit": "programming", "ups": 4, "parent_id": "t1_c02bo7w", "body": "  Yes!  Wow, thanks for pointing that out.  I think that is in fact an error on the page.\n\nTo go into a little more detail:\n\n1. The GC uses type information to only scan pointer fields within objects.  It does not scan, e.g. int fields.\n2. Bulk memory you allocate (e.g. with malloc) is unscanned and uncollectable by default.  (You can request a conservatively scanned and/or collectable block.)\n3. The stack(s) are scanned conservatively.\n\n\nSo 1 and 2 are why I said it was exact; I'm not sure why the page says it is conservative.  ", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 5, "controversiality": 0, "archived": true, "link_id": "t3_5z8e5", "retrieved_on": 1427425212, "id": "c02bo7w", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02bo7w", "parent_id": "t1_c02bn4t", "body": "&gt; with a really good garbage collector - one that's multithreaded, generational, and exact\n\nThe article says:\n\n&gt; Going one step further, the Objective-C 2.0 garbage collector is implemented as a conservative collector.\n\nIsn't a conservative GC the opposite of exact?", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02bn4t", "ups": 29, "controversiality": 0, "archived": true, "link_id": "t3_5z8e5", "retrieved_on": 1427425226, "score_hidden": false, "id": "c02bn4t", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02bn3p", "body": " Objective-C's strength is that it enables great frameworks.  Cocoa is a truly great framework, and many of its features - distributed objects, key-value observing, the undo manager, etc. - would not be possible in most other languages.\n\nBefore ObjC 2.0, I would have said that ObjC by itself, independent of frameworks, isn't very compelling.  But ObjC 2.0 changes that, and here's why:\n\nObjective-C is now the only C-superset language with a really good garbage collector - one that's multithreaded, generational, and exact.  (A GC like Boehm, while useful, can't be as clever as Apple's collector, because Boehm doesn't control the compiler or runtime.)  And the collector will be open sourced along with the rest of the ObjC runtime, so it could be ported to other platforms. ", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 25, "author": "throwaway1234", "created_utc": "1193502131", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02bof3", "gilded": 0, "link_id": "t3_5z8e5", "retrieved_on": 1427425210, "score": 4, "id": "c02bof3", "author": "crusoe", "created_utc": "1193508623", "distinguished": null, "edited": false, "body": "Sounds like Smalltalk.... ;)\n\nI wrote a AI project in Smalltalk, almost everyone else used C++/MVC. We had 4 weeks to do, and me and my lab partner could only really work together on the weekend. So in 8 days, we developed a program that worked correctly within the spec, and had a user interface. Everyone else was lucky to have a working program.\n\nIf they've tightened up the syntax, sounds great. I remember it being a bit weird and ugly.\n", "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 4, "parent_id": "t1_c02bnxg", "score_hidden": false, "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 10, "author": "[deleted]", "created_utc": "1193513664", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 4, "author": "throwaway1234", "created_utc": "1193530632", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "[deleted]", "created_utc": "1193535913", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193537963", "name": "t1_c02bql9", "gilded": 0, "link_id": "t3_5z8e5", "retrieved_on": 1427425181, "score": 1, "score_hidden": false, "body": " You get warnings in the most obvious of cases. \n\n But the point is that the messages get *sent* to an object. And sending an object a message that it might not recognize is syntactically legal. A runtime error can get generated, but then again, it might not.\n\n It might not be interesting in cases where your variable is of a known class type, but it sure is for objects of type (id).\n\n In other words, it allows you to receive a void* reference, and call its toString method. \n\n Returning to my original post: if your application is structured properly, a method can receive a bunch of objects only loosely related to one another in that they all have a toString method. No need to create a base class to define *just* the ToStringableNess of the object.\n\n You can even in your method determine without sending the message if a particular object (of type id) supports the selector you want to try out. You can also catch its exception gracefully. The type of things that can be done is in a different ball game than \"unimplemented C++ methods\".\n\n This is infinitely more practical and useable than say creating even the simplest of traits in templated C++.\n\n Edit: It also means that I can easily reuse many objects from project to project without having to carry around huge inheritence trees. I can attest to this from personal experience. I've never reused so much code so easily in my life.", "author": "throwaway1234", "archived": true, "distinguished": null, "edited": true, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c02bqgk", "id": "c02bql9", "author_flair_css_class": null}], "subreddit": "programming", "ups": 1, "name": "t1_c02bqgk", "controversiality": 0, "archived": true, "link_id": "t3_5z8e5", "retrieved_on": 1427425184, "score_hidden": false, "id": "c02bqgk", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bq4s", "body": "&gt; Yes, I meant to say compiles\n\nI dunno about that, you get a compiler warning.  I work to remove all compiler warnings as a matter of habit.  Sure, they are mostly innocuous, though some are very severe.  I don't want warnings to become noise.", "author_flair_css_class": null}], "subreddit": "programming", "ups": 4, "name": "t1_c02bq4s", "controversiality": 0, "archived": true, "link_id": "t3_5z8e5", "retrieved_on": 1427425188, "score_hidden": false, "id": "c02bq4s", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02boux", "body": "  &gt;I hate this feature. It has wasted me hours of debugging time in Obj-C. I wish sending a message to null would be an exception, just like..\n\n You wasted that time because either you didn't know about the feature, or your program structure *inadvertantly* had null objects. Either way, when a program is designed with the feature in mind it's not a problem. It's in fact the reason why Cocoa works so well: it's the concept of Outlets. They can be null and the program is still correct.\n\n&gt;Sending a message to a class which does not define it raises an exception in Obj-C.\n\n Yes, I meant to say compiles. Not runs. However, the exception comes from the base class NSObject which every object inherits from. The NSObject actively raises the exception when it handles a selector it doesn't recognize. As I mentionned, this can be overriden at runtime.\n\n  It's in essence very different from an unimpletmented function being called in C++.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 10, "score_hidden": false, "controversiality": 0, "archived": true, "link_id": "t3_5z8e5", "retrieved_on": 1427425204, "id": "c02boux", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02boux", "parent_id": "t1_c02bnxg", "body": "&gt; 1) I can send a message to a null object - the equivalent of null-&gt;foo()\n\nI hate this feature. It has wasted me hours of debugging time in Obj-C. I wish sending a message to null would be an exception, just like...\n\n&gt; 2) I can send a message to an object which doesn't have a certain method (result: nothing)\n\nSending a message to a class which does not define it raises an exception in Obj-C.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 25, "name": "t1_c02bnxg", "controversiality": 0, "archived": true, "link_id": "t3_5z8e5", "retrieved_on": 1427425217, "score_hidden": false, "id": "c02bnxg", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02bn3p", "body": "  Objective-C is awesomeness.\n\n It's a mashup of small talk and C.  Getting its most important features from the Small Talk like message passing.\n\n Really, it's just a visual hack as Objective-C is nothing more than C with a very very light compiler added runtime.\n\n The biggest feature is that objects have methods. But these methods aren't called. They are sent messages.\n\n This means among other things that:\n1) I can send a message to a null object - the equivalent of null-&gt;foo() \n2) I can send a message to an object which doesn't have a certain method (result: nothing)\n3) I can create a special method on an object to handle all messages that weren't responded to. Meaning, a function that catches invalid function calls.\n\n This might all look like a haxxor's dream or academic excercise crap, but I assure you: it's cream. I've never implemented a program so close to the MVC model as I have when using Obj-C.\n\n You can create an entire UI without writing a single line of code. And no, this is not MFC style \"creating\"... there's literally not a single line of code being written.  It works because the UI can pass messages to objects even though they're nil. And it still behaves properly.\n\n I used to be a big C++ fan with Boost, ATL and STL... I love templating. It's very powerful. But at the same time, the amount of work done in implementing a simple trait is just not worth it. You can easily do this using an ObjC class that delegates for example... Create a class with 1 single method, encapsulate a string class inside, catch *all* unhandled function calls and send them to the string. Change that one function's behaviour.\n\n What do you have? Cream.\n\n\n You can check out a book by \"Big Nerd Ranch\"... It's about building Cocoa apps. Very nice introduction.\n", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193504628", "name": "t1_c02bo48", "gilded": 0, "link_id": "t3_5z8e5", "retrieved_on": 1427425213, "score": -6, "score_hidden": false, "id": "c02bo48", "author": "JimJones", "author_flair_text": null, "distinguished": null, "edited": true, "archived": true, "subreddit_id": "t5_2fwo", "ups": -6, "parent_id": "t1_c02bn3p", "body": " Objective-C gives you the worse of both C and smalltalk in a package that only a Mactard could like. Only on the Mac world could something as crappy as objective-c be adored the way it is. ", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425212, "subreddit_id": "t5_2fwo", "created_utc": "1193505890", "ups": 12, "gilded": 0, "link_id": "t3_5z8e5", "downs": 0, "score": 12, "id": "c02bo81", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "body": "The syntax is a bit weird, but named arguments make up for it. You never doubt whether it's copy(from,to) or copy(to,from). Instead you have [copy from:path to:path] and it's all auto-completed by XCode, so verbosity is not a problem.\r\n\r\nReflection is a big thing. Instead of long class hierarchies or bunch of interfaces, you can just check if given object has given method. It's often used for \"delegates\" (you give your object (any object) to other class and it can listen to callbacks by implementing methods you're intereseted in)\r\n\r\nIt's faster and lighter than Java. It can run without VM and you can use C whenever you feel you need performance, but when you stick to the ObjC side (with GC in 2.0) it's a nice high(ish)-level language without chores of memory management.\r\n\r\nIt's simpler than C++. http://yosefk.com/c++fqa/ and has more flexible object model. You can add methods to existing classes! (like in Ruby)\r\nFor example you might want system's NSString to have convertToHTML method -- no problem. Declare it and it will work for every string, even ones created outside your program. No upcasts needed.\r\n", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02bo81", "parent_id": "t1_c02bn3p", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 8, "name": "t1_c02bn3p", "controversiality": 0, "archived": true, "link_id": "t3_5z8e5", "retrieved_on": 1427425226, "score_hidden": false, "id": "c02bn3p", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5z8e5", "body": "Anyone here use Objective-C?\n\nIs it any good?", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "Kolibri", "created_utc": "1193492316", "children": [{"controversiality": 0, "retrieved_on": 1427425221, "subreddit_id": "t5_2fwo", "created_utc": "1193495102", "ups": 3, "gilded": 0, "link_id": "t3_5z8e5", "downs": 0, "score": 3, "id": "c02bnjh", "author": "chucker", "archived": true, "distinguished": null, "edited": false, "body": "You might as well compare Perl, Ruby and Python.\n\nOne obvious difference between all three: ObjC is a superset of C, C++ takes some but not all components from C and Java is merely inspired by C.", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02bnjh", "parent_id": "t1_c02bne7", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 1, "gilded": 0, "link_id": "t3_5z8e5", "retrieved_on": 1427425221, "score": 1, "body": "When in doubt:\n\nhttp://en.wikipedia.org/wiki/Comparison_of_programming_languages", "author": "mindvault", "created_utc": "1193496677", "distinguished": null, "edited": false, "id": "c02bnm9", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02bnm9", "parent_id": "t1_c02bne7", "score_hidden": false, "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "throwaway1234", "created_utc": "1193503306", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193534400", "ups": 5, "gilded": 0, "link_id": "t3_5z8e5", "retrieved_on": 1427425184, "score": 5, "score_hidden": false, "body": "Yep - note that one of these is self documenting - the other not.", "author": "cyancynic", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02bqd2", "parent_id": "t1_c02bo0p", "id": "c02bqd2", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 1, "gilded": 0, "link_id": "t3_5z8e5", "retrieved_on": 1427425168, "score": 1, "id": "c02brmv", "author": "panic", "created_utc": "1193555720", "distinguished": null, "edited": false, "body": "Or, `objc_msgSend(foo, \"foo:bar:\", foo1, bar1);`.\n", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02brmv", "parent_id": "t1_c02bo0p", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02bo0p", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 1, "link_id": "t3_5z8e5", "retrieved_on": 1427425216, "body": " Obj-C is highly inspired by small talk. With syntax like this:\n\n[obj foo:foo1 bar: bar2];\n\nmeaning:\n\nobj-&gt;foo( foo1, bar2 );", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02bne7", "id": "c02bo0p", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1193517676", "ups": 8, "gilded": 0, "link_id": "t3_5z8e5", "retrieved_on": 1427425199, "score": 8, "body": " Good, Horrible, Lame, respectively.\n\nI should mention that Objective-C is an extension to C.  There is also Objective C++ - an extension to C++.  This means that both C++ constructs and Objective C constructs can live in the same file.  The object systems are totally separate though - there is no relationship between a C++ class and and Objective C class.  However, an Objective C class can contain and use a C++ class and vice versa.  This makes integration of Cocoa UI with legacy C or C++ libraries really easy and nice.\n \n\n\n", "author": "cyancynic", "author_flair_text": null, "distinguished": null, "edited": true, "author_flair_css_class": null, "archived": true, "subreddit": "programming", "name": "t1_c02bp6l", "parent_id": "t1_c02bne7", "score_hidden": false, "id": "c02bp6l"}], "subreddit": "programming", "ups": 1, "name": "t1_c02bne7", "controversiality": 0, "archived": true, "link_id": "t3_5z8e5", "retrieved_on": 1427425223, "score_hidden": false, "id": "c02bne7", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5z8e5", "body": "What's the difference between Objective-C, C++, and Java?", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "ealf", "created_utc": "1193501454", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "throwaway1234", "created_utc": "1193503437", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "ealf", "created_utc": "1193513265", "children": [{"controversiality": 0, "retrieved_on": 1427425190, "subreddit_id": "t5_2fwo", "created_utc": "1193527877", "ups": 6, "gilded": 0, "link_id": "t3_5z8e5", "downs": 0, "score": 6, "body": "It is a typo.", "author": "millstone", "author_flair_text": null, "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit": "programming", "name": "t1_c02bpx1", "parent_id": "t1_c02botv", "score_hidden": false, "id": "c02bpx1"}], "subreddit_id": "t5_2fwo", "ups": 3, "name": "t1_c02botv", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5z8e5", "retrieved_on": 1427425204, "score_hidden": false, "body": " Agreed.", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02bo14", "id": "c02botv", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02bo14", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 3, "link_id": "t3_5z8e5", "retrieved_on": 1427425214, "body": "I hope it's a typo.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02bnvx", "id": "c02bo14", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02bnvx", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 3, "link_id": "t3_5z8e5", "retrieved_on": 1427425217, "body": " [bill setLocation:@\"Home\"];\nvs\nbill.location = \"Home\";\n\nNote that the @ is gone -- there's no mention of type DWIMmery in the article. Are constant C strings automatically converted to NSStrings now, or is this handled as part of the accessor magic?", "archived": true, "distinguished": null, "edited": true, "parent_id": "t3_5z8e5", "id": "c02bnvx", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": 5, "gilded": 0, "link_id": "t3_5z8e5", "retrieved_on": 1427425184, "score": 5, "body": "This is the best:\n\n    NSArray *array = \n        [NSArray arrayWithObjects:@\"1\", @\"2\", @\"3\", nil];\n\n    for (NSString *string in array) {\n        NSLog(@\"string is %@\", string);\n    }\n\nInitializing NSEnumerators to loop on arrays or dictionaries is pretty god damn tedious.", "author": "[deleted]", "created_utc": "1193536360", "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02bqhm", "parent_id": "t3_5z8e5", "score_hidden": false, "id": "c02bqhm"}
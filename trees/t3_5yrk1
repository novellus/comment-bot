{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 6, "author": "hoijarvi", "created_utc": "1192983232", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "[deleted]", "created_utc": "1193031564", "children": [{"distinguished": null, "controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193063244", "name": "t1_c02ak0m", "gilded": 0, "link_id": "t3_5yrk1", "retrieved_on": 1427425804, "score": 1, "score_hidden": false, "id": "c02ak0m", "author": "froydnj", "archived": true, "author_flair_text": null, "edited": true, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c02aid0", "body": "&gt; x86 code puts all arguments in registers, which really deoptimizes small functions, i.e., encourages you to make functions larger than one or two lines, and that's just as much a fault of the System V ABI as it is the fault of some idiots following it for everything (you wouldn't have to do it for non-escaping static functions, for instance).\n\n..and this is exactly what modern day GCC is capable of doing.\n\nEDIT: Actually, my GCC 3.4.4 is capable of doing this, so it's obviously been there for quite a while...", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 2, "name": "t1_c02aid0", "controversiality": 0, "archived": true, "link_id": "t3_5yrk1", "retrieved_on": 1427425825, "score_hidden": false, "id": "c02aid0", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02ael0", "body": "Funny, I've looked at gcc output in I think 2000, and since then every few years.  I've always been appalled by the quality of output.\n\nInterestingly, on PPC the code seemed better than on x86, yet it ran slower than an x86 with *slower* clock frequency (G4 compared to P3).\n\nx86 code puts all arguments in registers, which really deoptimizes small functions, i.e., encourages you to make functions larger than one or two lines, and that's just as much a fault of the System V ABI as it is the fault of some idiots following it for *everything* (you wouldn't have to do it for non-escaping static functions, for instance).\n\nIn general, there's often a lot of stuff going on, and I have no idea why gcc is doing that.  Simple register allocation coupled with common-sense instruction selection would  already do a much better job.\n\nSo yes, I learned assembly, for several architectures.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02ael0", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 6, "link_id": "t3_5yrk1", "retrieved_on": 1427425874, "id": "c02ael0", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5yrk1", "body": "In 1985 I wrote a laser printer driver in VAX Pascal. It had a lot bitmap array processing and I was sure I could speed it up with assembly.\n\nAfter looking into the assembly listing, I decided never to use assembly again. The code was incredibly good, every intermediate variable was in the registers.\n\nSince then this article is the first thing that makes me rethink my decision. \n", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1192989660", "name": "t1_c02af1k", "gilded": 0, "link_id": "t3_5yrk1", "retrieved_on": 1427425868, "score": 1, "score_hidden": false, "id": "c02af1k", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t3_5yrk1", "body": "[deleted]", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 5, "author": "halax", "created_utc": "1192990111", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "chime", "created_utc": "1192996799", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 11, "author": "[deleted]", "created_utc": "1192997163", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02afsq", "gilded": 0, "link_id": "t3_5yrk1", "retrieved_on": 1427425859, "score": 5, "score_hidden": false, "body": "You're right :) Those Ruby language guys need to figure out how to handle vast amounts of data and process it without unnecessary overhead.", "author": "chime", "created_utc": "1192999331", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 5, "parent_id": "t1_c02afn9", "id": "c02afsq", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425854, "subreddit_id": "t5_2fwo", "archived": true, "ups": 2, "gilded": 0, "link_id": "t3_5yrk1", "downs": 0, "score": 2, "body": "Surely you should spend your time optimising the interpreter instead of your program?", "author": "drigz", "created_utc": "1193003556", "distinguished": null, "edited": false, "id": "c02ag61", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02ag61", "parent_id": "t1_c02afn9", "score_hidden": false, "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -2, "author": "timothyfitz", "created_utc": "1193016190", "children": [{"controversiality": 0, "retrieved_on": 1427425723, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02aq9u", "gilded": 0, "link_id": "t3_5yrk1", "downs": 0, "score": 2, "score_hidden": false, "body": "You know, some people just write libraries, without supporting products.", "author": "derefr", "created_utc": "1193116954", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 2, "parent_id": "t1_c02ah7g", "id": "c02aq9u", "author_flair_css_class": null}], "subreddit": "programming", "ups": -2, "score_hidden": false, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yrk1", "retrieved_on": 1427425840, "body": "You don't ship an mp3 decoder. You ship a mp3 player, or a video game with mp3 background music, or an mp3 editing studio. \n\nWrite your software in the language it's easiest to, profile then optimize away the slow parts. \n\n(Also who is writing new mp3 decoders these days?)", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02ah7g", "parent_id": "t1_c02afn9", "id": "c02ah7g", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 11, "controversiality": 0, "archived": true, "link_id": "t3_5yrk1", "retrieved_on": 1427425861, "id": "c02afn9", "author_flair_text": null, "distinguished": null, "edited": true, "name": "t1_c02afn9", "parent_id": "t1_c02afmf", "body": "But try as hard as you can, you won't be able to decode an mp3 audio stream in real time with Ruby. Doesn't matter how good your algorithms are.", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02afmf", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 1, "link_id": "t3_5yrk1", "retrieved_on": 1427425861, "body": "&gt; Why turn down an easy 10% speedup just because you got a 10x speedup?\n\nBecause you could try to get a 11x speedup by putting the same effort in improving your algorithm.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02af2t", "id": "c02afmf", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193001301", "ups": 3, "gilded": 0, "link_id": "t3_5yrk1", "retrieved_on": 1427425856, "score": 3, "body": "&gt; The code (when compiled with gcc 4.0.4) has:\n\n&gt; add test jnz\n\n&gt; but the test and and are operating on the same register, jnz only looks are the carry flag, and add sets/clears the carry flag appropriately. The test instruction was completely redundant.\n\nDoes it actually speed things up to remove the test instruction?", "id": "c02afz0", "author": "froydnj", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02afz0", "parent_id": "t1_c02af2t", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1193008230", "name": "t1_c02agjj", "gilded": 0, "link_id": "t3_5yrk1", "retrieved_on": 1427425849, "score": 1, "score_hidden": false, "body": "[deleted]", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c02af2t", "id": "c02agjj", "author_flair_css_class": null}], "subreddit": "programming", "ups": 5, "name": "t1_c02af2t", "controversiality": 0, "archived": true, "link_id": "t3_5yrk1", "retrieved_on": 1427425868, "score_hidden": false, "id": "c02af2t", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5yrk1", "body": "I've been hearing \u201cyou might have needed to use assembly back in the day, but compilers are good enough now\u201d since I learned how to program, 15 years ago. Compilers are much better, but still miss really basic optimizations.\r\n\r\nLast week I profiled a simulator I've been working on; it spends 25% of its time in one short (inlined) function. The code (when compiled with gcc 4.0.4) has:\r\n\r\nadd\r\ntest\r\njnz\r\n\r\nbut the test and and are operating on the same register, jnz only looks are the carry flag, and add sets/clears the carry flag appropriately. The test instruction was completely redundant.\r\n\r\nThe other common refrain is \u201cyou should optimize the algorithm instead\u201d, as if using an appropriate algorithm and having good instruction level implementation of an algorithm are mutually exclusive. Why turn down an easy 10% speedup just because you got a 10x speedup?", "author_flair_css_class": null}
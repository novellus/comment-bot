{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 9, "author": "sciolizer", "created_utc": "1192817253", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 8, "author": "[deleted]", "created_utc": "1192831721", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "sciolizer", "created_utc": "1192836802", "children": [{"controversiality": 0, "retrieved_on": 1427425980, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02a6ep", "gilded": 0, "link_id": "t3_5ynu7", "downs": 0, "score": 6, "score_hidden": false, "body": "[deleted]", "author": "[deleted]", "created_utc": "1192838776", "distinguished": null, "edited": true, "author_flair_text": null, "subreddit": "programming", "ups": 6, "parent_id": "t1_c02a69z", "id": "c02a6ep", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02a69z", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 2, "link_id": "t3_5ynu7", "retrieved_on": 1427425982, "body": "Thanks! That's exactly what I'm looking for!", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02a5ur", "id": "c02a69z", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 8, "controversiality": 0, "archived": true, "link_id": "t3_5ynu7", "retrieved_on": 1427425988, "id": "c02a5ur", "author_flair_text": null, "distinguished": null, "edited": true, "name": "t1_c02a5ur", "parent_id": "t1_c02a43h", "body": "[deleted]", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 9, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ynu7", "retrieved_on": 1427426010, "body": "I'm glad to see that this article points out the connection between classical logic and continuations. None of the other papers/tutorials I've read on the Curry-Howard correspondance ever mention this; they restrict themselves to intuitionistic logic.\n\nIs it just me, or is there a striking resemblance between propCC and [Peirce's Law](http://en.wikipedia.org/wiki/Peirce's_law)?\n\n&gt; propCC :: ((forall q. p -&gt; CProp r q) -&gt; CProp r p) -&gt; CProp r p\n\nThe type for callCC is also suspicious.\n\n&gt; forall a (m :: * -&gt; *) b. (MonadCont m) =&gt; ((a -&gt; m b) -&gt; m a) -&gt; m a\n\nI guess that IS Peirce's law for the identity monad, which makes callCC slightly more general. Does Peirce's law also have a more generalized version in logic that is well known?", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02a43h", "parent_id": "t3_5ynu7", "id": "c02a43h", "author_flair_css_class": null}
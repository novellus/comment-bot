{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192529456", "ups": 11, "gilded": 0, "link_id": "t3_5yecx", "retrieved_on": 1427426318, "score": 11, "body": " &gt;As we said in the preface to the first edition, C ``wears well as one's experience with it grows''.\n\nK&amp;R2 ", "author": "[deleted]", "author_flair_text": null, "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c029gbh", "parent_id": "t3_5yecx", "score_hidden": false, "id": "c029gbh"}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 7, "author": "thamer", "created_utc": "1192531667", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "archived": true, "ups": 5, "gilded": 0, "link_id": "t3_5yecx", "retrieved_on": 1427426313, "score": 5, "id": "c029gpd", "author": "[deleted]", "created_utc": "1192538631", "distinguished": null, "edited": false, "body": "no, the C variable declaration syntax is made of sin (and not the trig kind)", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029gpd", "parent_id": "t1_c029ge6", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427426302, "subreddit_id": "t5_2fwo", "created_utc": "1192548720", "ups": -2, "gilded": 0, "link_id": "t3_5yecx", "downs": 0, "score": -2, "body": "You like C because it's trivial to make it impossible for a future viewer to understand.", "author": "novagenesis", "archived": true, "distinguished": null, "edited": false, "id": "c029hjv", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029hjv", "parent_id": "t1_c029ge6", "score_hidden": false, "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 6, "author": "Tommahhh", "created_utc": "1192549523", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 17, "gilded": 0, "link_id": "t3_5yecx", "retrieved_on": 1427426298, "score": 17, "body": "job security.", "author": "novagenesis", "created_utc": "1192551855", "distinguished": null, "edited": false, "id": "c029hwa", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c029hwa", "parent_id": "t1_c029hna", "score_hidden": false, "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 10, "author": "ludwig1024", "created_utc": "1192556475", "children": [{"controversiality": 0, "retrieved_on": 1427426279, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c029jbw", "gilded": 0, "link_id": "t3_5yecx", "downs": 0, "score": 1, "score_hidden": false, "body": "Ah, ok.", "author": "Tommahhh", "created_utc": "1192563735", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c029ig3", "id": "c029jbw", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427426274, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c029jr6", "gilded": 0, "link_id": "t3_5yecx", "downs": 0, "score": 1, "score_hidden": false, "body": "[deleted]", "author": "[deleted]", "created_utc": "1192567167", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c029ig3", "id": "c029jr6", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c029ig3", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 10, "link_id": "t3_5yecx", "retrieved_on": 1427426292, "body": "Well, consistency for one. If `x[y]` means `*(x+y)`, then you'd expect `y[x]` to mean the same thing.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029hna", "id": "c029ig3", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 6, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yecx", "retrieved_on": 1427426301, "body": "Why do you like `5[tab]`?", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029hna", "parent_id": "t1_c029ge6", "id": "c029hna", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "kg2", "created_utc": "1192557709", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "benhoyt", "created_utc": "1192562482", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "kg2", "created_utc": "1192564061", "children": [{"controversiality": 0, "retrieved_on": 1427426278, "subreddit_id": "t5_2fwo", "created_utc": "1192564881", "ups": 3, "gilded": 0, "link_id": "t3_5yecx", "downs": 0, "score": 3, "id": "c029jgy", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "body": "[deleted]", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029jgy", "parent_id": "t1_c029jd4", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c029jru", "gilded": 0, "link_id": "t3_5yecx", "retrieved_on": 1427426274, "score": 6, "score_hidden": false, "body": "[deleted]", "author": "[deleted]", "created_utc": "1192567314", "distinguished": null, "edited": true, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 6, "parent_id": "t1_c029jd4", "id": "c029jru", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 2, "controversiality": 0, "archived": true, "link_id": "t3_5yecx", "retrieved_on": 1427426279, "id": "c029jd4", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c029jd4", "parent_id": "t1_c029j6c", "body": "But how does it know which to multiply by the other's sizeof, if tab[5] == 5[tab]?", "author_flair_css_class": null}], "subreddit": "programming", "ups": 3, "name": "t1_c029j6c", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yecx", "retrieved_on": 1427426281, "score_hidden": false, "body": "Because of the `tab`'s type. It's an `int`, so the compiler knows to add 5*sizeof(int) to the address.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029ilr", "id": "c029j6c", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 2, "name": "t1_c029ilr", "controversiality": 0, "archived": true, "link_id": "t3_5yecx", "retrieved_on": 1427426289, "score_hidden": false, "id": "c029ilr", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029ge6", "body": "Does that require all memory access to be word-aligned?  How does it know how wide an array element is if it just +'s the index?", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029ge6", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 7, "link_id": "t3_5yecx", "retrieved_on": 1427426318, "id": "c029ge6", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5yecx", "body": "&gt; Variables declared like they\u2019re used  \n  \nI really like how C enables me to write:   \n\n    int i;\n    int *tab=...\n    /* */\n    i = tab[5];\n    i = 5[tab];\n    i = *(5+tab);\n  \nThe last one is exactly what the access actually means!\nI like C because I write what I want, and want to know what I do, and C enables me to control the machine from the beginning to the end of the execution.", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 11, "author": "BastiX", "created_utc": "1192532338", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 10, "author": "benhoyt", "created_utc": "1192532816", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192544130", "ups": 18, "gilded": 0, "link_id": "t3_5yecx", "retrieved_on": 1427426308, "score": 18, "body": "Good point, clearly he uses POV-Ray.", "id": "c029h3x", "author": "CaveMike", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c029h3x", "parent_id": "t1_c029gfz", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 10, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yecx", "retrieved_on": 1427426317, "body": "Ok, only P-y then. :-) But I guess I could use Prolog or Postscript or [one of these](http://en.wikipedia.org/wiki/Alphabetical_list_of_programming_languages#P).", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029gfz", "parent_id": "t1_c029gf7", "id": "c029gfz", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192536409", "ups": 18, "gilded": 0, "link_id": "t3_5yecx", "retrieved_on": 1427426315, "score": 18, "score_hidden": false, "body": "PL/I", "author": "Mr_Smartypants", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c029gla", "parent_id": "t1_c029gf7", "id": "c029gla", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c029hok", "gilded": 0, "link_id": "t3_5yecx", "retrieved_on": 1427426301, "score": 4, "score_hidden": false, "body": "Nein, Herren, Sie mussen die Plankalk\u00fcl usen.", "author": "Tommahhh", "created_utc": "1192549851", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 4, "parent_id": "t1_c029gf7", "id": "c029hok", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 11, "name": "t1_c029gf7", "controversiality": 0, "archived": true, "link_id": "t3_5yecx", "retrieved_on": 1427426317, "score_hidden": false, "id": "c029gf7", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5yecx", "body": "&gt; For web apps now I\u2019d only use languages beginning with P\n\nPascal?", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 4, "author": "jrnewton", "created_utc": "1192534459", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c029gmx", "gilded": 0, "link_id": "t3_5yecx", "retrieved_on": 1427426314, "score": 6, "score_hidden": false, "id": "c029gmx", "author": "simen", "created_utc": "1192537490", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 6, "parent_id": "t1_c029gib", "body": "There is an unobfuscated version too. It's only 633 lines.", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427426313, "subreddit_id": "t5_2fwo", "created_utc": "1192539695", "name": "t1_c029grw", "gilded": 0, "link_id": "t3_5yecx", "downs": 0, "score": 23, "score_hidden": false, "body": "[deleted]", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 23, "parent_id": "t1_c029gib", "id": "c029grw", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c029j79", "gilded": 0, "link_id": "t3_5yecx", "retrieved_on": 1427426281, "score": 2, "score_hidden": false, "id": "c029j79", "author": "benhoyt", "created_utc": "1192562658", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 2, "parent_id": "t1_c029gib", "body": "No, seriously -- but admittedly it was from the unobfuscated version that simen mentions here. Going through that version really does teach. And, as dzorz mentions, it led to the real TCC, which I use often.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029gib", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 4, "link_id": "t3_5yecx", "retrieved_on": 1427426317, "id": "c029gib", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5yecx", "body": "&gt; One entry I really learned a lot from was [OTCC](http://fabrice.bellard.free.fr/otcc/), Fabrice Bellard\u2019s \"Obfuscated Tiny C Compiler\". From it I learned about compiler design.\n\nriiiight", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 17, "author": "almkglor", "created_utc": "1192535153", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 12, "author": "novagenesis", "created_utc": "1192548836", "children": [{"controversiality": 0, "retrieved_on": 1427426282, "subreddit_id": "t5_2fwo", "archived": true, "ups": 1, "gilded": 0, "link_id": "t3_5yecx", "downs": 0, "score": 1, "id": "c029j5y", "author": "benhoyt", "created_utc": "1192562410", "distinguished": null, "edited": false, "body": "You're right. It was something of a throw-away remark. But I still think one could think it through and go halfway there.", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029j5y", "parent_id": "t1_c029hk2", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 12, "name": "t1_c029hk2", "controversiality": 0, "archived": true, "link_id": "t3_5yecx", "retrieved_on": 1427426302, "score_hidden": false, "id": "c029hk2", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029gji", "body": "To expand on your succinct answer...\n\nBecause there would be countless side-effects.  A macro language that complex often blurs the line between design-time and run-time.  You would slam headfirst into that blurry line if C tried to implement that.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 17, "name": "t1_c029gji", "controversiality": 0, "archived": true, "link_id": "t3_5yecx", "retrieved_on": 1427426317, "score_hidden": false, "id": "c029gji", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5yecx", "body": " &gt; Why didn\u2019t they make the preprocessor language C itself? This would open up endless possibilities for unrolled loops, powerful macros, and even more IOCCC weirdness. :-)\n\nBecause it's not Lisp! ", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 7, "author": "sping", "created_utc": "1192538219", "children": [{"controversiality": 0, "retrieved_on": 1427426314, "subreddit_id": "t5_2fwo", "created_utc": "1192538532", "name": "t1_c029gp8", "gilded": 0, "link_id": "t3_5yecx", "downs": 0, "score": -3, "score_hidden": false, "body": "I have never made that error, but then again I have mainly used descendants of C", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": -3, "parent_id": "t1_c029goh", "id": "c029gp8", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 9, "author": "jbert", "created_utc": "1192539317", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "sping", "created_utc": "1192546920", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 10, "author": "jbert", "created_utc": "1192553715", "children": [{"controversiality": 0, "retrieved_on": 1427426294, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c029i7m", "gilded": 0, "link_id": "t3_5yecx", "downs": 0, "score": 3, "score_hidden": false, "body": "Agreed it's not very important - it was a throwaway comment, but it seemed to raise lots of replies.\n\nTerseness is not the issue (the answer to all your questions is no), it's reusing the equality symbol to mean assignment, and therefore having to make up a new operator for equality.  Its a pointless and avoidable dissonance between natural language and C which has lead to people typing code they do not mean.  It's pointless busy-work that we all had to get used to this quirk.\n\nThe fact that the compiler can now flag it just means we have a workaround for the flaw.", "author": "sping", "created_utc": "1192554516", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 3, "parent_id": "t1_c029i4n", "id": "c029i7m", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 10, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yecx", "retrieved_on": 1427426295, "body": " It's an easily avoidable error, which the compiler can check for you. Those aren't the place to focus your concerns and brainpower, in my opinion.\n\nLanguage design is about tradeoffs. You're mapping a rich set of concepts into ASCII. Larry Wall is an advocate of \"Huffman coding\" of concepts - the shorter sequences go to the more commonly used constructs. The principle is sound but reasonable people can disagree on the level to which you take it (some people find perl too terse).\n\nAssignement and equality testing in C use different operators '=' and '=='. Do you also object to '-=' because that shares some characters with ==?\n\nShould all operators be spelt out in words? (Do you like [COBOL](http://en.wikipedia.org/wiki/COBOL)?)\n\nOr should we have a single distinct character for each operator? (Do you like [APL](http://en.wikipedia.org/wiki/APL_(programming_language%29)?)\n ", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029i4n", "parent_id": "t1_c029hdt", "id": "c029i4n", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c029jfw", "gilded": 0, "link_id": "t3_5yecx", "retrieved_on": 1427426278, "score": 2, "score_hidden": false, "id": "c029jfw", "author": "[deleted]", "created_utc": "1192564653", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 2, "parent_id": "t1_c029hdt", "body": " In conjunction with the bad design of conflating integers with booleans in the context of logical operators.", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 1, "controversiality": 0, "archived": true, "link_id": "t3_5yecx", "retrieved_on": 1427426305, "id": "c029hdt", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c029hdt", "parent_id": "t1_c029gqv", "body": "It's still an error, even if the compiler warns you.  It was just a bad design decision in my book.", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427426268, "subreddit_id": "t5_2fwo", "created_utc": "1192572544", "ups": 1, "gilded": 0, "link_id": "t3_5yecx", "downs": 0, "score": 1, "id": "c029kbm", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "body": "I prefer gcc\n:-)", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029kbm", "parent_id": "t1_c029gqv", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029gqv", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 9, "link_id": "t3_5yecx", "retrieved_on": 1427426313, "body": "That whole raft of errors is already avoided - modern compilers warn on such constructs.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029goh", "id": "c029gqv", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427426313, "subreddit_id": "t5_2fwo", "archived": true, "ups": 4, "gilded": 0, "link_id": "t3_5yecx", "downs": 0, "score": 4, "body": "that's only a problem because C doesn't have a true boolean type and uses ints instead.", "author": "deltageek", "created_utc": "1192539486", "distinguished": null, "edited": false, "id": "c029gr6", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029gr6", "parent_id": "t1_c029goh", "score_hidden": false, "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 18, "author": "[deleted]", "created_utc": "1192539769", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -3, "author": "sping", "created_utc": "1192547193", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 10, "author": "nuclear_eclipse", "created_utc": "1192549071", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "sping", "created_utc": "1192550148", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 4, "author": "nuclear_eclipse", "created_utc": "1192557527", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c029iq8", "gilded": 0, "link_id": "t3_5yecx", "retrieved_on": 1427426287, "score": 4, "body": " Sorry, I didn't realize you thought that was an important question.  \n\nIt doesn't matter a lot - Pascal's \":=\" is fine.  Since '=' already meant equality in Mathematics, that's what I would have used it for in C.\n\n&gt; implies that a variable *will now equal this value*\n\nThis is declaring in C \"make it so this statement is true\", which is inconsistent with the rest of the language - more like a functional language.  I think it's actually expressing \"assign this value to this variable\". ", "author": "sping", "created_utc": "1192558731", "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "ups": 4, "parent_id": "t1_c029iks", "score_hidden": false, "id": "c029iq8"}, {"controversiality": 0, "retrieved_on": 1427426286, "subreddit_id": "t5_2fwo", "created_utc": "1192560152", "ups": 1, "gilded": 0, "link_id": "t3_5yecx", "downs": 0, "score": 1, "body": "[deleted]", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "id": "c029ivr", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029ivr", "parent_id": "t1_c029iks", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427426274, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c029jsa", "gilded": 0, "link_id": "t3_5yecx", "downs": 0, "score": 3, "score_hidden": false, "id": "c029jsa", "author": "jimbokun", "created_utc": "1192567427", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 3, "parent_id": "t1_c029iks", "body": "\"What symbol should we use in place of '=' for assignment?\"\n\nsetf :)", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192644767", "ups": 1, "gilded": 0, "link_id": "t3_5yecx", "retrieved_on": 1427426199, "score": 1, "id": "c029pip", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "body": "&gt; What symbol should we use in place of '=' for assignment?\n\n:= is the clear historically proven choice.", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c029pip", "parent_id": "t1_c029iks", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 4, "controversiality": 0, "archived": true, "link_id": "t3_5yecx", "retrieved_on": 1427426289, "id": "c029iks", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c029iks", "parent_id": "t1_c029hpx", "body": "You're still not answering my question, and  seem more content to simply repeat a problem without any reasonable solution.  \n\nJust saying we need a new symbol doesn't really help any.  ASCII only has so many spots, and keyboards only have so many keys.  So I ask again:  What symbol should we use in place of '=' for assignment?", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 6, "author": "[deleted]", "created_utc": "1192560660", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "theeth", "created_utc": "1192563770", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "joshmcfarlane", "created_utc": "1192577108", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192585237", "ups": 1, "gilded": 0, "link_id": "t3_5yecx", "retrieved_on": 1427426255, "score": 1, "body": "I think it's best to have the symmetric one be used for equality (since equality is a symmetric operation) and the asymmetric one used for assignment.", "id": "c029l7u", "author": "ultimatt42", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c029l7u", "parent_id": "t1_c029knn", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 2, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yecx", "retrieved_on": 1427426262, "body": "Maybe it's just me but = for assignment and =? for equality seem to be really clear and intuitive.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029knn", "parent_id": "t1_c029jc3", "id": "c029knn", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029jc3", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 3, "link_id": "t3_5yecx", "retrieved_on": 1427426279, "body": "Ada uses := for assignment and = for equality.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029iyb", "id": "c029jc3", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 6, "controversiality": 0, "archived": true, "link_id": "t3_5yecx", "retrieved_on": 1427426284, "id": "c029iyb", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c029iyb", "parent_id": "t1_c029hpx", "body": "Another good option is to use a special symbol for both, e.g. := for assignment and == for equality, thus avoiding ambiguity.", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "stevefolta", "created_utc": "1192564756", "children": [{"controversiality": 0, "retrieved_on": 1427426199, "subreddit_id": "t5_2fwo", "created_utc": "1192644703", "ups": 3, "gilded": 0, "link_id": "t3_5yecx", "downs": 0, "score": 3, "id": "c029pid", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "body": "Programming is a human interface built atop mathematics, and as such, its symbols should preferentially be chosen from among the set used in mathematics, and new meanings should not be assigned to well-known symbols.", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029pid", "parent_id": "t1_c029jg7", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 2, "controversiality": 0, "archived": true, "link_id": "t3_5yecx", "retrieved_on": 1427426278, "id": "c029jg7", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c029jg7", "parent_id": "t1_c029hpx", "body": "&gt; I don't see how making it assignment is *more* annoying.\n\nExcept that assignment is done much more often than equality testing, so it deserves to have the more concise notation.\n\n&gt; Since '=' already meant equality in Mathematics, that's what I would have used it for in C.\n\nProgramming is not mathematics.  (Not usually, anyway.)  I know there are a lot of people who have trouble accepting that...\n", "author_flair_css_class": null}], "subreddit": "programming", "ups": 1, "name": "t1_c029hpx", "controversiality": 0, "archived": true, "link_id": "t3_5yecx", "retrieved_on": 1427426300, "score_hidden": false, "id": "c029hpx", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029hl5", "body": "Well either equality needs a special symbol, or assignment does, I don't see how making it assignment is *more* annoying.  \n\nI just think it would have been more logical that the *equals* sign means *equality*, and for assignment to get a new symbol.", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c029hl5", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 10, "link_id": "t3_5yecx", "retrieved_on": 1427426302, "id": "c029hl5", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029hev", "body": "so what character more universally implies that a variable *will now equal this value* that could be used in place?  Just about any other language that follows your ideal just makes everything more annoying for the programmer (I'm looking at you Pascal).", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "sjs", "created_utc": "1192549648", "children": [{"controversiality": 0, "retrieved_on": 1427426292, "subreddit_id": "t5_2fwo", "archived": true, "ups": 2, "gilded": 0, "link_id": "t3_5yecx", "downs": 0, "score": 2, "id": "c029iey", "author": "igouy", "created_utc": "1192556154", "distinguished": null, "edited": false, "body": " &gt; It's quite a natural way to write and think about assignment.\n\nIs it quite natural to think about assignment ;-)\n\n[The BCPL Cintcode and Cintpos User Guide](http://www.cl.cam.ac.uk/users/mr/bcplman.pdf) pdf\n\n&gt; something like &lt;- I guess\n\nSee ye olde [Smalltalk-72](http://bitsavers.org/pdf/xerox/alto/Smalltalk72_Manual.pdf) pdf ", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029iey", "parent_id": "t1_c029hnr", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427426235, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c029muz", "gilded": 0, "link_id": "t3_5yecx", "downs": 0, "score": 2, "score_hidden": false, "body": "I wonder if languages had developed differently if keyboards had always included a \"&lt;-\" key. I agree with the argument that it would be nice if assignment used an asymmetric symbol, but I think having a one-character operator for the single most common operation is more important.", "author": "degustisockpuppet", "created_utc": "1192613124", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 2, "parent_id": "t1_c029hnr", "id": "c029muz", "author_flair_css_class": null}], "subreddit": "programming", "ups": 3, "name": "t1_c029hnr", "controversiality": 0, "archived": true, "link_id": "t3_5yecx", "retrieved_on": 1427426301, "score_hidden": false, "id": "c029hnr", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029hev", "body": "  It's quite a natural way to write and think about assignment.\n\n\"The value of `a` now equals 3.\"\n\n_edit: Not to mention the BCPL legacy, and in BCPL the command was `let A = 3`, which reads even more naturally.  Ref. dmr's [history of C](http://cm.bell-labs.com/cm/cs/who/dmr/chist.html)._\n\nIs there a better symbol on our keyboards for assignment?  They could have used something like `&lt;-` I guess, but `=` and `==` are both easier to type than `&lt;-` and `=`.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029hev", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": -3, "link_id": "t3_5yecx", "retrieved_on": 1427426304, "body": "My beef is that the *equals* sign has been used to mean assignment - the error is in writing the code, even if the compiler tells you about it.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029gs4", "id": "c029hev", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 18, "controversiality": 0, "archived": true, "link_id": "t3_5yecx", "retrieved_on": 1427426312, "id": "c029gs4", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c029gs4", "parent_id": "t1_c029goh", "body": "[deleted]", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "gaggedbythealien", "created_utc": "1192547901", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1192548240", "name": "t1_c029hi8", "gilded": 0, "link_id": "t3_5yecx", "retrieved_on": 1427426303, "score": 2, "score_hidden": false, "id": "c029hi8", "author": "sping", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 2, "parent_id": "t1_c029hh2", "body": " Well, there was a precedent from the Pascal family of \":=\".\n\nThere is still the potential for errors such as:\n\n    a = b; /* intended assignment, actually boolean expression */\n\nBut if '=' had never been assignment, people wouldn't be inclined to ever write that.  It avoids the syntactic ugliness of using an equality symbol for assignment and therefore having to define a new equality symbol. ", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427426275, "subreddit_id": "t5_2fwo", "created_utc": "1192566291", "name": "t1_c029jni", "gilded": 0, "link_id": "t3_5yecx", "downs": 0, "score": 0, "score_hidden": false, "id": "c029jni", "author": "markedtrees", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 0, "parent_id": "t1_c029hh2", "body": "I love the idea.\r\n\r\nGoing by emotions, since I personally hate assignment (it killed a loved one a few years back), I'd make `hate` the operator.\r\n\r\nFor example, `a hate 5; b hate 3; c hate a + b; if (a hate hate b) { print \"ok\"; }`.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029hh2", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 3, "link_id": "t3_5yecx", "retrieved_on": 1427426304, "body": "   Which more enlightened assignment operator do you suggest?  Personally, I think assignment is exciting, so I suggest using an exclamation point:\n\n&gt;earnings ! hours x wage\n\n&gt;c -&gt;\n\nWhat do you think?   ", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029goh", "id": "c029hh2", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 6, "author": "Tommahhh", "created_utc": "1192549646", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "degustisockpuppet", "created_utc": "1192613375", "children": [{"controversiality": 0, "retrieved_on": 1427426212, "subreddit_id": "t5_2fwo", "archived": true, "ups": 1, "gilded": 0, "link_id": "t3_5yecx", "downs": 0, "score": 1, "body": "Maybe you just picked a bad example, but I'm really glad that's not possible in my language of choice", "author": "inkieminstrel", "created_utc": "1192636867", "distinguished": null, "edited": false, "id": "c029oj0", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029oj0", "parent_id": "t1_c029mvf", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c029mvf", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5yecx", "retrieved_on": 1427426235, "id": "c029mvf", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029hnq", "body": "That's because assignment in Python is not an operator, but a statement. I.e.\n\n    a = (b += 1) * 2;\n\nis legal C, but not legal Python. So Python \"solves\" the problem in its typical way by restricting expressiveness.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "name": "t1_c029hnq", "controversiality": 0, "author_flair_text": null, "ups": 6, "link_id": "t3_5yecx", "retrieved_on": 1427426301, "body": "FWIW, Python differentiates == and = there.  `if a = b` gives an error.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029goh", "id": "c029hnq", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 4, "author": "[deleted]", "created_utc": "1192551886", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 4, "author": "millstone", "created_utc": "1192563505", "children": [{"controversiality": 0, "retrieved_on": 1427426272, "subreddit_id": "t5_2fwo", "archived": true, "ups": 1, "gilded": 0, "link_id": "t3_5yecx", "downs": 0, "score": 1, "id": "c029jwx", "author": "[deleted]", "created_utc": "1192568566", "distinguished": null, "edited": false, "body": "[deleted]", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029jwx", "parent_id": "t1_c029jb2", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029jb2", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 4, "link_id": "t3_5yecx", "retrieved_on": 1427426280, "body": "Your use of the term l-value to mean the left side value is very reasonable, which should be your first clue that it's wrong - this is C, after all.\n\nAn lvalue is anything that has an address in memory - if &amp;foo is legal, then foo is an lvalue.  In (0 == a), 0 is an rvalue.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029hwi", "id": "c029jb2", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c029jtn", "gilded": 0, "link_id": "t3_5yecx", "retrieved_on": 1427426273, "score": 2, "score_hidden": false, "id": "c029jtn", "author": "petrov76", "created_utc": "1192567803", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 2, "parent_id": "t1_c029hwi", "body": "0 is not an lvalue, it is an rvalue.  See http://en.wikipedia.org/wiki/Lvalue", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 1, "gilded": 0, "link_id": "t3_5yecx", "retrieved_on": 1427426262, "score": 1, "body": "[deleted]", "author": "[deleted]", "created_utc": "1192577806", "distinguished": null, "edited": true, "id": "c029kp6", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c029kp6", "parent_id": "t1_c029hwi", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192636246", "ups": 1, "gilded": 0, "link_id": "t3_5yecx", "retrieved_on": 1427426213, "score": 1, "body": "While that's probably a good practice and works great with strings that may be null in other languages, e.g. \"foo\".equals(bar) instead of bar.equals(\"foo\"), it's rather counter-intuitive.\r\n\r\nEnglish word order almost exclusively puts the variable before the test value in comparisons.  \"Is that my cow?\" vs \"Is my cow that?\"  IMHO, switching things around in code makes things less readable.", "id": "c029ofd", "author": "inkieminstrel", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c029ofd", "parent_id": "t1_c029hwi", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029hwi", "ups": 4, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yecx", "retrieved_on": 1427426298, "score_hidden": false, "body": "[deleted]", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029goh", "id": "c029hwi", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427426242, "subreddit_id": "t5_2fwo", "created_utc": "1192600152", "ups": 2, "gilded": 0, "link_id": "t3_5yecx", "downs": 0, "score": 2, "body": "This used to bite me often enough that I hacked highlighting of comparison operators into emacs.", "author": "gsg", "archived": true, "distinguished": null, "edited": false, "id": "c029m95", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029m95", "parent_id": "t1_c029goh", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 7, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yecx", "retrieved_on": 1427426314, "body": "One thing I hate, which carries over to all C's descendants, is the use of \"=\" for assignment.\n\nA whole raft of coding errors along the lines of \n\n    if (a = b)\n        c;\n\nwould be eliminated with a specific assignment operator that didn't already mean \"equals\".", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029goh", "parent_id": "t3_5yecx", "id": "c029goh", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -10, "author": "[deleted]", "created_utc": "1192546396", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 9, "author": "kindall", "created_utc": "1192562886", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -6, "author": "[deleted]", "created_utc": "1192566536", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 4, "author": "kindall", "created_utc": "1192568456", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -5, "author": "[deleted]", "created_utc": "1192569077", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 3, "author": "kindall", "created_utc": "1192569631", "children": [{"controversiality": 0, "retrieved_on": 1427426269, "subreddit_id": "t5_2fwo", "created_utc": "1192570630", "name": "t1_c029k59", "gilded": 0, "link_id": "t3_5yecx", "downs": 0, "score": -2, "score_hidden": false, "body": "That was a dig on C programmers who say, \"it's faster, and therefore must be better.\" I am well aware of the benefits of C, mainly for device drivers or embedded systems today. I also tire of the Stallmans of the world telling me that I should always write in C, otherwise I'm not a real programmer. I've had that argument with Stallman and let me tell you that dude is nutz.", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": -2, "parent_id": "t1_c029k1a", "id": "c029k59", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 3, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yecx", "retrieved_on": 1427426270, "body": "Your suggestion was to use assembly language where performance was needed. C is arguably a better choice than assembly in these situations -- more portable, more developers familiar with it, and performance on par with assembly.", "archived": true, "distinguished": null, "edited": true, "name": "t1_c029k1a", "parent_id": "t1_c029jyz", "id": "c029k1a", "author_flair_css_class": null}], "subreddit": "programming", "ups": -5, "name": "t1_c029jyz", "controversiality": 0, "archived": true, "link_id": "t3_5yecx", "retrieved_on": 1427426271, "score_hidden": false, "id": "c029jyz", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029jwg", "body": "You will note that my original post that has been downmodded into oblivion stated that C had no place in large scale design which follows your argument perfectly.", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "[deleted]", "created_utc": "1192645521", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "kindall", "created_utc": "1192646069", "children": [{"created_utc": "1192674351", "downs": 0, "subreddit": "programming", "archived": true, "ups": 1, "gilded": 0, "link_id": "t3_5yecx", "retrieved_on": 1427426158, "score": 1, "controversiality": 0, "body": "I would definitely agree.  Namespaces alone would make things worth it, but the ability to parameterize code by types (i.e., templates) is absolutely essential, IMO, for any sort of reasonably modern language.", "author": "[deleted]", "author_flair_text": null, "distinguished": null, "edited": false, "id": "c029soa", "subreddit_id": "t5_2fwo", "score_hidden": false, "parent_id": "t1_c029por", "name": "t1_c029soa", "author_flair_css_class": null}], "subreddit": "programming", "ups": 2, "name": "t1_c029por", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yecx", "retrieved_on": 1427426197, "score_hidden": false, "id": "c029por", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029pls", "body": "Yeah... I remember reading an article when C++ came out that made the case that even if you didn't use the object-oriented features, C++ was still a better C than C.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 1, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yecx", "retrieved_on": 1427426198, "body": "  [C++ isn't just an object-oriented language](http://www.research.att.com/~bs/oopsla.pdf) (PDF warning).", "archived": true, "distinguished": null, "edited": true, "name": "t1_c029pls", "parent_id": "t1_c029jwg", "id": "c029pls", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 4, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yecx", "retrieved_on": 1427426272, "body": "That does not necessarily follow. Object-oriented programming is a different animal. A better argument would be that one should use Java or C# (or Perl or Python or Ruby) because the computer manages memory better than you can. And for many applications, that'd be correct.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029jwg", "parent_id": "t1_c029jou", "id": "c029jwg", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 1, "gilded": 0, "link_id": "t3_5yecx", "retrieved_on": 1427426210, "score": 1, "body": "The compiler CAN be made to understand a processor better than the programmer. This isn't very different from the way one defines a specification for a solution in prolog, say for the towers of hanoi, and then allows the automatic logic to derive the implementation. Instead of 'move top disk from left to center', you get 'movl %esp, %ebp'. Should programmers really resolve something a computer can be programmed to solve (and at compile time)? Let's all play Sudoku and tic-tac-toe.\n\nI agree with you. C is not the best language for specifying algorithms. Lisp is better as demonstrated in SICP. If someone can show me a lisp that allows the programmer total control over memory then I'll show you a replacement for C. Without garbage collection we'd lose alot of what makes lisp lisp. I'd wager it would look quite a bit like C.", "author": "sambo357", "created_utc": "1192638067", "distinguished": null, "edited": false, "id": "c029onl", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c029onl", "parent_id": "t1_c029jou", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": -6, "name": "t1_c029jou", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yecx", "retrieved_on": 1427426275, "score_hidden": false, "body": "Oh, boo, downmodded into oblivion by the C brigade. If C is better than assembler because the compiler knows better than the programmer, then by this same logic C++ is better than C and C not be used either.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029j8c", "id": "c029jou", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029j8c", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 9, "link_id": "t3_5yecx", "retrieved_on": 1427426281, "id": "c029j8c", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029hbt", "body": "No, you should write it in C, because the C compiler almost certainly knows more about the processor's quirks than you do.", "author_flair_css_class": null}], "subreddit": "programming", "ups": -10, "name": "t1_c029hbt", "controversiality": 0, "archived": true, "link_id": "t3_5yecx", "retrieved_on": 1427426305, "score_hidden": false, "id": "c029hbt", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5yecx", "body": "C has no place in large scale design today. If a higher level language is too slow in a particular function or service, then you should be a man and rewrite that section of code in Assembler if you want to see a speed boost.", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -7, "author": "BeetleB", "created_utc": "1192549241", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 15, "author": "Tommahhh", "created_utc": "1192550022", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "millstone", "created_utc": "1192552216", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 10, "author": "a1k0n", "created_utc": "1192559124", "children": [{"controversiality": 0, "retrieved_on": 1427426280, "subreddit_id": "t5_2fwo", "created_utc": "1192563159", "name": "t1_c029j9h", "gilded": 0, "link_id": "t3_5yecx", "downs": 0, "score": 4, "score_hidden": false, "id": "c029j9h", "author": "Tommahhh", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 4, "parent_id": "t1_c029is7", "body": "I too am eager to see the shorter x86 assembly.  Maybe there's a STRCPY opcode :)", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 10, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yecx", "retrieved_on": 1427426287, "body": "Are you sure?\n\nIf you're thinking of \"rep movsb\", that's not quite the same.  You'll need to set ecx first.  Maybe a rep scasb first, but that isn't quite the same and besides, \"xor al,al;xor ecx,ecx;rep scasb;neg ecx;sub esi,ecx;rep movsb\" isn't shorter.  Is there some shorter way?\n\n[edit: actually that won't work either; it's more like \"xor al,al;xor ecx,ecx;dec ecx;rep scasb;not ecx;dec ecx;xchg esi,edi;sub esi,ecx;rep movsb\".. probably better off writing out the loop.  too bad mov doesn't set the zero flag.]", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029is7", "parent_id": "t1_c029hxq", "id": "c029is7", "author_flair_css_class": null}], "subreddit": "programming", "ups": 3, "name": "t1_c029hxq", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yecx", "retrieved_on": 1427426298, "score_hidden": false, "body": "Believe it or not, your guess would be wrong for x86 assembly!\n\nBut on a PowerPC or MIPS, yeah.\n\n(How many nerd points was that worth?)", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029hpb", "id": "c029hxq", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192562791", "ups": 7, "gilded": 0, "link_id": "t3_5yecx", "retrieved_on": 1427426281, "score": 7, "body": " Dead right about qsort in C vs Haskell. The C one works on a micro with 1KB of RAM. The Haskell version *might* run on a processor with 1MB of RAM (including the Haskell runtime, garbage collector, etc). ", "author": "benhoyt", "archived": true, "distinguished": null, "edited": false, "id": "c029j7t", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c029j7t", "parent_id": "t1_c029hpb", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "archived": true, "ups": -1, "gilded": 0, "link_id": "t3_5yecx", "retrieved_on": 1427426255, "score": -1, "id": "c029l7r", "author": "BeetleB", "created_utc": "1192585230", "distinguished": null, "edited": false, "body": "Fast: yes. Less memory: yes. Concise: No.", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029l7r", "parent_id": "t1_c029hpb", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 15, "name": "t1_c029hpb", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yecx", "retrieved_on": 1427426301, "score_hidden": false, "body": " &gt; Has he looked at the Haskell qsort? 2 lines!\n\nThe C quicksort is faster and doesn't use as much memory.  They're not doing the same thing.\n\n&gt; I don't know much assembly, but couldn't that be equally concise?\n\nI'm guessing that\n\n    while (*dst++ = *src++);\n\nis shorter than its equivalent in assembly. ", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029hm2", "id": "c029hpb", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427426262, "subreddit_id": "t5_2fwo", "archived": true, "ups": 4, "gilded": 0, "link_id": "t3_5yecx", "downs": 0, "score": 4, "body": "C has a _very_ concise _specification_. This has made the tedium in typing more to program in it much more bearable, for a single programmer may hold much of its semantics in his head at once; and furthermore, such a compact language is far easier to port to other  hardware/OS platforms.", "author": "bitwize", "created_utc": "1192577252", "distinguished": null, "edited": false, "id": "c029knz", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029knz", "parent_id": "t1_c029hm2", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192645664", "ups": 1, "gilded": 0, "link_id": "t3_5yecx", "retrieved_on": 1427426198, "score": 1, "id": "c029pmc", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "body": "Your two-line haskell qsort is O(n^2), best-case.  Why even bother?", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c029pmc", "parent_id": "t1_c029hm2", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "name": "t1_c029hm2", "controversiality": 0, "archived": true, "ups": -7, "link_id": "t3_5yecx", "retrieved_on": 1427426302, "id": "c029hm2", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5yecx", "body": "  It's sad, but the article is making the point for the aforementioned C [critic](http://freeshells.ch/~revence/no-c.txt).\n\nLet's look at some of the items he loves about C:\n\n* *Conciseness of K&amp;R*. I don't know much assembly, but couldn't that be equally concise? Is that an argument to use Assembly?\n* *Conciseness of the language*. Concise?! He boasts about qsort in 11 lines. Has he looked at the [Haskell qsort]( http://www.haskell.org/haskellwiki/Introduction#Quicksort_in_Haskell)? 2 lines! The only concise C code I've ever seen is the obfuscated one. \n  ", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "sjs", "created_utc": "1192549844", "children": [{"controversiality": 0, "retrieved_on": 1427426199, "subreddit_id": "t5_2fwo", "created_utc": "1192645027", "ups": 1, "gilded": 0, "link_id": "t3_5yecx", "downs": 0, "score": 1, "body": "Isn't D more of a response to C++ than C?", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "id": "c029pjx", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029pjx", "parent_id": "t1_c029hoi", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c029hoi", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 3, "link_id": "t3_5yecx", "retrieved_on": 1427426301, "id": "c029hoi", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5yecx", "body": "Any [D programmers](http://www.digitalmars.com/d/) around?  How many of his \"hate it\"s does D remedy?", "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427426293, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c029ibf", "gilded": 0, "link_id": "t3_5yecx", "downs": 0, "score": 8, "score_hidden": false, "body": "I use C because [it cures cancer](http://reddit.com/info/5yf9d/comments/).", "author": "xyphus", "created_utc": "1192555368", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 8, "parent_id": "t3_5yecx", "id": "c029ibf", "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427426278, "subreddit_id": "t5_2fwo", "archived": true, "ups": -7, "gilded": 0, "link_id": "t3_5yecx", "downs": 0, "score": -7, "id": "c029jha", "author": "George_Bush", "created_utc": "1192564938", "distinguished": null, "edited": false, "body": "I heard it's cure for cancer.", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029jha", "parent_id": "t3_5yecx", "score_hidden": false, "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -1, "author": "marglexx", "created_utc": "1192576773", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1192645175", "name": "t1_c029pkg", "gilded": 0, "link_id": "t3_5yecx", "retrieved_on": 1427426199, "score": 1, "score_hidden": false, "body": "[deleted]", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c029kmz", "id": "c029pkg", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": -1, "name": "t1_c029kmz", "controversiality": 0, "archived": true, "link_id": "t3_5yecx", "retrieved_on": 1427426262, "score_hidden": false, "id": "c029kmz", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t3_5yecx", "body": "   I use C++ at work. No C - I can't live without classes and stl - especially string and hash_map... :). Yes I use C++ because of speed and memory footprint. \n\nApplication I wrote replaces the original Perl code (written by really best people who are perl gurus!) and uses  3-10 less memory and it is 3-4 times faster. Yes memory footprint is f..g important to me - today I have some data set that eating all memory on 16G machine and running for 2 days. In previous implementation it would be needed  64G and would run for week. \n\nNo [Joel's rule](http://joelonsoftware.com/items/2007/09/18.html) does not work for me - every 2 years data sets are expanded in order of magnitude (or at least x2-x4). Because I work in industry where we create for you this x2/x4 transistors every 2 years :) on chip.. heh\n\nYes I use macros - because we don't have closures in C++ , and writing functor for every utter shitty loop is depressing. And we use macros for code generation. But from another side - all our code compiles to TCL library and so it is actually DSL. And less important code and gui and reports and some similar shit is written in Incr TCL so it is OO scripting (3 times faster  to write and less time to maintain). \n\nYou know - sometimes performance and memory do matter! And if you don't believe go and read fucking stories about people who wrote their shit in Ruby  on Rails and have not succeeded to scale it. And you know what - when you hit THAT wall - it hurts. It hurts because it hit you in absolutely bad timing and because you can't fix it - except totally rewrite! \n\nwriting C++ code is strange experience.. You have a lot of power. But you waste your coding skills on writing endless iter=begin(); iter !=end ; ++ iter...\n ", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "archived": true, "ups": -2, "gilded": 0, "link_id": "t3_5yecx", "retrieved_on": 1427426239, "score": -2, "body": "[deleted]", "author": "[deleted]", "created_utc": "1192604205", "distinguished": null, "edited": false, "id": "c029mgv", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029mgv", "parent_id": "t3_5yecx", "score_hidden": false, "author_flair_css_class": null}
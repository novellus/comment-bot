{"controversiality": 0, "retrieved_on": 1427426304, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c029hfo", "gilded": 0, "link_id": "t3_5yf3u", "downs": 0, "score": 1, "score_hidden": false, "body": "[deleted]", "author": "[deleted]", "created_utc": "1192547416", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t3_5yf3u", "id": "c029hfo", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 0, "author": "bitwize", "created_utc": "1192549928", "children": [{"controversiality": 0, "retrieved_on": 1427426299, "subreddit_id": "t5_2fwo", "created_utc": "1192551420", "ups": 4, "gilded": 0, "link_id": "t3_5yf3u", "downs": 0, "score": 4, "id": "c029huo", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "body": "[deleted]", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029huo", "parent_id": "t1_c029hov", "score_hidden": false, "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 9, "author": "queensnake", "created_utc": "1192554059", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "bitwize", "created_utc": "1192556070", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "archived": true, "ups": 5, "gilded": 0, "link_id": "t3_5yf3u", "retrieved_on": 1427426237, "score": 5, "id": "c029mpe", "author": "qwe1234", "created_utc": "1192609009", "distinguished": null, "edited": false, "body": "if you train every day, eventually picking your nose with your toe will be almost as efficient as picking it with your finger.\n", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029mpe", "parent_id": "t1_c029iej", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 2, "controversiality": 0, "archived": true, "link_id": "t3_5yf3u", "retrieved_on": 1427426292, "id": "c029iej", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c029iej", "parent_id": "t1_c029i5t", "body": "Nice.\n\nBeyond these, even dynamic method dispatch can be optimized to a compare and jump with a monomorphic or polymorphic inline cache. I'm to understand that ObjC method dispatch gets pretty close to function-call speeds with this approach.\n\nPersonally I feel that dynamic dispatch is the heart of OO. Using classes to wrap your adts in C++ is not really OO, imho. (Then again the term OO has become so overloaded (heh) as to approach buzzword status; so there could be multiple legitimate definitions depending on the goals for your language.)", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427426275, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c029joc", "gilded": 0, "link_id": "t3_5yf3u", "downs": 0, "score": 1, "score_hidden": false, "id": "c029joc", "author": "nasorenga", "created_utc": "1192566463", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c029i5t", "body": "&gt; 2 minor ... plain encapsulation can be resolved fully compile-time, and is part of OO\n\nYes, but grandparent was talking about polymorphism, not encapsulation.", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "xcbsmith", "created_utc": "1192602336", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "bitwize", "created_utc": "1192617224", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "xcbsmith", "created_utc": "1192617633", "children": [{"controversiality": 0, "retrieved_on": 1427426227, "subreddit_id": "t5_2fwo", "created_utc": "1192625753", "ups": 1, "gilded": 0, "link_id": "t3_5yf3u", "downs": 0, "score": 1, "id": "c029ndg", "author": "Gotebe", "archived": true, "distinguished": null, "edited": true, "body": "Plus, it may also get inlined.    ", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029ndg", "parent_id": "t1_c029n0g", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029n0g", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5yf3u", "retrieved_on": 1427426232, "id": "c029n0g", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c029n06", "body": "&gt; And implementations of C++ tend to use vtables.\n\nYes, but many have optimizations that allow for bypassing the vtable in certain circumstances... basically the same circumstances where you can use templates for static polymorphism (funny that), although most optimizers can't correctly identify all the opportunities to do so.", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "xcbsmith", "created_utc": "1192617787", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "bitwize", "created_utc": "1192617859", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192622905", "ups": 1, "gilded": 0, "link_id": "t3_5yf3u", "retrieved_on": 1427426229, "score": 1, "body": "&gt; Monomorphic or polymorphic inline cache\n\nAh yes. Most C++ runtimes don't tend to do codegen of any kind. What you can have happen though, particularly with profile guided optimizations, is compile-time inlining of one or more method invocations for a virtual function.", "author": "xcbsmith", "archived": true, "distinguished": null, "edited": false, "id": "c029n7p", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c029n7p", "parent_id": "t1_c029n0r", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "ups": 2, "name": "t1_c029n0r", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yf3u", "retrieved_on": 1427426232, "score_hidden": false, "body": " Monomorphic or polymorphic inline cache -- a way of optimizing method dispatch in object-oriented programming languages. It's fairly typical for a language implementation (e.g., a Java VM) to have several method-dispatch options to choose from -- and use whichever one makes the most sense from an optimization standpoint.", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c029n0k", "id": "c029n0r", "author_flair_css_class": null}], "subreddit": "programming", "ups": 1, "name": "t1_c029n0k", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yf3u", "retrieved_on": 1427426232, "score_hidden": false, "body": "&gt; ...make a MIC or PIC for C++...\n\nHey, what do you mean by MIC and PIC in this context? I don't think you mean what I normally think of those acronyms as meaning.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029n06", "id": "c029n0k", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 1, "controversiality": 0, "archived": true, "link_id": "t3_5yf3u", "retrieved_on": 1427426232, "id": "c029n06", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c029n06", "parent_id": "t1_c029md5", "body": "And implementations of C++ tend to use vtables. I'm pretty sure the major ones (GNU and Microsoft) do, anyway. Which makes me wonder why someone didn't come up with the bright idea of making a MIC or PIC for C++. (loss of debugging info, perhaps?)", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "queensnake", "created_utc": "1192650566", "children": [{"distinguished": null, "controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c029qod", "gilded": 0, "link_id": "t3_5yf3u", "retrieved_on": 1427426184, "score": 1, "id": "c029qod", "author": "xcbsmith", "created_utc": "1192653105", "author_flair_text": null, "edited": false, "body": "&gt; I was pointing out that in C++, object.DoSomething() need have no indirection.\n\nIt does *if* DoSomething() is polymorphic. Although if you use generics to accomplish your polymorphism the indirection is resolved at compile time (and as has been mentioned elsewhere, even with the vtable based polymorphism, sufficiently clever optimizers can remove the overhead of the indirection).", "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c029qcd", "score_hidden": false, "author_flair_css_class": null}, {"created_utc": "1192653589", "downs": 0, "subreddit": "programming", "archived": true, "ups": 1, "gilded": 0, "link_id": "t3_5yf3u", "retrieved_on": 1427426183, "score": 1, "controversiality": 0, "body": "&gt; But, on the whole it's faffery without grounding. Go find me a language /or implementation/ that beats C++ on the 'language shootout'. And I mean 'overall', or, an example that deals with polymorphism.\n\nCint vs. OCaml. OCaml wins every time. Cint vs. Hotspot. Same outcome. Hotspot wins vs. a lot C++ compilers for pure runtime polymorphism benchmarks thanks to aggressive inlining of virtual functions. Allegro CL generic dispatch wins vs. a lot of C++ compilers for polymorphism benchmarks as well. In general, a lot of languages with dynamic runtimes tend to have better polymorphism optimizations than most C++ compilers. Also, most C++ compilers generate pretty inefficient code if they don't have optimizations turned on.....", "author": "xcbsmith", "author_flair_text": null, "distinguished": null, "edited": false, "id": "c029qqy", "subreddit_id": "t5_2fwo", "score_hidden": false, "parent_id": "t1_c029qcd", "name": "t1_c029qqy", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 1, "name": "t1_c029qcd", "controversiality": 0, "archived": true, "link_id": "t3_5yf3u", "retrieved_on": 1427426189, "score_hidden": false, "id": "c029qcd", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c029md5", "body": " I can't believe I'm wasting time on this:\n\nqueensnake:\n&gt; dumb, any other language would perform worse.\n\nxcbsmith:\n&gt; That's not true at all. ... In general, languages don't have performance characteristics, but rather implementations of languages have performance characteristics.\n\nImplementations differ, true, so your answer has truth in it. But, on the whole it's faffery without grounding. Go find me a language /or implementation/ that beats C++ on the 'language shootout'. And I mean 'overall', or, an example that deals with polymorphism.  \n\nAlso, on your first point, I /said/ it was minor - he says, \"OO implies indirection\" which it maybe does, in Smalltalk or Ruby or some others. I was pointing out that in C++, object.DoSomething() need have no indirection. But, I admit I mentioned encapsulation - but mind, even that is one of the cloud of words that come up when you talk about the definition of OO.   ", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c029md5", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 2, "link_id": "t3_5yf3u", "retrieved_on": 1427426240, "id": "c029md5", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c029i5t", "body": " &gt; 2 minor - 'object-oriented programming necessarily adds another level of indirection' - No, plain encapsulation can be resolved fully compile-time, and is part of OO.\n\nYou missed the larger context. He was talking about achieving *polymorphism* through object oriented programming. That does necessarily add another level of indirection. I guess some might consider overloading as a form of polymorphism, but most wouldn't.\n\nHe was wrong though about this necessarily imposing a performance overhead.\n\n&gt; 2nd minor: \"that's why nobody (who knows what they're doing) does oop in c++ today.\" - dumb, any other language would perform worse.\n\nThat's not true at all. C++ implementations often have performance characteristics that result in other language implementations being more efficient for many classes of problems, particularly when it comes to polymorphism.\n\nIn general, languages don't have performance characteristics, but rather *implementations* of languages have performance characteristics.", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 9, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yf3u", "retrieved_on": 1427426295, "body": "I count 3, 1 major - 'correct way to achieve polymorphism is with generics' - no, runtime polymorphism is legitimate, even the defining notion. \n\n2 minor - 'object-oriented programming necessarily adds another level of indirection' - No, plain encapsulation can be resolved fully compile-time, and is part of OO. \n\n2nd minor: \"that's why nobody (who knows what they're doing) does oop in c++ today.\" - dumb, any other language would perform worse. ", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029i5t", "parent_id": "t1_c029hov", "id": "c029i5t", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c029i84", "gilded": 0, "link_id": "t3_5yf3u", "retrieved_on": 1427426294, "score": 1, "body": "[deleted]", "id": "c029i84", "author": "[deleted]", "created_utc": "1192554634", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c029hov", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c029isn", "gilded": 0, "link_id": "t3_5yf3u", "retrieved_on": 1427426286, "score": 1, "body": "[deleted]", "author": "[deleted]", "created_utc": "1192559237", "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c029hov", "score_hidden": false, "id": "c029isn"}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "Tommahhh", "created_utc": "1192575394", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 3, "gilded": 0, "link_id": "t3_5yf3u", "retrieved_on": 1427426262, "score": 3, "id": "c029kne", "author": "bitwize", "created_utc": "1192576997", "distinguished": null, "edited": false, "body": "True. The real one would have just made everyone angry. I've just managed to gather interesting perspectives from C++ programmers with a variety of experience, who found flaws in the argument that I didn't even think of.", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c029kne", "parent_id": "t1_c029kji", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c029kji", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 3, "link_id": "t3_5yf3u", "retrieved_on": 1427426265, "body": "&gt; (Fun for geeks: Find the technical flaw in the above.)\n\nqwe1234 is inimitable.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029hov", "id": "c029kji", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427426237, "subreddit_id": "t5_2fwo", "created_utc": "1192608858", "name": "t1_c029mp8", "gilded": 0, "link_id": "t3_5yf3u", "downs": 0, "score": 3, "score_hidden": false, "body": "disgusting.\ncargo-cult programmers shouldn't be allowed to post on the internets.\n\nthere's *no such thing* as 'object-oriented programming'. you've been conned. perhaps you'd like to try some enterprise-level soap value-added web2.0 xml services next?\n\nwhat there *is*, however, is nothing more than a method for vtable dispatch, like you said. \n\nand vtable dispatch is an unreadable, inefficient and clumsy way of reimplementing the case-switch construct. 99.99% of the time you should just use the right tool: the case-switch statement.\n\nabout the only time vtables are necessary is when you need to extend a binary-only interface. and if you *do*, then you should really rethink your business processes first.\n\n", "author": "qwe1234", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 3, "parent_id": "t1_c029hov", "id": "c029mp8", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c029hov", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 0, "link_id": "t3_5yf3u", "retrieved_on": 1427426301, "id": "c029hov", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5yf3u", "body": " ObQwe1234:\n\n&gt; the _correct_ way to achieve polymorphism is with generics. object-oriented programming _necessarily_ adds another level of indirection (into the vtable for virtual method dispatch), which breaks locality of reference and utterly fucks up performance. that's why nobody (who knows what they're doing) does oop in c++ today.\n\n(Fun for geeks: Find the technical flaw in the above.)", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 16, "author": "naughty", "created_utc": "1192561478", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 11, "author": "jerf", "created_utc": "1192570534", "children": [{"controversiality": 0, "retrieved_on": 1427426268, "subreddit_id": "t5_2fwo", "created_utc": "1192571901", "name": "t1_c029k9o", "gilded": 0, "link_id": "t3_5yf3u", "downs": 0, "score": 7, "score_hidden": false, "body": "*Oh folks, parametric polymorphism just concatenated ad-hoc polymorphism to the integer 11. Looks like a toughie for ad-hoc right now, Steve.*", "author": "markedtrees", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 7, "parent_id": "t1_c029k4t", "id": "c029k9o", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 11, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yf3u", "retrieved_on": 1427426269, "body": "  _Ad-hoc parametric polymorphism comes out swinging, and __oh no__, \"fight\" isn't in parametric polymorphism's interface! He's just sitting there chanting \"method not found\"... Folks, this is going to be short and bloody..._  ", "archived": true, "distinguished": null, "edited": false, "name": "t1_c029k4t", "parent_id": "t1_c029j1t", "id": "c029k4t", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 16, "controversiality": 0, "archived": true, "link_id": "t3_5yf3u", "retrieved_on": 1427426283, "id": "c029j1t", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c029j1t", "parent_id": "t3_5yf3u", "body": "Ad-hoc polymorphism, parametric polymorphism FIGHT!", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": -1, "author": "setuid_w00t", "created_utc": "1192565220", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192609336", "ups": 2, "gilded": 0, "link_id": "t3_5yf3u", "retrieved_on": 1427426235, "score": 2, "body": "C++'s templates are different from C#'s generics. When C++ programmers talk about generic programming, they tend to be talking about the unique properties of a template system. C#'s distinction between reference and value types also limits some of the generic programming's expressive power.\n\nThat said, D's template system is deliberately derived from C++'s, and in general D is so similar to C++ (by design) that it is hard to say C++ is \"unique\" without throwing in some additional criteria like \"popular\" or \"established\" that removes D.", "id": "c029mq1", "author": "xcbsmith", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c029mq1", "parent_id": "t1_c029ji4", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427426231, "subreddit_id": "t5_2fwo", "archived": true, "ups": 1, "gilded": 0, "link_id": "t3_5yf3u", "downs": 0, "score": 1, "body": "[deleted]", "author": "[deleted]", "created_utc": "1192618397", "distinguished": null, "edited": false, "id": "c029n1p", "author_flair_text": null, "subreddit": "programming", "name": "t1_c029n1p", "parent_id": "t1_c029ji4", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": -1, "name": "t1_c029ji4", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5yf3u", "retrieved_on": 1427426277, "score_hidden": false, "body": " &gt; The fact that C++ supports these different programming paradigms makes it unique\u2014and uniquely powerful\u2014among today's programming languages.\n\nDoesn't C# (and I'm sure many other languages) also provide the following:\n\n  1. procedural programming\n  1. data abstraction\n  1. object-oriented programming\n  1. generic programming\n\nMaybe the author has a definition of unique that I am not familiar with.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5yf3u", "id": "c029ji4", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192567676", "ups": -6, "gilded": 0, "link_id": "t3_5yf3u", "retrieved_on": 1427426273, "score": -6, "id": "c029jt4", "author": "imbaczek", "archived": true, "distinguished": null, "edited": false, "body": "thanks for reminding us why C++ sucks.", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c029jt4", "parent_id": "t3_5yf3u", "score_hidden": false, "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": -4, "gilded": 0, "link_id": "t3_5yf3u", "retrieved_on": 1427426241, "score": -4, "id": "c029maf", "author": "[deleted]", "created_utc": "1192600900", "distinguished": null, "edited": false, "body": "Great, someone took a lot of time and space to come up with and explian a very simple idea.\n\nWell, that's what you get for thinking in C++, instead of a real language (at a higher abstraction level).", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c029maf", "parent_id": "t3_5yf3u", "score_hidden": false, "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c029mgj", "gilded": 0, "link_id": "t3_5yf3u", "retrieved_on": 1427426239, "score": -8, "score_hidden": false, "id": "c029mgj", "author": "[deleted]", "created_utc": "1192604161", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": -8, "parent_id": "t3_5yf3u", "body": "[deleted]", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c029n1r", "gilded": 0, "link_id": "t3_5yf3u", "retrieved_on": 1427426231, "score": 1, "score_hidden": false, "id": "c029n1r", "author": "martoo", "created_utc": "1192618453", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t3_5yf3u", "body": "One form of polymorphism is enough for any language.", "author_flair_css_class": null}
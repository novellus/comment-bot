{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "Disparity", "created_utc": "1192663690", "children": [{"controversiality": 0, "retrieved_on": 1427426168, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c029s1j", "gilded": 0, "link_id": "t3_5yjif", "downs": 0, "score": 2, "score_hidden": false, "body": "In typical code you don't need really them, because typical code does not work for  interesting reasons. You have some dirt-simple ADT and some trivial concrete realization, and a correctness proof for this sort of program is just line-by-line symbol pushing. \n\n(This is not to disparage such programs; much of the benefit of the computer is that it relieves humans from having to do this kind of chore repeatedly, and you still need creativity to writ them -- only you're using it to understand the problems your users are facing and automating them away.)\n\nStill, they aren't the sorts of programs that make your hair stand up in awe. \n\nBut suppose you've got a program that works for sophisticated reasons -- e.g., you have a loop that terminates because of a metric that's a complex function of the abstract state, or you're using the same concrete data structure to witness multiple facets of your invariant, or you are using aliasing in a tricky way. Now working out the invariants and checking that they are maintained will help you an awful lot. \n\nThese proofs are also useful when writing programs that are very simple but easy to get wrong. An example of this is the humble binary search -- ask ten programmers to write a binary search, and you'll get nine fencepost errors. (Another example is fast exponentiation by repeated squaring.) An invariant and proof is very helpful in this kind of situation.", "author": "neelk", "created_utc": "1192666086", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 2, "parent_id": "t1_c029rug", "id": "c029s1j", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 1, "controversiality": 0, "archived": true, "link_id": "t3_5yjif", "retrieved_on": 1427426169, "id": "c029rug", "author_flair_text": null, "distinguished": null, "edited": true, "name": "t1_c029rug", "parent_id": "t3_5yjif", "body": "  Hi,\nI am student considering a major in CS and I am currently learning about abstraction functions and rep invariants. My question is whether they are actually used in the real world.\n\nI ask simply because I despise writing and devising the\u2014they are tedious and the least fun part of programming. And in addition, I have rarely (if ever) seen either abstraction functions or rep invariants occur in open source projects.\n\nAny opinions would be great! Thanks.", "author_flair_css_class": null}
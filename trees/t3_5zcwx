{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 6, "author": "blaaargh", "created_utc": "1193670694", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 9, "author": "sblinn", "created_utc": "1193673234", "children": [{"controversiality": 0, "retrieved_on": 1427425066, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02bzgt", "gilded": 0, "link_id": "t3_5zcwx", "downs": 0, "score": 8, "score_hidden": false, "id": "c02bzgt", "author": "blaaargh", "created_utc": "1193676907", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 8, "parent_id": "t1_c02bz18", "body": "That is actually classic Erik - he does tend to be [strongly opinionated](http://c2.com/cgi/wiki?ErikNaggumQuotes), which is a good thing, as long as you're not the target :)", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193677028", "name": "t1_c02bzhe", "gilded": 0, "link_id": "t3_5zcwx", "retrieved_on": 1427425066, "score": 2, "score_hidden": false, "id": "c02bzhe", "author": "lothair", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 2, "parent_id": "t1_c02bz18", "body": "But it's true! ", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 3, "gilded": 0, "link_id": "t3_5zcwx", "retrieved_on": 1427425004, "score": 3, "id": "c02c48y", "author": "[deleted]", "created_utc": "1193729810", "distinguished": null, "edited": true, "body": "Erik belongs to the rare group of people who care of what they do and think hard.\n\nhttp://groups.google.com/group/comp.lang.lisp/msg/214fc178f2ce8d92\n\n&gt;I was there, at the conference\n  table where the first thoughts that became XML surfaced.  a few months\n  earlier, I had proposed the need for a special marker for empty elements\n  -- and then retracted that proposal because it led to new problems -- but\n  guess what survived in XML!  and now we have the same stupid issues that\n  caused people to think long and hard and come up with XML come to Lisp\n  because John McCarthy made the acute observation that XML is basically\n  parentheses with labels on them, but some people didn't get the meaning\n  of that: drop the stupid labels in XML.  it was _not_ an invitation to\n  add labels or (syntactic) markers to Lisp.\n\n&gt;however, I don't expect anyone to understand this unless they actually\n  understand SGML, and very few people do, least of all the people who\n  think it's great, so I just wanted to put it in writing in case someone\n  gets the message. \n\n&gt;structure only appears a priori evident to people who didn't build it.", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02c48y", "parent_id": "t1_c02bz18", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 9, "name": "t1_c02bz18", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zcwx", "retrieved_on": 1427425072, "score_hidden": false, "body": "Wow.\n\n&gt; Robbery is not just another way of making a living, rape is not just another way of satisfying basic human needs, torture is not just another way of interrogation.  And XML is not just another way of writing S-exps. There are some things in life that you do not do if you want to be a moral being and feel proud of what you have accomplished.\n\nThat is ... pretty strong language for a specification for text markup.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02bypz", "id": "c02bz18", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193728373", "name": "t1_c02c46v", "gilded": 0, "link_id": "t3_5zcwx", "retrieved_on": 1427425005, "score": 1, "score_hidden": false, "body": "&gt;Contrary to the foolish notion that syntax is immaterial, people optimize the way they express themselves, and so express themselves differently with different syntaxes.\n\n\n---\n\n&gt;The Web provided me with a much\n  needed realization that information cannot be /fully/ separated from\n  its presentation, and showed me something I knew without verbalizing\n  explicitly, that the presentation form we choose communicates real\n  information.  Encoding all of it via markup would require a very\n  fine level of detail, not to mention /awareness/ of issues so widely\n  dispersed in the population that only a handful of people per\n  million grasp them.  Therefore, to be successful, there must be an\n  upper limit to the complexity of the language defined with SGML, and\n  one must go on to solve the next problem, not sit idle with a set of\n  great tools and think \"I ought to use these tools for something\".\n  Stultifying as the language of content models may be, it amazes me\n  that people do not grasp that they need to use something else when\n  it becomes too painful to express with SGML, but I am in the highly\n  privileged position of knowing a lot more than SGML when I pronounce\n  my judgment on XML.  For one thing, I knew Lisp before I saw SGML,\n  so I know what brilliant minds can do under optimal conditions and\n  when they ensure that the problem is still bigger than the solution. ", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c02bypz", "id": "c02c46v", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 6, "controversiality": 0, "archived": true, "link_id": "t3_5zcwx", "retrieved_on": 1427425076, "id": "c02bypz", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02bypz", "parent_id": "t3_5zcwx", "body": "Erik's rant about XML is [here](http://groups.google.com/group/comp.lang.lisp/msg/a0e340b526c4a07)", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "grauenwolf", "created_utc": "1193674383", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 4, "author": "jmelesky", "created_utc": "1193675791", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "grauenwolf", "created_utc": "1193676085", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c02bzhl", "gilded": 0, "link_id": "t3_5zcwx", "retrieved_on": 1427425066, "score": 2, "body": "I suspect you won't. I also came from VB background and have great dislike for braces. You can (and need to) have auto-formatting with whitespace-sensitive syntax, so it makes very little difference in terms of keypresses, but it limits surprises you can have reading other people's crappy code.", "author": "sans-serif", "created_utc": "1193677054", "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "ups": 2, "parent_id": "t1_c02bzd6", "score_hidden": false, "id": "c02bzhl"}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 3, "author": "mjd", "created_utc": "1193681214", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "grauenwolf", "created_utc": "1193683312", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193683935", "name": "t1_c02c0cx", "gilded": 0, "link_id": "t3_5zcwx", "retrieved_on": 1427425056, "score": 11, "score_hidden": false, "body": "With Haskell, the canonical version of the syntax uses braces to delimit blocks, and semicolons to separate statements.  The meaning of whitespace laid out code is defined in terms of this base: if the parser is expecting a brace or a semicolon, and sees something else instead, it infers the missing punctuation from the indentation in a clearly-defined way.  But if the punctuation is there, it doesn't infer anything.\n\nSo you never have to wonder what is being inferred; it is spelled out in the spec.\n\nAnother useful implication of this is that any Haskell program can be trivially rewritten into a version for which whitespace doesn't matter.  \n\nAnother is that folks on the haskell IRC channels can paste one-line code snippets at each other that work.  Python snippets are much harder to past-and-copy because if you screw up the whitespace, the code breaks.  Similar benefits obtain in other whitespace-challenged media.\n\nAnother is that there is an escape hatch.   If for some reason you don't want to use the whitespace-sensitivity on some particular line, you don't have to; you just put in the punctuation on that one line.\n\n", "author": "mjd", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 11, "parent_id": "t1_c02c0al", "id": "c02c0cx", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "name": "t1_c02c0al", "controversiality": 0, "author_flair_text": null, "ups": 1, "link_id": "t3_5zcwx", "retrieved_on": 1427425056, "body": "Can you go into more detail?", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02c01z", "id": "c02c0al", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02c01z", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 3, "link_id": "t3_5zcwx", "retrieved_on": 1427425059, "id": "c02c01z", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02bzd6", "body": "After I learned Python, I thought it was a dumb idea, but then I learned Haskell and I decided that it was a good idea that Python had done in a dumb way.\n\nThe details matter here.\n", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "jmelesky", "created_utc": "1193702434", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": 3, "gilded": 0, "link_id": "t3_5zcwx", "retrieved_on": 1427425027, "score": 3, "body": "In C languages, you get fun stuff like this\r\n\r\n    if (x==0);\r\n    { \r\n      y=5;\r\n    }\r\n\r\nAt first glance I suspect most people won't catch the error, they will just keep staring at it and wondering why y is being set to 5 no matter what x is.\r\n\r\nThis is a uniquely C bug, no other language family lets you so easily dis-associate a code block from its if statement.\r\n\r\nBut that's C's problem. What I wonder about is what subtle interactions the whitespace-based languages introduce.", "id": "c02c2in", "author": "grauenwolf", "created_utc": "1193704612", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02c2in", "parent_id": "t1_c02c2c7", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02c2c7", "ups": 1, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zcwx", "retrieved_on": 1427425029, "score_hidden": false, "body": "I like whitespace, myself. It works visually, and it works fine on entry. I find the space/tab thing to be a bit of a red herring -- a day or so of work with a whitespace-significant language will get it straight in your head.\n\nAs far as compile-time errors go, i'm not sure what it could introduce.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02bzd6", "id": "c02c2c7", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 0, "controversiality": 0, "archived": true, "link_id": "t3_5zcwx", "retrieved_on": 1427425067, "id": "c02bzd6", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02bzd6", "parent_id": "t1_c02bzc2", "body": "Never used them, so I can't really give an opinion.\r\n\r\nI suspect that I will dislike them greatly, as I rely so heavily on auto-formatting I never use the tab key. But really, that's the kind of thing you really have to try for a few months before you can form an honest opinion.\r\n\r\nI do like that it eliminates a class of compile-time errors, but I fear it may introduce others. \r\n\r\nWhat about you?\r\n", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 4, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zcwx", "retrieved_on": 1427425069, "body": "What's your take on indentation-based blocks?", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02bzc2", "parent_id": "t1_c02bz5u", "id": "c02bzc2", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02bz5u", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 2, "link_id": "t3_5zcwx", "retrieved_on": 1427425070, "id": "c02bz5u", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5zcwx", "body": "&gt; Now imagine that you are a program required to find syntactic (\"well-formedness\") errors and report them to the user. In the XML one, it is possible to notice that the footnote should have ended before the para ended. In the S-expression version, the software does not know that there is a missing parenthesis until it gets to the end of the document. In a sufficiently long document, this bad error checking could cause major problems. Even where there are no errors, it can be tricky in less powerful text editors to know which parentheses match each other.\r\n\r\n\r\nThat's my same complaint about C-languages and their use of } to end constructs.", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 13, "author": "[deleted]", "created_utc": "1193678265", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 6, "author": "joe24pack", "created_utc": "1193679669", "children": [{"controversiality": 0, "retrieved_on": 1427425036, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02c1rk", "gilded": 0, "link_id": "t3_5zcwx", "downs": 0, "score": 0, "score_hidden": false, "id": "c02c1rk", "author": "me2i81", "created_utc": "1193696593", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 0, "parent_id": "t1_c02bzuw", "body": "Edith Keeler must die", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 6, "controversiality": 0, "archived": true, "link_id": "t3_5zcwx", "retrieved_on": 1427425061, "id": "c02bzuw", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02bzuw", "parent_id": "t1_c02bzo1", "body": "&gt;if the machine manipulates the expression, not the human? \n\nThat's a big assumption.  Some people prefer doing things manually and working with stone knives and bear skins.", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "[deleted]", "created_utc": "1193680368", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "[deleted]", "created_utc": "1193681871", "children": [{"controversiality": 0, "retrieved_on": 1427425052, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02c0jn", "gilded": 0, "link_id": "t3_5zcwx", "downs": 0, "score": 2, "score_hidden": false, "id": "c02c0jn", "author": "OMouse", "created_utc": "1193685444", "distinguished": null, "edited": true, "author_flair_text": null, "subreddit": "programming", "ups": 2, "parent_id": "t1_c02c04k", "body": " [You only need one \\[](http://www.zedshaw.com/essays/stackish_xml_alternative.html) \n\nExample:\n\n    [[6 bar [ 5 bar foo\n\nWhich in S-expression form is:\n\n    (foo (bar 5) (bar 6))\n\n(I include the example because I had trouble deciphering Stackish till I converted it back to an s-expr)", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "name": "t1_c02c04k", "controversiality": 0, "author_flair_text": null, "ups": 2, "link_id": "t3_5zcwx", "retrieved_on": 1427425058, "body": "But can your foos and bars contain more than one object?  Then you need ()s again.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02bzy4", "id": "c02c04k", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 2, "controversiality": 0, "archived": true, "link_id": "t3_5zcwx", "retrieved_on": 1427425060, "id": "c02bzy4", "author_flair_text": null, "distinguished": null, "edited": true, "name": "t1_c02bzy4", "parent_id": "t1_c02bzo1", "body": " Phooey on your prefix and outfix notations.  I can do it as:\n\n5 bar foo\n\nin postfix. ", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "ups": 3, "gilded": 0, "link_id": "t3_5zcwx", "retrieved_on": 1427425056, "score": 3, "body": "Unquoted digits as numeric values isn't an intrinsic property of the format;  that's the parser's domain.  It's the same with markup.", "author": "mattucf", "created_utc": "1193683858", "distinguished": null, "edited": false, "id": "c02c0cg", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02c0cg", "parent_id": "t1_c02bzo1", "score_hidden": false, "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "grauenwolf", "created_utc": "1193683985", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "vagif", "created_utc": "1193687803", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c02c1b9", "gilded": 0, "link_id": "t3_5zcwx", "retrieved_on": 1427425042, "score": 3, "body": "That addressed addressed SEXP v binary/machine-generated, not SEXP v XML.", "id": "c02c1b9", "author": "newton_dave", "created_utc": "1193692047", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 3, "parent_id": "t1_c02c0tb", "score_hidden": false, "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "grauenwolf", "created_utc": "1193693905", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193694705", "name": "t1_c02c1lf", "gilded": 0, "link_id": "t3_5zcwx", "retrieved_on": 1427425039, "score": 1, "score_hidden": false, "id": "c02c1lf", "author": "vagif", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 1, "parent_id": "t1_c02c1ia", "body": "Err, I thought you meant that XML is more human readable format that you can tweak manually as opposed to sexps. I probably misunderstood you.\n", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 1, "name": "t1_c02c1ia", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zcwx", "retrieved_on": 1427425040, "score_hidden": false, "body": "Did you perhaps mean to reply to Hobel? \r\n\r\nI ask because in the context of my post your questions don't make any sense.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02c0tb", "id": "c02c1ia", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02c0tb", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5zcwx", "retrieved_on": 1427425049, "id": "c02c0tb", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02c0cy", "body": "And you cannot go in and tweak manually sexpressions ? You cannot read them ?\n\nI wonder what all lispers do. Read and manually tweak binary data ?\n", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02c0cy", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 1, "link_id": "t3_5zcwx", "retrieved_on": 1427425056, "body": "&gt; Why would you ever have missing closing ), if the machine manipulates the expression, not the human?\r\n\r\nThere could be a flaw in the program that generates the data. We deal with bad XML all the time, and the businesses we deal with are not willing to fix it on their side.\r\n\r\n&gt; Why would you write that stuff yourself, when your GUI or web frontend encapsulates and checks everything before it gets stored in an SEXP?\r\n\r\nThe whole point of having a human-readable format is that you can go in and tweak the values manually. If not, we would be using a binary format.\r\n", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02bzo1", "id": "c02c0cy", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "Smallpaul", "created_utc": "1193719766", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "ups": 2, "gilded": 0, "link_id": "t3_5zcwx", "retrieved_on": 1427425009, "score": 2, "body": "Oh, but even if you edit structured trees directly, a tool is there to help you dump those trees in *correctly nested* expressions, be it XML or SEXP.\n\nIf you use vi, well, your own problem ;-)\n\n(and that's nothing against vi, but all against editors without built-in support for whatever you're editing.)", "author": "[deleted]", "created_utc": "1193723466", "distinguished": null, "edited": false, "author_flair_css_class": null, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02c3yp", "parent_id": "t1_c02c3qv", "score_hidden": false, "id": "c02c3yp"}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 1, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zcwx", "retrieved_on": 1427425011, "body": "&gt; This is BS. Why would you ever have missing closing ), if the machine manipulates the expression, not the human?\n\nWho said that only machines manipulate these expressions? Both XML and S-expressions would have been massive failures if they had made that assumption.\n\nAlso, who programs the machines?\n", "archived": true, "distinguished": null, "edited": true, "name": "t1_c02c3qv", "parent_id": "t1_c02bzo1", "id": "c02c3qv", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02bzo1", "ups": 13, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zcwx", "retrieved_on": 1427425065, "score_hidden": false, "body": "This is BS.  Why would you ever have missing closing ), if the *machine* manipulates the expression, not the human?  Why would you write that stuff yourself, when your GUI or web frontend encapsulates and checks everything *before* it gets stored in an SEXP?\n\nThe difference between XML and SEXPs is that XML is verbose and that XML only has string types (unless you use ridiculously verbose tags like from XML schema).\n\n&lt;foo&gt;&lt;bar&gt;5&lt;/bar&gt;&lt;/foo&gt;\n\nis equivalent to (foo (bar \"5\"))\n\n(foo (bar 5)) adds the information that 5 is a number, not a string.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5zcwx", "id": "c02bzo1", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -3, "author": "mattucf", "created_utc": "1193683485", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 4, "author": "grauenwolf", "created_utc": "1193684094", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "mattucf", "created_utc": "1193687453", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "mattucf", "created_utc": "1193690439", "children": [{"controversiality": 0, "retrieved_on": 1427425023, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02c2ri", "gilded": 0, "link_id": "t3_5zcwx", "downs": 0, "score": 2, "score_hidden": false, "body": "&gt;but the s-expression representation has no such constraint -- it's syntactically valid once the correct number of (unescaped &amp; unquoted) right parens is present, wherever they may be.\n\nThat is done by the interpreter of the s-expression. The footnote element could require that only one string argument is given to it.", "author": "OMouse", "created_utc": "1193707832", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 2, "parent_id": "t1_c02c14p", "id": "c02c2ri", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425015, "subreddit_id": "t5_2fwo", "created_utc": "1193715641", "ups": 1, "gilded": 0, "link_id": "t3_5zcwx", "downs": 0, "score": 1, "id": "c02c3fp", "author": "KayEss", "archived": true, "distinguished": null, "edited": false, "body": "?\n\nThe nesting structure of the s-expr is the same as the XML. You cannot have the footnote extend beyond the end of the paragraph - they are nested in both formats.\n\nThe difference is that the close paren is the same for all opening elements in the s-expr so the close paren for the para will close the footnote leaving the para unclosed.\n\nIn XML the close for the para cannot close the footnote so the error can be correctly diagnosed by a parser.", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02c3fp", "parent_id": "t1_c02c14p", "score_hidden": false, "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "Smallpaul", "created_utc": "1193720173", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 2, "author": "mattucf", "created_utc": "1193753150", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1193854527", "ups": 1, "gilded": 0, "link_id": "t3_5zcwx", "retrieved_on": 1427424865, "score": 1, "body": "I'm sorry, you're making no sense whatsoever. In the s-expression version you've nested a paragraph within a paragraph. In the XML version you've created overlapping elements. If you wanted the XML version to nest, you could do that. The s-expression version has no way to express the overlapping structures. All that you've proven is that some non-tree variant of XML could (in theory) be more expressive than s-expressions. \n\nThere are such variants: \n\nhttp://www.concretesyntax.com/international_workshop_on_markup_of_overlapping_structures\n\nBut they are not very popular.\n", "author": "Smallpaul", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "score_hidden": false, "name": "t1_c02cf3b", "parent_id": "t1_c02c5g9", "id": "c02cf3b", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02c5g9", "ups": 2, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zcwx", "retrieved_on": 1427424989, "score_hidden": false, "body": "It's exactly because of the end tags that the XML representation is more constrained.\n\n    (document author: \"paul@prescod.net\"\n    \t(para \"This is a paragraph \" (footnote \"(better than the one under there)\" \".\")\n    \t(para \"Ha! I made you say \\\"underwear\\\".\")))\n\nWithout additional rules stating that, say, a para can't contain a para (or a footnote can't have two attributes), this expression is valid.  But you can't do:\n\n    &lt;document author=\"paul@prescod.net\"&gt;\n    &lt;para&gt;This is a paragraph &lt;footnote&gt;(just a little one).&lt;/para&gt;\n    &lt;para&gt;Ha! I made you say \"underwear\".&lt;/para&gt;\n    &lt;/footnote&gt;&lt;/document&gt;\n\nThe redundancy is what creates the overlap, turning what would be a valid (if not reasonable) grouping into an illegal one.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02c3s0", "id": "c02c5g9", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 2, "controversiality": 0, "archived": true, "link_id": "t3_5zcwx", "retrieved_on": 1427425010, "id": "c02c3s0", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02c3s0", "parent_id": "t1_c02c14p", "body": "&gt; XML is not S-expressions because it restricts certain representations in the name of well-formedness. The author's example of a well-formedness error fails as a comparison because it's not the same error in both representations. XML rules mandate that a &lt;footnote&gt; has to end before its enclosing &lt;para&gt; ends, but the s-expression representation has no such constraint -- it's syntactically valid once the correct number of (unescaped &amp; unquoted) right parens is present, wherever they may be.\n\nThat makes no sense. S-expressions have the same constraint (a (b c) d) is by definition interpreted as [a (b c) d] and never as [a (b c] d). Neither XML nor S-expressions allow overlapping expressions. XML puts redundant information in the end-tags to make the matching easier (for humans and machines working with incorrect data). S-expressions elide the redundant data because for programming, conciseness is arguably more important.\n", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 2, "controversiality": 0, "archived": true, "link_id": "t3_5zcwx", "retrieved_on": 1427425045, "id": "c02c14p", "author_flair_text": null, "distinguished": null, "edited": true, "name": "t1_c02c14p", "parent_id": "t1_c02c0rk", "body": " ...which makes me realize that the author does have a point (albeit not what he/she tries to articulate).  \n\nXML is not S-expressions because it restricts certain representations in the name of well-formedness.  The author's example of a well-formedness error fails as a comparison because it's not the same error in both representations.  XML rules mandate that a &lt;footnote&gt; has to end before its enclosing &lt;para&gt; ends, but the s-expression representation has no such constraint -- it's syntactically valid once the correct number of (unescaped &amp; unquoted) right parens is present, wherever they may be. ", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425040, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02c1id", "gilded": 0, "link_id": "t3_5zcwx", "downs": 0, "score": 2, "score_hidden": false, "body": "Fair-enough, we all forget things from time to time.", "author": "grauenwolf", "created_utc": "1193693952", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 2, "parent_id": "t1_c02c0rk", "id": "c02c1id", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02c0rk", "ups": 2, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zcwx", "retrieved_on": 1427425049, "score_hidden": false, "body": "My mistake.  I didn't know the rule about overlapping elements being considered not well-formed.  I suppose I should have.", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02c0dn", "id": "c02c0rk", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02c0dn", "ups": 4, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zcwx", "retrieved_on": 1427425055, "score_hidden": false, "body": "What are you talking about?", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02c0b4", "id": "c02c0dn", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": -3, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zcwx", "retrieved_on": 1427425056, "body": "&gt; In the XML one, it is possible to notice that the footnote should have ended before the para ended.\n\nNot with well-formedness rules alone.  The \"superior\" XML parser is just as clueless until it sees the root-element closer.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02c0b4", "parent_id": "t3_5zcwx", "id": "c02c0b4", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 0, "author": "OMouse", "created_utc": "1193687748", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "mjd", "created_utc": "1193696786", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "OMouse", "created_utc": "1193698216", "children": [{"controversiality": 0, "retrieved_on": 1427425024, "subreddit_id": "t5_2fwo", "created_utc": "1193706897", "ups": 2, "gilded": 0, "link_id": "t3_5zcwx", "downs": 0, "score": 2, "body": "TeX does not have labeled end tags.  The \\begin{foo}...\\end{foo} is introduced by LaTeX.  TeX groups typically look like {...}.\n", "id": "c02c2ow", "author": "mjd", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "name": "t1_c02c2ow", "parent_id": "t1_c02c1xi", "score_hidden": false, "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "Smallpaul", "created_utc": "1193719947", "children": [{"controversiality": 0, "retrieved_on": 1427425007, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02c3zy", "gilded": 0, "link_id": "t3_5zcwx", "downs": 0, "score": 1, "score_hidden": false, "body": "LaTeX and TeX are transformed into HTML, or PDF or PostScript so it can be rendered.\n\nXML can be transformed using XSL into HTML, or PDF or PostScript so it can be rendered. Of course this depends on what kind of structure the XML document conforms to.", "author": "OMouse", "created_utc": "1193724106", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 1, "parent_id": "t1_c02c3rc", "id": "c02c3zy", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02c3rc", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 1, "link_id": "t3_5zcwx", "retrieved_on": 1427425011, "body": "LaTeX and TeX do with ______ what XSL does with XML.\n\nPlease fill in the blank.\n", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02c1xi", "id": "c02c3rc", "author_flair_css_class": null}], "subreddit": "programming", "ups": 1, "name": "t1_c02c1xi", "controversiality": 0, "archived": true, "link_id": "t3_5zcwx", "retrieved_on": 1427425034, "score_hidden": false, "id": "c02c1xi", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02c1sb", "body": "... it does. You've made me realize that LaTeX and TeX do what XSL does with XML.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02c1sb", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5zcwx", "retrieved_on": 1427425036, "id": "c02c1sb", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02c0t2", "body": "&gt; LaTeX is just a bunch of macros for TeX so TeX is to blame for the end-tags.\n\n1. Non-sequitur.\n\n2. Wrong.\n\nHope this helps.\n", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "Smallpaul", "created_utc": "1193719558", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "OMouse", "created_utc": "1193723825", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1193736557", "ups": 1, "gilded": 0, "link_id": "t3_5zcwx", "retrieved_on": 1427425001, "score": 1, "body": "&gt; XML [alone] and S-Expressions have nothing to do with how something is displayed on the screen or a printer.\n\nYes. That's the point. The thread is about the ecosystem of tools around the languages. It makes no sense to evaluate \"XML on its own\". XML was invented concurrently with XSLT, RELAX NG, XSL FO, SAX, XHTML, XPath and XPointer for a _reason_. It is the family of specs that is productive, not the first one.\n\n&gt; The whole ecosystem of XML-based specs can be transformed to use S-Expressions and it wouldn't make any difference to the spec.\n\nYou just said that XML's primitive data model and S-expression's primitive data model differ:\n\n&gt; XML on its own is basically elements, attributes, &lt;, &gt; and it only knows about strings.\n\n&gt; S-expressions on their own are basically elements, strings, symbols, integers, floating-point numbers, (, ) and that's it.\n\nSo how can I apply (e.g.) XPath to a totally different data model? Could you invent XPath, RELAX NG, XSL FO, etc. for generic s-expressions? Sure. How about we discuss this again when you _have done so_.\n", "id": "c02c4hq", "author": "Smallpaul", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "name": "t1_c02c4hq", "parent_id": "t1_c02c3z9", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02c3z9", "ups": 1, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5zcwx", "retrieved_on": 1427425009, "score_hidden": false, "body": "&gt;It isn't the person-years that is relevant. It is the person-years applied to the specific problems of standardized and efficient validation, transformation and rendering to print, web and other mediums.\n\nYes and this is all done by programs coded in various languages that can translate binary data into other binary data. XML and S-Expressions have nothing to do with how something is displayed on the screen or a printer.\n\n&gt;If you show me a family of Lisp technologies used by let's say, Scheme, Lisp and ELisp programmers that do s-expression validation, transformation, print and web rendering then you've shown that s-expressions are minimally competitive with XML.\n\nXML can't do web or print rendering. This is a simple matter of translating XML into HTML or the binary input that a printer accepts.\n\nXML on its own is basically elements, attributes, &lt;, &gt; and it only knows about strings. From this, you translate it to other formats to make it appear on the screen or a printer.\n\nS-expressions on their own are basically elements, strings, symbols, integers, floating-point numbers, (, ) and that's it. From this, you translate it to other formats to make it appear on the screen or a printer.\n\nThe whole ecosystem of XML-based specs can be transformed to use S-Expressions and it wouldn't make any difference to the spec.\n\n&gt;Let's take the simplest possible example. What is the \"S-expression way\" to say that your program expects a (foo) node containing one or more (bar) node each containing zero or one (baz) node. Now show me where to download the code to validate the s-expressions in Common Lisp, Scheme and ELisp.\n\nI'll admit I can't point you to tools that do that but I haven't fully researched those languages either. Does it count if I started to write Scheme code to validate s-expressions? :P", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02c3qh", "id": "c02c3z9", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 1, "controversiality": 0, "archived": true, "link_id": "t3_5zcwx", "retrieved_on": 1427425011, "id": "c02c3qh", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02c3qh", "parent_id": "t1_c02c0t2", "body": "There was no comments section because the article was written in around 1999 before that was fashionable.\n\n&gt; What's he talking about?? This is a problem with Perl, Python, C, C++, and all other programming languages. There is always some piece of syntax that a HUMAN may forget.\n\nPerl, C, C++ programmers deal with the issue through indentation. This is a poor solution for prose text.\n\n&gt; Smart editing tools aren't needed when your format is being manipulated by the machine and not by a human.\n\nYes, but that isn't what XML was designed for. That's why XML is not S-expressions. If you continue to view it from the point of view of solving the problems that s-expressions were designed to solve then you will continue to misunderstand its design.\n\n\n\n&gt; &gt;    You cannot evaluate the hype around XML without incorporating all of these technologies into the evaluation. Cumulatively there are decades of person-effort embodied in those specifications!\n\n&gt; What kind of an argument is that? I can say the same about S-expressions since Lisp was created in 1958 (something like that).\n\nIt isn't the person-years that is relevant. It is the person-years applied to the specific problems of standardized and efficient validation, transformation and rendering to print, web and other mediums. If you show me a family of Lisp technologies used by let's say, Scheme, Lisp and ELisp programmers that do s-expression validation, transformation, print and web rendering then you've shown that s-expressions are minimally competitive with XML. Conversely, if you say that a sufficiently intelligent Lisp programmers COULD CREATE such a system and could use some unspecified mechanism to enforce its standardization.\n\nLet's take the simplest possible example. What is the \"S-expression way\" to say that your program expects a (foo) node containing one or more (bar) node each containing zero or one (baz) node. Now show me where to download the code to validate the s-expressions in Common Lisp, Scheme and ELisp.\n", "author_flair_css_class": null}], "subreddit": "programming", "ups": 0, "name": "t1_c02c0t2", "controversiality": 0, "archived": true, "link_id": "t3_5zcwx", "retrieved_on": 1427425049, "score_hidden": false, "id": "c02c0t2", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5zcwx", "body": "&gt;These are both well-documented problems with Lisp. Smart editing tools can help but the cannot solve the problem.\n\nWhat's he talking about?? This is a problem with Perl, Python, C, C++, and all other programming languages. There is always some piece of syntax that a HUMAN may forget.\n\nSmart editing tools aren't needed when your format is being manipulated by the machine and not by a human.\n\n&gt;By the way, LaTeX (the language used for much Lisp-world documentation) does put tag-names in end-tags (at least for large blocks of content) just as XML does. So do most, if not all, other markup languages, whether from the SGML family or not.\n\nNot the fault of Lispers. LaTeX is just a bunch of macros for TeX so TeX is to blame for the end-tags. In any case, LaTeX/TeX sticks to one thing: typesetting. SGML and XML on the other hand try to be jacks of all trade, masters of none.\n\n&gt;You cannot evaluate the hype around XML without incorporating all of these technologies into the evaluation. Cumulatively there are decades of person-effort embodied in those specifications!\n\nWhat kind of an argument is that? I can say the same about S-expressions since Lisp was created in 1958 (something like that).\n\nIs it any wonder that there is no comments section on his website or even an email address?", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193720498", "name": "t1_c02c3sp", "gilded": 0, "link_id": "t3_5zcwx", "retrieved_on": 1427425010, "score": 4, "score_hidden": false, "id": "c02c3sp", "author": "Smallpaul", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 4, "parent_id": "t3_5zcwx", "body": "I wrote this article in the late 90s or early part of this century. Here we are approaching a decade later and R6RS of Scheme is still produced with a markup system and not an s-expression system. Here we are with Lisp-people still arguing as if the dominance of markup systems in (for example) the publishing world is a mere accident of history and not the obvious result of three decades of separate evolution and specialization for solving different problems.\n\nXML is not S-expressions. But please, let's do discuss this again in 2015.\n", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 4, "author": "Blackheart", "created_utc": "1193762482", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "author_flair_text": null, "gilded": 0, "link_id": "t3_5zcwx", "retrieved_on": 1427424862, "score": 2, "created_utc": "1193855828", "score_hidden": false, "id": "c02cf9a", "author": "Smallpaul", "archived": true, "distinguished": null, "edited": true, "body": "There is so much bullshit in one post that it is hard to know where to start.\n\nYou might have had a point, but you mixed it in with so many provable falsehoods that you shot your credibility to shit.\n\n&gt; This is one of the most fundamental flaws which pervades the SGML and the XML family, the erroneous notion that code (computation) cannot be expressed in a platform-independent fashion or analyzed automatically by a computer.\n\nOf course code can be expressed in a platform-independent fashion. But it is a fundamental truth of computer science that many interesting questions cannot be asked of code in a Turing-complete language.\n\nYou mentioned undecidability but waved your hands past it as if it is irrelevant. It is not: it is key. If you send me a schema to validate your data, I want to know that the validation process will terminate in a predictable amount of time. In some circumstances I want the same for applying a stylesheet (in which case I use something like CSS). Otherwise I use something like DSSSL or XSL.\n\nBut you are proposing something even more insane: you are claiming that the data exchange language itself should be programmable. This implies Google should run arbitrary scripts to follow links in an RSS or HTML file. If these scripts go into an infinite loop, oh well.\n\n&gt; This is why XML has macros rather than function definitions, \n\nXML does not have macros. It has simple text substitutions. Even these simple substitutions can be used for security attacks which is why they are often turned off in XML processors. You're proposing that we should go beyond text substitution, beyond macros to Turing complete language.\n\n&gt; and why XML expanded into a body of related standards that do perform computation, such as XQuery, CSS, etc.\n\nYes, the XML family of standards is layered so that different applications can choose the appropriate set to implement.\n\nIsn't Lisp layered? Does every Lisp variant ship with the exact same set of libraries?\n\n&gt; Lambda-calculus is portable and entirely platform-independent. \n\nOh really? Can you please point me to the RFC for this cross platform \"lambda calculus?\" How are integers encoded? What is its character set?\n\n&gt; And while it is true that some problems in LC are undecidable, it is also the case that some parsing problems are undecidable, natural language recognition in particular (and note that most XML documents are largely natural language).\n\nYou aren't making any sense. \"XML can be a transport format for undecidable content therefore it might as well have undecidable properties itself.\" Why don't we turn ASCII into a programming language while we are at it?\n\n&gt; SGML was created by a lawyer. XML was created by people whose entire notion of programs was limited to C and C++, so they could not conceive of mobile or even portable code.\n\nFunny, having been at the meetings, I could have sworn that the most influential people on the committee included:\n\n * a representative of Netscape, creator of the most popular mobile code language in the history of the world\n\n * a representative of Sun, creators of the second most popular mobile code language\n\n * a representative of Microsoft, the major distributor of the two mobile code languages described above\n\n * the inventor of DSSSL, a Scheme variant\n\n * representatives of SoftQuad, who used Scheme extensively for their tool configuration languages\n\nIn fact, I can say with confidence that C and C++ were about least relevant languages under discussion. Sun's marketing for XML was: \"XML gives Java something to do.\"\n\n&gt; They didn't know anything about semantics, which is why they thought that a tag somehow automatically lends semantics to the body of an element. (In the absence of a form of computation, the meaning of a tag is no different than that of a number: it only expresses that one or more things are distinct.)\n\nSorry, can you point me to the part of the XML specification that says that a tag \"lends semantics?\" Can you even define what it would mean to \"lend semantics\"?\n\n&gt; They didn't know anything about programming languages, which is why XML has macros instead of proper variables, and CSS and DSSSL, etc. are based on rules, defaults and triggers with arbitrary prioritization conditions instead of the obvious recursive tree morphism, and why you can't do simple things like change the order in which elements are rendered.\n\nJames Clark, inventor of DSSSL doesn't \"know anything about programming languages.\" You should do five minutes of research, friend.\n\n&gt; They didn't know anything about type theory, which is why the original XML type system (DTD's) got a confused treatment as a parsing problem, and why XML schemas are so bizarre and overly complicated.\n \nIt isn't XML that is confused. It is you. DTDs are not a type system. DTDs are a grammar definition syntax. Like BNF. Not like Haskell types.\n\n&gt; They didn't know anything about parsing, which is why XML's syntax is so impoverished and verbose, and why almost all the XML companion standards are expressed in XML.\n\nFunny, if the XML companion standard were NOT expressed in XML, then that would be used as proof that XML is poor. But if they ARE then that is proof that the standardizers didn't know parsing. Oh well, if you can't please the unthinking morons you might as well make a technology that vastly improves the world. It's a fallback position.\n", "subreddit": "programming", "ups": 2, "parent_id": "t1_c02c6ib", "name": "t1_c02cf9a", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 4, "name": "t1_c02c6ib", "controversiality": 0, "archived": true, "link_id": "t3_5zcwx", "retrieved_on": 1427424975, "score_hidden": false, "id": "c02c6ib", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t3_5zcwx", "body": "&gt; The central idea of the XML family of standards is to separate code from data. The cental idea of Lisp is that code and data are the same and should be represented the same.\n\nThis is one of the most fundamental flaws which pervades the SGML and the XML family, the erroneous notion that code (computation) cannot be expressed in a platform-independent fashion or analyzed automatically by a computer.\n\nThis is why XML has macros rather than function definitions, and why XML expanded into a body of related standards that *do* perform computation, such as XQuery, CSS, etc.\n\nLambda-calculus is portable and entirely platform-independent. So are things like (subsets of) Javascript. And while it is true that some problems in LC are undecidable, it is also the case that some parsing problems are undecidable, natural language recognition in particular (and note that most XML documents are largely natural language).\n\nSGML was created by a lawyer. XML was created by people whose entire notion of programs was limited to C and C++, so they could not conceive of mobile or even portable code.\n\n* They didn't know anything about semantics, which is why they thought that a tag somehow automatically lends semantics to the body of an element. (In the absence of a form of computation, the meaning of a tag is no different than that of a number: it only expresses that one or more things are distinct.)\n\n* They didn't know anything about programming languages, which is why XML has macros instead of proper variables, and CSS and DSSSL, etc. are based on rules, defaults and triggers with arbitrary prioritization conditions instead of the obvious recursive tree morphism, and why you can't do simple things like change the order in which elements are rendered.\n\n* They didn't know anything about type theory, which is why the original XML type system (DTD's) got a confused treatment as a parsing problem, and why XML schemas are so bizarre and overly complicated.\n\n* They didn't know anything about parsing, which is why XML's syntax is so impoverished and verbose, and why almost all the XML companion standards are expressed in XML.\n\nThere is hardly anything about XML which is \"right\". The fact that XML is so successful is a tribute to the 'worse is better' philosophy.", "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427424914, "subreddit_id": "t5_2fwo", "author_flair_text": null, "name": "t1_c02cb6e", "gilded": 0, "link_id": "t3_5zcwx", "downs": 0, "score": 1, "score_hidden": false, "id": "c02cb6e", "author": "[deleted]", "created_utc": "1193806597", "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "ups": 1, "parent_id": "t3_5zcwx", "body": "[deleted]", "author_flair_css_class": null}
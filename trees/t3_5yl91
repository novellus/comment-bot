{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "[deleted]", "created_utc": "1192728345", "children": [{"controversiality": 0, "retrieved_on": 1427426103, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c029x0w", "gilded": 0, "link_id": "t3_5yl91", "downs": 0, "score": 2, "score_hidden": false, "id": "c029x0w", "author": "flaxeater", "created_utc": "1192732045", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 2, "parent_id": "t1_c029wi9", "body": "Well I must say that you are right it's more concise.  However I find the longer version more readable, because of my less educated brain.\r\n\r\nI know python very well but I have found EBNF impenetrable.  I have tried several times to learn it with frustrating results. So in my case it helps me look at the code to figure out the rules.\r\n\r\nSo it would ease my effort in building a simple parser.", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 4, "author": "[deleted]", "created_utc": "1192738372", "children": [{"controversiality": 0, "retrieved_on": 1427426087, "subreddit_id": "t5_2fwo", "created_utc": "1192740184", "score": 3, "link_id": "t3_5yl91", "downs": 0, "name": "t1_c029y5t", "score_hidden": false, "body": " I mentioned Pythons *tokenizer*. It's available in lib/tokenizer.py\n\nAn EBNF based parser generator is not in the stdlib. \n\nOne EBNF parser is available with [this](http://www.fiber-space.de/EasyExtend/doc/EE.html) package. The parser being used is a Python transcription of CPythons parser. It can obviously parse Python and accepts all LL(1) grammars. It is highly optimized and definitely not a toy parser generator.\n\n ", "author": "[deleted]", "archived": true, "distinguished": null, "edited": true, "gilded": 0, "author_flair_text": null, "subreddit": "programming", "ups": 3, "parent_id": "t1_c029xwz", "id": "c029y5t", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c029xwz", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 4, "link_id": "t3_5yl91", "retrieved_on": 1427426090, "body": "Since when did Python have a library that could   parse on a EBNF? Link please?", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c029wi9", "id": "c029xwz", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c029wi9", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 2, "link_id": "t3_5yl91", "retrieved_on": 1427426109, "body": " I'm not at all convinced that PyParsing eases parsing in any way. \n\nJust look at the code that is required to define a parser for [Pythons grammar](http://pyparsing.wikispaces.com/space/showimage/pythonGrammarParser.py) ( 90 lines of code appended to the grammar text )\nand compare it with the description it needs to define EBNF in EBNF using this very same grammar and Pythons stdlib tokenizer that strips whitespaces and single comments:\n\n      file_input: ( RULE | NEWLINE )* ENDMARKER\n      RULE: NAME ':' RHS NEWLINE\n      RHS: ALT ( '|' ALT )*\n      ALT: ITEM+\n      ITEM: '[' RHS ']' | ATOM [ '*' | '+' ]\n      ATOM: '(' RHS ')' | NAME | STRING\n\nCall me an EBNF zealot but that's the *meaning of life*: short, concise, readable, expressive, on the spot.\n ", "archived": true, "distinguished": null, "edited": true, "parent_id": "t3_5yl91", "id": "c029wi9", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1192743574", "ups": 7, "gilded": 0, "link_id": "t3_5yl91", "retrieved_on": 1427426082, "score": 7, "body": "pyparsing is a great tool written by a helpful person. i would have had many problems with my higher-ups if it were not for his tireless service. he was even helping me out from an airport in Germany on his laptop while waiting for a plane!\r\n", "author": "metaperl", "author_flair_text": null, "distinguished": null, "edited": false, "id": "c029yja", "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c029yja", "parent_id": "t3_5yl91", "score_hidden": false, "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": -13, "author": "manthrax", "created_utc": "1193122623", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 9, "author": "dons", "created_utc": "1193152503", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c02au56", "gilded": 0, "link_id": "t3_5ywm2", "retrieved_on": 1427425673, "score": 5, "score_hidden": false, "id": "c02au56", "author": "awj", "created_utc": "1193160731", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 5, "parent_id": "t1_c02aszb", "body": "&gt; You're expected to make a minimal effort to learn your subject matter, before you comment.\n\nBlasphemy. Don't you know that on the internet everyone has two Phd's in everything? Give me a minute to find printer and I can show you proof, even run my own university.", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193168367", "name": "t1_c02av83", "gilded": 0, "link_id": "t3_5ywm2", "retrieved_on": 1427425659, "score": -7, "score_hidden": false, "id": "c02av83", "author": "manthrax", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": -7, "parent_id": "t1_c02aszb", "body": "The fact that that one liner of haskell looks like navajo, was as far as I got in my minimal effort, and I wanted to give you a leg up.", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425659, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02av8f", "gilded": 0, "link_id": "t3_5ywm2", "downs": 0, "score": -5, "score_hidden": false, "body": "and oh yeah, lick my monad.\r\n", "author": "manthrax", "created_utc": "1193168426", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": -5, "parent_id": "t1_c02aszb", "id": "c02av8f", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 9, "controversiality": 0, "archived": true, "link_id": "t3_5ywm2", "retrieved_on": 1427425688, "id": "c02aszb", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02aszb", "parent_id": "t1_c02aqp8", "body": "You're expected to make a minimal effort to learn your subject matter, before you comment.", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02aqp8", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": -13, "link_id": "t3_5ywm2", "retrieved_on": 1427425718, "body": "navaho", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5ywm2", "id": "c02aqp8", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 33, "author": "psykotic", "created_utc": "1193126891", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 7, "author": "dons", "created_utc": "1193152578", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "sblinn", "created_utc": "1193166781", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 6, "author": "[deleted]", "created_utc": "1193168119", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 4, "author": "sblinn", "created_utc": "1193169075", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193170759", "name": "t1_c02avjx", "gilded": 0, "link_id": "t3_5ywm2", "retrieved_on": 1427425654, "score": 8, "score_hidden": false, "id": "c02avjx", "author": "dons", "archived": true, "distinguished": null, "edited": true, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 8, "parent_id": "t1_c02avbo", "body": " But note! `(.)` isn't \"syntax\", its just the function:\n\n    (.) :: (b -&gt; c) -&gt; (a -&gt; b) -&gt; (a -&gt; c)\n    (.) f g x = f (g x)\n\nThat is, the function that takes two functions, and combines them. So it's  not wired in syntax as such, just a library function. As is `($)`, which you also just define as:\n\n    ($):: (a -&gt; b) -&gt; a -&gt; b\n    f $ x = f x\n\nShockingly simple. No magic syntax. It's all just functions. ", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 4, "controversiality": 0, "archived": true, "link_id": "t3_5ywm2", "retrieved_on": 1427425657, "id": "c02avbo", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02avbo", "parent_id": "t1_c02av73", "body": "Thanks to your map example I now understand one more thing about Haskell syntax. This is a good day.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 6, "name": "t1_c02av73", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywm2", "retrieved_on": 1427425659, "score_hidden": false, "body": "I have found that (.) is particularly useful to get rid of the need to bind a variable in a function definition. For example, all three of these are the same:\n\n     h x = f (g x)\n     h x = f $ g x\n     h = f . g\n\nThis also helps clean things up in cases like this:\n\n     map (\\x -&gt; f (g x)) aList\n     map (f . g) aList", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02auzj", "id": "c02av73", "author_flair_css_class": null}], "subreddit": "programming", "ups": 1, "name": "t1_c02auzj", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywm2", "retrieved_on": 1427425662, "score_hidden": false, "body": "     &gt; eager beginners\n\n*raises hand*\n\nEven after reading:\n\nhttp://cs.anu.edu.au/Student/comp1100/haskell/tourofsyntax.html\n\nI don't grok `$` and `.` -- neither were mentioned. The complete Haskell syntax doesn't seem like a place that I as an \"eager beginner\" should dwell to pick up things that seem this useful, and my various tours of a few tutorials haven't imparted this knowledge to me, either. So until reading a comment on this thread:\n\nhttp://programming.reddit.com/info/5ywm2/comments/c02atle\n\nThe `$` syntax appeared simply to be \"some Haskell guru magic you're supposed to somehow innately understand\".\n\nThe Haskell syntax to which I linked? It's the second \"reference\" link at the main Learning Haskell page:\n\nhttp://haskell.org/haskellwiki/Learning_Haskell\n\nLink #1 is a 404.\n\nWhen I get to a [link](http://zvon.org/other/haskell/Outputglobal/index.html) that does mention `$`:\n\n&gt; right-associating infix application operator (f $ x = f x), useful in continuation-passing style\n\nI don't know now that I get it because I already understand it now, or because that is enough information. If something with multiple arguments were presented I think it would be immediately clear, such as the example given in the thread I linked to above.\n\nThe examples for `.` (\"function composition\") are much better. But I'm pretty thick-headed, I will probably get it wrong for at least another six weeks. Function composition was one of the strangest things to me when I first took a peek at Haskell. The example:\n\n    (negate . abs) (-1)\n    -1\n\nBasically it is `negate (abs (-1))` -- why is this better or worse than `negate $ abs (-1)`?", "archived": true, "distinguished": null, "edited": true, "parent_id": "t1_c02aszo", "id": "c02auzj", "author_flair_css_class": null}], "subreddit": "programming", "ups": 7, "name": "t1_c02aszo", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywm2", "retrieved_on": 1427425688, "score_hidden": false, "body": "This is how I would write it too, fwiw. `(.)` is often missed by eager beginners enarmored with `($)`", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02aqyb", "id": "c02aszo", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193155833", "ups": 6, "gilded": 0, "link_id": "t3_5ywm2", "retrieved_on": 1427425681, "score": 6, "body": "Thanks for making this comment, by the way. I was probably going to say something similar if you hadn't. :)", "id": "c02ath5", "author": "cgibbard", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02ath5", "parent_id": "t1_c02aqyb", "score_hidden": false, "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 10, "author": "pjdelport", "created_utc": "1193156453", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 4, "author": "sblinn", "created_utc": "1193167627", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 8, "author": "dons", "created_utc": "1193172178", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "sblinn", "created_utc": "1193192100", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193194159", "ups": 2, "gilded": 0, "link_id": "t3_5ywm2", "retrieved_on": 1427425614, "score": 2, "body": "They're just stylistic differences. My style rule is, in increasing order of complexity:\n\n    f x\n \n    g (f x)\n\n    h . g . f $ x\n\nFor composition. So once you're past 1 set of parens, consider `(.)` and `($)` to avoid excessive fingernail clippings -- we're not lisp programmers, after all :)", "id": "c02ayo4", "author": "dons", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02ayo4", "parent_id": "t1_c02ayi1", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 1, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywm2", "retrieved_on": 1427425616, "body": "    mapM f as =  sequence (map f as)\n\nIs the same as:\n\n    mapM f as = (sequence . map) f as\n\nand:\n\n    mapM f as = sequence $ map f as\n\nRight? Is there a \"rule of thumb\" to pick between the 3 ways? I suppose that (map f as) could be safely evaluated in parallel if f is pure, is that the reason?", "archived": true, "distinguished": null, "edited": true, "name": "t1_c02ayi1", "parent_id": "t1_c02avqo", "id": "c02ayi1", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 1, "author": "SamReidHughes", "created_utc": "1193204639", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193206525", "ups": 1, "gilded": 0, "link_id": "t3_5ywm2", "retrieved_on": 1427425603, "score": 1, "score_hidden": false, "id": "c02azip", "author": "pjdelport", "author_flair_text": null, "distinguished": null, "edited": true, "archived": true, "subreddit_id": "t5_2fwo", "name": "t1_c02azip", "parent_id": "t1_c02azfc", "body": "Or if you want,\n\n    mapM = sequence `dot` map\n\n([dot](http://haskell.org/haskellwiki/Pointfree#Dot)) ", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02azfc", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 1, "link_id": "t3_5ywm2", "retrieved_on": 1427425604, "body": " Excuse me?  That means mapM is defined as (sequence .) . map\n\nIt's true that sequence . map f = mapM f", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02avqo", "id": "c02azfc", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02avqo", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 8, "link_id": "t3_5ywm2", "retrieved_on": 1427425653, "id": "c02avqo", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02av48", "body": " Quite so\n\n    mapM      :: Monad m =&gt; (a -&gt; m b) -&gt; [a] -&gt; m [b]\n    mapM f as =  sequence (map f as)\n ", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 4, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywm2", "retrieved_on": 1427425660, "body": "From this I take it that `mapM` is defined as `sequence . map` -- is that correct?", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02av48", "parent_id": "t1_c02atkf", "id": "c02av48", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 10, "controversiality": 0, "archived": true, "link_id": "t3_5ywm2", "retrieved_on": 1427425680, "id": "c02atkf", "author_flair_text": null, "distinguished": null, "edited": true, "name": "t1_c02atkf", "parent_id": "t1_c02aqyb", "body": " `s/sequence . map/mapM/`, to save a bit extra. ", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 33, "controversiality": 0, "archived": true, "link_id": "t3_5ywm2", "retrieved_on": 1427425714, "id": "c02aqyb", "author_flair_text": null, "distinguished": null, "edited": true, "name": "t1_c02aqyb", "parent_id": "t3_5ywm2", "body": "   By eta reduction, it can be written a bit more neatly:\n\n    liftM dec . sequence . map (flip M.lookup decodeMap)\n\nAlso, even when you can't or don't want to eta reduce, there are advantages to using the (.) composition operator within a pipeline, leaving the ($) application operator only for the end; for one thing, it makes it easier to factor out the pipeline, in part or in whole, at a later time.\n\nAnyway, this is a typical (but good) example of how having data flow subsume control flow lets you manipulate control structures (or what would be control structures in other languages) like any other kind of data. Let me repeat that in different words: Haskell has no control flow, only data flow. That sounds shocking and weird, but it's the truth. (Of course, it can achieve the _effects_ of control flow as found in most other languages, otherwise it wouldn't be very useful.)", "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 13, "author": "jaybee", "created_utc": "1193139905", "children": [{"controversiality": 0, "retrieved_on": 1427425704, "subreddit_id": "t5_2fwo", "created_utc": "1193141282", "ups": 8, "gilded": 0, "link_id": "t3_5ywm2", "downs": 0, "score": 8, "body": "I had to parse that as\n\n&gt;Why doesn't all your base are belong to us?\n\nI think the author left out \"make\".", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "id": "c02arpp", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02arpp", "parent_id": "t1_c02arm5", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 13, "name": "t1_c02arm5", "controversiality": 0, "archived": true, "link_id": "t3_5ywm2", "retrieved_on": 1427425706, "score_hidden": false, "id": "c02arm5", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t3_5ywm2", "body": "&gt; Why doesn\u2019t all programming languages it this easy?\n\nThey were talking about changing the blurb on the haskell.org homepage recently -- I think this should go on as a quote.", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 4, "author": "wetelectric", "created_utc": "1193140446", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 8, "author": "logan_capaldo", "created_utc": "1193140975", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 4, "author": "wetelectric", "created_utc": "1193141752", "children": [{"controversiality": 0, "retrieved_on": 1427425702, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02arv0", "gilded": 0, "link_id": "t3_5ywm2", "downs": 0, "score": 24, "score_hidden": false, "id": "c02arv0", "author": "augustss", "created_utc": "1193143077", "distinguished": null, "edited": true, "author_flair_text": null, "subreddit": "programming", "ups": 24, "parent_id": "t1_c02arqy", "body": " So you'd prefer\n&gt;     let { a = flip M.lookup decodeMap; \n&gt;           b = map a s;\n&gt;           c = sequence b;\n&gt;           d = liftM dec\n&gt;     } ...\n\nIt's perfectly allowed, and I write a lot of code that looks similar to that. ", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425699, "subreddit_id": "t5_2fwo", "archived": true, "ups": 1, "gilded": 0, "link_id": "t3_5ywm2", "downs": 0, "score": 1, "body": "[deleted]", "author": "[deleted]", "created_utc": "1193145752", "distinguished": null, "edited": false, "id": "c02as3l", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02as3l", "parent_id": "t1_c02arqy", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 4, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywm2", "retrieved_on": 1427425704, "body": "haha I wouldn't say disturbed. \nIt's just that I think you get a 'feel' for a language when you first look at it. C, perl, basic, asm etc when written just looks 'nice'. \nThere's a certain flow to it. \nI like my languages to read:\n&gt;* 1\n&gt;* 2\n&gt;* 3\n&gt;* 4\n&gt;* 5\n\nNot:\n&gt;42153\n\nThis just ..looks.. nuts to me.\n&gt;liftM(dec)(sequence(map(flip(M.lookup), decodeMap, list))); ?\n\nTotally subjective, ignorant point I know. But, meh it's the internet     ", "archived": true, "distinguished": null, "edited": true, "name": "t1_c02arqy", "parent_id": "t1_c02aroy", "id": "c02arqy", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02aroy", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 8, "link_id": "t3_5ywm2", "retrieved_on": 1427425705, "id": "c02aroy", "author_flair_text": null, "distinguished": null, "edited": false, "parent_id": "t1_c02arnm", "body": "Would you prefer liftM(dec)(sequence(map(flip(M.lookup), decodeMap, list))); ?", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425704, "subreddit_id": "t5_2fwo", "created_utc": "1193141075", "name": "t1_c02arp7", "gilded": 0, "link_id": "t3_5ywm2", "downs": 0, "score": 11, "score_hidden": false, "id": "c02arp7", "author": "augustss", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 11, "parent_id": "t1_c02arnm", "body": "Just curious, what is it about the syntax that disturbs you?", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 8, "author": "hoosier45678", "created_utc": "1193142750", "children": [{"controversiality": 0, "retrieved_on": 1427425676, "subreddit_id": "t5_2fwo", "created_utc": "1193158827", "name": "t1_c02atwk", "gilded": 0, "link_id": "t3_5ywm2", "downs": 0, "score": 3, "score_hidden": false, "id": "c02atwk", "author": "SwellJoe", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 3, "parent_id": "t1_c02aru7", "body": "Yeah...as a predominantly Perl guy (with a great fondness for map and grep) I find Haskell very appealing, as functional languages go.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02aru7", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 8, "link_id": "t3_5ywm2", "retrieved_on": 1427425703, "body": "In idiomatic perl (rather than C programmer's perl), it's similar to a map/grep/reverse chain.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02arnm", "id": "c02aru7", "author_flair_css_class": null}], "subreddit": "programming", "ups": 4, "name": "t1_c02arnm", "controversiality": 0, "archived": true, "link_id": "t3_5ywm2", "retrieved_on": 1427425705, "score_hidden": false, "id": "c02arnm", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t3_5ywm2", "body": " I generally code C++ and perl mostly. When you look at a language such as this and look at the syntax: \n&gt;liftM dec $ sequence $ map (flip M.lookup decodeMap) s \n\nAm I the only one who thinks.. 'naaah this language is not for me'? ", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 7, "author": "mjd", "created_utc": "1193148449", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 1, "author": "kscaldef", "created_utc": "1193151216", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "author_flair_text": null, "name": "t1_c02ast3", "gilded": 0, "link_id": "t3_5ywm2", "retrieved_on": 1427425690, "score": 6, "score_hidden": false, "body": "http://www.cs.utexas.edu/~EWD/transcriptions/EWD03xx/EWD340.html", "author": "mjd", "created_utc": "1193151382", "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "ups": 6, "parent_id": "t1_c02assa", "id": "c02ast3", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 1, "controversiality": 0, "archived": true, "link_id": "t3_5ywm2", "retrieved_on": 1427425690, "id": "c02assa", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02assa", "parent_id": "t1_c02asfl", "body": "do you have a link to the full essay that comes from?", "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 7, "author": "sblinn", "created_utc": "1193154582", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "justinhj", "created_utc": "1193165461", "children": [{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 2, "author": "sblinn", "created_utc": "1193165655", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1193169989", "name": "t1_c02avg3", "gilded": 0, "link_id": "t3_5ywm2", "retrieved_on": 1427425656, "score": 2, "score_hidden": false, "id": "c02avg3", "author": "justinhj", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 2, "parent_id": "t1_c02autl", "body": "Correction: They shouldn't be using it for anything important until they are exports. Where important means you will get paid for it and it is supposed to work. \n\n", "author_flair_css_class": null}], "subreddit": "programming", "ups": 2, "name": "t1_c02autl", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywm2", "retrieved_on": 1427425664, "score_hidden": false, "body": "&gt; If somebody is not an expert they shouldn't be using it.\n\nHow did they become an expert, then?", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02aush", "id": "c02autl", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 0, "name": "t1_c02aush", "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywm2", "retrieved_on": 1427425664, "score_hidden": false, "body": "I think it's important for code to be readable. But it's only important that it's readable by an expert in that language. If somebody is not an expert they shouldn't be using it. \n\nThe same is true of emacs. It takes a long time to learn how to use emacs, but once you do, there's a whole load of power and flexibility there. \n\n", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02ataj", "id": "c02aush", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02ataj", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 7, "link_id": "t3_5ywm2", "retrieved_on": 1427425684, "body": "Programming languages are for humans.\n\nSome humans can understand Haskell.\n\nI'm not one of those humans.\n\nYet.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02asfl", "id": "c02ataj", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02atfz", "gilded": 0, "link_id": "t3_5ywm2", "retrieved_on": 1427425682, "score": 13, "score_hidden": false, "body": "There's a difference between a one line *readable* program, which hasn't just been optimised for symbol count, and the usual sort of one-line program which goes around.\n\nI find it quite nice to have a programming language where you can get a lot done in 1 to 3 lines. It means that I can get up from my chair and wander around and still be programming in my head. Much more code than that, and I can't really keep track of it all in my working memory (at least not directly in the form of code).\n\nIt also makes programming on paper a good bit easier -- especially when using equational reasoning. If you're going to write down a program 10 or 20 times as you transform it, it had better be short. ;)", "author": "cgibbard", "created_utc": "1193155602", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 13, "parent_id": "t1_c02asfl", "id": "c02atfz", "author_flair_css_class": null}, {"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 13, "author": "bos", "created_utc": "1193157675", "children": [{"controversiality": 0, "retrieved_on": 1427425673, "subreddit_id": "t5_2fwo", "archived": true, "name": "t1_c02au5a", "gilded": 0, "link_id": "t3_5ywm2", "downs": 0, "score": 6, "score_hidden": false, "body": "I don't know myself.   I didn't have anything specific in mind, and I'm still trying to figure out myself how they relate.\n\nBut I thought it was interesting and worth considering in this context, so I posted it.\n", "author": "mjd", "created_utc": "1193160747", "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "ups": 6, "parent_id": "t1_c02atqb", "id": "c02au5a", "author_flair_css_class": null}], "subreddit": "programming", "score_hidden": false, "ups": 13, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywm2", "retrieved_on": 1427425678, "body": "I don't know what your point is in reposting Dijkstra's snark, but the code that Magnus wrote is completely normal Haskell, without the tiniest whiff of mystery to it.  It's not a clever trick by any means.\n\nWhat would you have us conclude from your quote?", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02atqb", "parent_id": "t1_c02asfl", "id": "c02atqb", "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02asfl", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 7, "link_id": "t3_5ywm2", "retrieved_on": 1427425695, "body": "&gt; [This phenomenon] takes one of two different forms: one programmer places a one-line program on the desk of another and either he proudly tells what it does and adds the question, \"Can you code this in less symbols?\"---as if this were of any conceptual relevance!---or he just says, \"Guess what it does!\" From this observation we must conclude that this language as a tool is an open invitation for clever tricks; and while exactly this may be the explanation for some of its appeal, viz., to those who like to show how clever they are, I am sorry, but I must regard this as one of the most damning things that can be said about a programming language.\n\n(Edsger Dijkstra)\n", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5ywm2", "id": "c02asfl", "author_flair_css_class": null}
{"subreddit_id": "t5_2fwo", "gilded": 0, "downs": 0, "score": 8, "author": "[deleted]", "created_utc": "1193155279", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193156618", "ups": 6, "gilded": 0, "link_id": "t3_5ywm2", "retrieved_on": 1427425680, "score": 6, "body": "It reduces the number of parentheses. Instead of\n\n    a (b (c (d (e f))))\n\nyou can write\n\n    a $ b $ c $ d $ e f\n", "author": "jmelesky", "archived": true, "distinguished": null, "edited": false, "id": "c02atle", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02atle", "parent_id": "t1_c02atee", "score_hidden": false, "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 0, "author": "mjd", "created_utc": "1193156726", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 12, "author": "bos", "created_utc": "1193157439", "children": [{"controversiality": 0, "retrieved_on": 1427425670, "subreddit_id": "t5_2fwo", "archived": true, "ups": 1, "gilded": 0, "link_id": "t3_5ywm2", "downs": 0, "score": 1, "id": "c02aubt", "author": "mjd", "created_utc": "1193162061", "distinguished": null, "edited": false, "body": "Thanks for the correction.\n", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02aubt", "parent_id": "t1_c02atoq", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02atoq", "score_hidden": false, "controversiality": 0, "archived": true, "ups": 12, "link_id": "t3_5ywm2", "retrieved_on": 1427425679, "id": "c02atoq", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t1_c02atlq", "body": " It's actually not quite the same.\n\nThe function `($)` would be the same as juxtaposition in a language like ML.  However, in Haskell it can only be used with types of kind `(*)`, i.e. rank-1 types.  You can't use `($)` with a rank-2 type of kind `(* -&gt; *)` without an explicit type annotation, because rank-2 types can't be inferred.\n\nThe reason for this is that Haskell's type system is more expressive than ML's.\n\nWhat's a rank-2 function?  A function that takes as an argument another function that is in turn polymorphic.   ", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 0, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ywm2", "retrieved_on": 1427425680, "body": "*a*$*b* just applies function *a* to argument *b*.  It's the same as (*a* *b*), but without the parentheses, and the reason you use it is for its without-the-parentheses-ness.\n\n", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02atlq", "parent_id": "t1_c02atee", "id": "c02atlq", "author_flair_css_class": null}, {"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193156774", "ups": 3, "gilded": 0, "link_id": "t3_5ywm2", "retrieved_on": 1427425680, "score": 3, "id": "c02atlw", "author": "Tommah", "archived": true, "distinguished": null, "edited": true, "body": "$ has the effect of grouping everything until the end of the line.  So `a $ b $ c d` is like `a (b (c d))`.  ", "author_flair_text": null, "subreddit_id": "t5_2fwo", "name": "t1_c02atlw", "parent_id": "t1_c02atee", "score_hidden": false, "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427425679, "subreddit_id": "t5_2fwo", "created_utc": "1193157011", "ups": 7, "gilded": 0, "link_id": "t3_5ywm2", "downs": 0, "score": 7, "body": " The '$' just means that the rest of the line should be treated as one expression.  An easy way to think about it is to turn the '$' into an '(' and a ')' at the end of the line.  So the following are all the same:\n\n`liftM dec $ sequence $ map (flip M.lookup decodeMap) s`\n\n`liftM dec $ sequence (map (flip M.lookup decodeMap) s)`\n\n`liftM dec (sequence (map (flip M.lookup decodeMap) s))`\n\n\nWithout the '$' or parentheses, they would all be treated as arguments to `liftM`.   ", "author": "jcharum", "archived": true, "distinguished": null, "edited": true, "id": "c02atmw", "author_flair_text": null, "subreddit": "programming", "name": "t1_c02atmw", "parent_id": "t1_c02atee", "score_hidden": false, "author_flair_css_class": null}], "subreddit": "programming", "name": "t1_c02atee", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 8, "link_id": "t3_5ywm2", "retrieved_on": 1427425682, "body": "What is it with all the $ in Haskell code?  I don't remember it now, but back when I learned some Haskell, I thought it meant something very basic (function application?).\n\nWhy is this needed, or what is the whole point?", "archived": true, "distinguished": null, "edited": false, "parent_id": "t3_5ywm2", "id": "c02atee", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit": "programming", "created_utc": "1193164657", "name": "t1_c02aunl", "gilded": 0, "link_id": "t3_5ywm2", "retrieved_on": 1427425666, "score": 7, "score_hidden": false, "body": "&gt; Why doesn\u2019t all programming languages it this easy?\n\nThis made my brain explode.", "author": "gnuvince", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 7, "parent_id": "t3_5ywm2", "id": "c02aunl", "author_flair_css_class": null}
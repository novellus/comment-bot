{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 6, "author": "w-g", "created_utc": "1193834461", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 7, "author": "antonivs", "created_utc": "1193837287", "children": [{"controversiality": 0, "downs": 0, "subreddit": "programming", "archived": true, "name": "t1_c02ccw3", "gilded": 0, "link_id": "t3_5ziil", "retrieved_on": 1427424892, "score": 4, "body": "&gt; It should be easy to get Tiny-CLOS working on Ikarus (Tiny-CLOS is pretty portable (...)\n\nThat's really good news! :)\nI'll probably be trying Ikarus soon.\n\n&gt; The R6RS condition system is fairly powerful - what are you looking for in particular?\n\nI didn't know R6RS had that (I don't know the full standard). I got used to having a list of conditions and restarts, and defining different points in the call stack for signaling and handling conditions in Common Lisp, and would like to (maybe) switch to Scheme. But the condition system is very important to me.\n\n&gt; For an emacs mode, you might check out Quack or SLIME48\n\nHey, I know Quack... If it can be made to work with Ikarus, I'll be reeeeealy happy! 8-)\n", "author": "w-g", "created_utc": "1193838456", "distinguished": null, "edited": true, "id": "c02ccw3", "author_flair_text": null, "subreddit_id": "t5_2fwo", "ups": 4, "parent_id": "t1_c02ccrl", "score_hidden": false, "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "ups": 7, "score_hidden": false, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ziil", "retrieved_on": 1427424895, "body": "It should be easy to get [Tiny-CLOS](http://community.schemewiki.org/?Tiny-CLOS)\nworking on Ikarus (Tiny-CLOS is pretty portable, and R6RS is mostly a superset of R5RS.)\n\nThe R6RS condition system is fairly powerful - what are you looking for in particular?\n\nFor an emacs mode, you might check out [Quack](http://www.neilvandyke.org/quack/) or [SLIME48](http://mumble.net/~campbell/slime48.html) - which are not Ikarus-specific, but particularly Quack is oriented towards PLT Scheme, whose module system is fairly similar to that of R6RS.\n", "archived": true, "distinguished": null, "edited": true, "name": "t1_c02ccrl", "parent_id": "t1_c02ccjo", "id": "c02ccrl", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02ccjo", "ups": 6, "controversiality": 0, "archived": true, "link_id": "t3_5ziil", "retrieved_on": 1427424897, "score_hidden": false, "id": "c02ccjo", "author_flair_text": null, "distinguished": null, "edited": true, "parent_id": "t3_5ziil", "body": "Sounds very interesting.\n\nI look forward to see the libraries that will be developed for Ikarus. In particular...\n\n- Some lightweight version of CLOS\n- A condition system similar to that of \nCmmon Lisp (should be moderately simple to build on top of call/cc)\n- Interactivity -- an Emacs Lisp mode. Doesn't need to be as flexible and powerful as SLIME, but it would be nice to be able to program interactively\n\nThe rest (the flexibility of macros, performance and simplicity) are already there! :-)", "author_flair_css_class": null}
{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "created_utc": "1193837518", "ups": 6, "gilded": 0, "link_id": "t3_5ziil", "retrieved_on": 1427424893, "score": 6, "body": "A native windows version (no cygwin please) would be nice, too...", "id": "c02ccsk", "author": "[deleted]", "author_flair_text": null, "distinguished": null, "edited": true, "archived": true, "subreddit": "programming", "name": "t1_c02ccsk", "parent_id": "t3_5ziil", "score_hidden": false, "author_flair_css_class": null}
{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 10, "author": "jlongster", "created_utc": "1193840627", "children": [{"controversiality": 0, "retrieved_on": 1427424889, "subreddit_id": "t5_2fwo", "created_utc": "1193841432", "ups": 3, "gilded": 0, "link_id": "t3_5ziil", "downs": 0, "score": 3, "body": "&gt; Being a native code compiler doesn't inherently mean it's very fast; several years of optimizations have gone into gcc which is what makes Scheme-&gt;C compiled Schemes so fast.\n\nGood point... Is there a standard or well-known benchmark suite for Scheme?", "id": "c02cd7z", "author": "w-g", "author_flair_text": null, "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "name": "t1_c02cd7z", "parent_id": "t1_c02cd4s", "score_hidden": false, "author_flair_css_class": null}, {"subreddit": "programming", "gilded": 0, "downs": 0, "score": 6, "author": "MarshallBanana", "created_utc": "1193845532", "children": [{"subreddit": "programming", "gilded": 0, "downs": 0, "score": 5, "author": "procrastitron", "created_utc": "1193854130", "children": [{"controversiality": 0, "downs": 0, "subreddit_id": "t5_2fwo", "author_flair_text": null, "name": "t1_c02cf7g", "gilded": 0, "link_id": "t3_5ziil", "retrieved_on": 1427424862, "score": 4, "score_hidden": false, "id": "c02cf7g", "author": "MarshallBanana", "created_utc": "1193855384", "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "ups": 4, "parent_id": "t1_c02cf18", "body": "LLVM seems far more capable and mature, though.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 5, "controversiality": 0, "archived": true, "link_id": "t3_5ziil", "retrieved_on": 1427424865, "id": "c02cf18", "author_flair_text": null, "distinguished": null, "edited": false, "name": "t1_c02cf18", "parent_id": "t1_c02cdqj", "body": "You could also use [C--](http://www.cminusminus.org/) for a decent back end.", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "name": "t1_c02cdqj", "score_hidden": false, "controversiality": 0, "author_flair_text": null, "ups": 6, "link_id": "t3_5ziil", "retrieved_on": 1427424881, "body": "Sounds like they should be using LLVM, in that case. That way, you get very good optimization essentially for free. And you get code generations for all the different architectures LLVM has backends for.", "archived": true, "distinguished": null, "edited": false, "parent_id": "t1_c02cd4s", "id": "c02cdqj", "author_flair_css_class": null}, {"controversiality": 0, "retrieved_on": 1427424849, "subreddit_id": "t5_2fwo", "created_utc": "1193864397", "ups": 1, "gilded": 0, "link_id": "t3_5ziil", "downs": 0, "score": 1, "id": "c02cgc7", "author": "[deleted]", "archived": true, "distinguished": null, "edited": false, "author_flair_text": null, "subreddit": "programming", "score_hidden": false, "name": "t1_c02cgc7", "parent_id": "t1_c02cd4s", "body": "[deleted]", "author_flair_css_class": null}, {"controversiality": 0, "id": "c02cgc9", "subreddit": "programming", "author_flair_text": null, "ups": 1, "gilded": 0, "link_id": "t3_5ziil", "retrieved_on": 1427424849, "score": 1, "body": "[deleted]", "author": "[deleted]", "created_utc": "1193864406", "downs": 0, "distinguished": null, "edited": false, "archived": true, "subreddit_id": "t5_2fwo", "score_hidden": false, "parent_id": "t1_c02cd4s", "name": "t1_c02cgc9", "author_flair_css_class": null}], "subreddit_id": "t5_2fwo", "score_hidden": false, "ups": 10, "controversiality": 0, "author_flair_text": null, "link_id": "t3_5ziil", "retrieved_on": 1427424890, "body": "It's something to keep an eye on.  I want performance benchmarks though.  Being a native code compiler doesn't inherently mean it's very fast; several years of optimizations have gone into gcc which is what makes Scheme-&gt;C compiled Schemes so fast.\n\nIt's obvious that promoting R6RS adoption is more of its purpose though, which is good.", "archived": true, "distinguished": null, "edited": false, "name": "t1_c02cd4s", "parent_id": "t3_5ziil", "id": "c02cd4s", "author_flair_css_class": null}
{"controversiality": 0, "retrieved_on": 1427424872, "subreddit_id": "t5_2fwo", "author_flair_text": null, "name": "t1_c02cefj", "gilded": 0, "link_id": "t3_5ziil", "downs": 0, "score": -9, "score_hidden": false, "id": "c02cefj", "author": "[deleted]", "created_utc": "1193850339", "distinguished": null, "edited": false, "archived": true, "subreddit": "programming", "ups": -9, "parent_id": "t3_5ziil", "body": "[deleted]", "author_flair_css_class": null}